#pragma checksum "C:\Users\USER\Desktop\OwnYITCSAT_V3\Views\csat_settings_page\setting_scan_ip_range.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "ab10dc0c9a28435d95965512da08c239959f0793"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_csat_settings_page_setting_scan_ip_range), @"mvc.1.0.view", @"/Views/csat_settings_page/setting_scan_ip_range.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/csat_settings_page/setting_scan_ip_range.cshtml", typeof(AspNetCore.Views_csat_settings_page_setting_scan_ip_range))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\USER\Desktop\OwnYITCSAT_V3\Views\_ViewImports.cshtml"
using OwnYITCSAT;

#line default
#line hidden
#line 2 "C:\Users\USER\Desktop\OwnYITCSAT_V3\Views\_ViewImports.cshtml"
using OwnYITCSAT.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"ab10dc0c9a28435d95965512da08c239959f0793", @"/Views/csat_settings_page/setting_scan_ip_range.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"fbc54f8cb37d807092c8e3ca3f38d3620e0913e8", @"/Views/_ViewImports.cshtml")]
    public class Views_csat_settings_page_setting_scan_ip_range : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("form-horizontal"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("method", "post", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("name", new global::Microsoft.AspNetCore.Html.HtmlString("ip_scan_form"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("name", new global::Microsoft.AspNetCore.Html.HtmlString("add_ip_form"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("onsubmit", new global::Microsoft.AspNetCore.Html.HtmlString("return(validate1());"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("form-horizontal"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.SingleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("method", "post", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.SingleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_7 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("onload", new global::Microsoft.AspNetCore.Html.HtmlString("showscaniprange();"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 2, true);
            WriteLiteral("\r\n");
            EndContext();
#line 2 "C:\Users\USER\Desktop\OwnYITCSAT_V3\Views\csat_settings_page\setting_scan_ip_range.cshtml"
  
    ViewData["Title"] = "setting_scan_ip_range";
    Layout = "~/Views/Shared/ownyit_main_page.cshtml";

#line default
#line hidden
            BeginContext(115, 2309, true);
            WriteLiteral(@"<script type=""text/javascript"">
    // <!--
    // Form validation code will come here.

    function validate() {

        if (document.ip_scan_form.iprange.value == """") {

            document.ip_scan_form.iprange.focus();
            alert(""Please provide IP Range!"");
            return false;
        }
        if (document.ip_scan_form.subnet.value == """") {

            document.ip_scan_form.subnet.focus();
            alert(""Please provide Subnet Mask!"");
            return false;
        }
        else {
            return (true);
        }
    }
    function validate1() {

        if (document.add_ip_form.startip.value == """") {

            document.add_ip_form.startip.focus();
            alert(""Please provide start IP Address!"");
            return false;
        }
        if (document.add_ip_form.endip.value == """") {

            document.add_ip_form.endip.focus();
            alert(""Please provide End IP Address!"");
            return false;
        }

    }

");
            WriteLiteral(@"    function Check1() {
        if (document.getElementById('authorize').checked) {
            document.getElementById('authorize_category').style.display = 'block';
            document.getElementById('unauthorize_category').style.display = 'none';
        }

        if (document.getElementById('unauthorize').checked) {
            document.getElementById('unauthorize_category').style.display = 'block';
            document.getElementById('authorize_category').style.display = 'none';

        }
        if (document.getElementById('authorize1').checked) {
            document.getElementById('authorize_category1').style.display = 'block';
            document.getElementById('unauthorize_category1').style.display = 'none';
        }

        if (document.getElementById('unauthorize1').checked) {
            document.getElementById('unauthorize_category1').style.display = 'block';
            document.getElementById('authorize_category1').style.display = 'none';

        }

    }
    //--");
            WriteLiteral(@">
    function isNumberKey(evt) {
        var charCode = (evt.which) ? evt.which : evt.keyCode;
        if (charCode != 46 && charCode > 31
            && (charCode < 48 || charCode > 57))
            return false;
        return true;
    }
</script>
");
            EndContext();
            BeginContext(2424, 48299, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "527d0ad30da14c2f85fe51f25cd256a5", async() => {
                BeginContext(2458, 477, true);
                WriteLiteral(@"
    <div class=""row"">

        <div class=""ibox float-e-margins "">
            <div class=""ibox-content"" style=""padding:4px;"">
                <div class=""pull-right form_label btn_top_margin"">
                    <button class=""btn btn-primary btn-md day"" data-toggle=""modal"" id=""btnautorizeip"">Authorized IP Range</button>
                </div>

                <ul class=""breadcrumb"" style=""margin-bottom:0px;"">
                    <li>
                        ");
                EndContext();
                BeginContext(2936, 74, false);
#line 88 "C:\Users\USER\Desktop\OwnYITCSAT_V3\Views\csat_settings_page\setting_scan_ip_range.cshtml"
                   Write(Html.ActionLink("Settings", "setting_scan_ip_range", "csat_settings_page"));

#line default
#line hidden
                EndContext();
                BeginContext(3010, 382, true);
                WriteLiteral(@"
                        <i class=""icon-angle-right""></i>
                    </li>
                    <li>Scan IP Range </li>
                </ul>
            </div>
        </div>

        <!--side menu-->
        <div class=""col-sm-2 col-md-2 col-lg-2 no_padding"">
            <div class=""ibox float-e-margins "">
                <div class=""ibox-content sidemenu"">
");
                EndContext();
                BeginContext(3441, 39, false);
#line 101 "C:\Users\USER\Desktop\OwnYITCSAT_V3\Views\csat_settings_page\setting_scan_ip_range.cshtml"
                   Write(Html.Partial("csat_settings_page_menu"));

#line default
#line hidden
                EndContext();
#line 101 "C:\Users\USER\Desktop\OwnYITCSAT_V3\Views\csat_settings_page\setting_scan_ip_range.cshtml"
                                                                ;
                    

#line default
#line hidden
                BeginContext(3506, 516, true);
                WriteLiteral(@"                </div>
            </div>
        </div>
        <!--side menu end-->

        <div class=""col-sm-10 col-md-10 col-lg-10"">
            <div class=""ibox float-e-margins"" style=""margin-bottom: 10px;"">
                <div class=""ibox-content"">
                    <div class=""row"">
                        <div class=""col-sm-12 col-md-12 col-lg-12"">

                            <div class=""row"">
                                <div class=""col-xs-12"">
                                    ");
                EndContext();
                BeginContext(4022, 565, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "a8fce26d0d554672a2614eb8dc974912", async() => {
                    BeginContext(4066, 514, true);
                    WriteLiteral(@"
                                        <div class=""form-group"">
                                            <label for=""nameField"" style=""margin-top: -5px;background-color: #fff;text-align: center;color: #3D93C8;width: 120px;"" class=""col-xs-2 form_label"">&nbsp;&nbsp;Advance Search&nbsp;&nbsp;</label>
                                            <div class=""col-xs-10"">
                                            </div>
                                        </div>

                                    ");
                    EndContext();
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper.Method = (string)__tagHelperAttribute_1.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(4587, 256, true);
                WriteLiteral(@"
                                </div>
                            </div>
                        </div>

                    </div>
                    <div class=""row"">
                        <div class=""col-xs-12"">
                            ");
                EndContext();
                BeginContext(4843, 1208, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "49dfb335593e4d51a03ab9d14c126cf3", async() => {
                    BeginContext(4907, 2, true);
                    WriteLiteral("\r\n");
                    EndContext();
                    BeginContext(4978, 1066, true);
                    WriteLiteral(@"                                <div class=""form-group"">
                                    <label for=""nameField"" class=""col-xs-1"">IP Range</label>
                                    <div class=""col-xs-2"">
                                        <input type=""text"" name=""iprange"" id=""ip"" class=""form-control ip_address"" placeholder=""Enter IP Range"" />
                                    </div>
                                    <label for=""nameField"" class=""col-xs-1 form_label"">Subnet Mask</label>
                                    <div class=""col-xs-2"">
                                        <input type=""text"" name=""subnet"" class=""form-control"" value=""255.255.255.0"" />

                                    </div>
                                    <div class=""pull-left col-xs-1"">
                                        <input type=""button"" class=""btn btn-primary"" value=""Scan IP Range"" id=""btnsavescanip"" onclick=""scanip()"">
                                    </div>
                          ");
                    WriteLiteral("      </div>\r\n                            ");
                    EndContext();
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper.Method = (string)__tagHelperAttribute_1.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(6051, 434, true);
                WriteLiteral(@"
                        </div>
                    </div>
                </div>
            </div>

            <!--form  content end-->

            <div class=""row ibox2"">
                <div class=""col-sm-12 col-md-12 col-lg-12 ibox2-content"" id=""divscanip_div"">
                    <table id=""divscanip"" class=""table table-striped table-bordered "" width=""100%""></table>
                </div>
            </div>

");
                EndContext();
                BeginContext(6704, 1192, true);
                WriteLiteral(@"        </div>
        <div class=""space_bottom"">&nbsp;</div>
    </div>
    <!-- show_detail_popup model box  Content-->
    <div class=""modal fade"" id=""show_detail_popup"" tabindex=""-1"" role=""dialog"" aria-labelledby=""myModalLabel"" aria-hidden=""true"" data-backdrop=""static"" data-keyboard=""false"">
        <div class=""modal-dialog  modal-lg"" style=""margin-top: 82px;"">
            <div class=""modal-content"">
                <div class=""modal-header"">
                    <button type=""button"" class=""close"" data-dismiss=""modal"" aria-hidden=""true"">&times;</button>
                    <h6 class="" modal-title"">
                        Show Detail IP Range
                    </h6>
                </div>
                <div class=""modal-body"">

                    <!-- IP Datatable start-->
                   
                    <div class=""row"">                       
                        <div class=""col-sm-12 col-md-12 col-lg-12"" id=""divscanippcdetail_div"">
                            <table i");
                WriteLiteral("d=\"divscanippcdetail\" class=\"table table-striped table-bordered \" width=\"100%\"></table>\r\n                        </div>\r\n                    </div>                   \r\n");
                EndContext();
                BeginContext(8187, 2141, true);
                WriteLiteral(@"                    <!--Count System  Data  Datatable end-->
                </div>
                <div class=""modal-footer"">
                    <button type=""button"" class=""btn btn-primary"" data-dismiss=""modal"">Close</button>
                </div>
            </div><!-- /.modal-content -->
        </div><!-- /.modal-dialog -->
    </div>
    <!-- End show_detail_popup model box Content -->
    <!-- authorized_ip_popup model box  Content-->
    <div class=""modal fade"" id=""authorized_ip_popup"" tabindex=""-1"" role=""dialog"" aria-labelledby=""myModalLabel"" aria-hidden=""true"" data-backdrop=""static"" data-keyboard=""false"">
        <div class=""modal-dialog  modal-lg"" style=""margin-top: 82px;"">
            <div class=""modal-content"">
                <div class=""modal-header"">
                    <button type=""button"" class=""close"" data-dismiss=""modal"" onclick=""cleardata()"" aria-hidden=""true"">&times;</button>
                    <h6 class="" modal-title"">
                        Authorized IP Range
   ");
                WriteLiteral(@"                 </h6>
                </div>
                <div class=""modal-body"">
                    <!-- authorized IP Datatable start-->
                    <div class=""row"">                       
                        <div>
                            <button type=""button"" data-toggle=""modal"" id=""btnaddiprange"" data-target=""#add_ip_range"" class=""btn btn-primary pull-right "" style=""margin-top: -20px;"">Add New <b style=""font-weight:bolder;"">+</b></button>
                            <div class=""col-sm-12 col-md-12 col-lg-12"" id=""divauthip_div"" style=""margin-top: 20px;"">
                                <div id=""overlay_modal"" style=""display:none;"">
                                    <div class=""cv-spinner"">
                                        <span class=""spinner_modal""></span>
                                    </div>
                                </div>
                                <table id=""divauthip"" class=""table table-striped table-bordered "" width=""100%""></table>
     ");
                WriteLiteral("                       </div>\r\n                        </div>\r\n\r\n                    </div>\r\n");
                EndContext();
                BeginContext(10645, 1327, true);
                WriteLiteral(@"                    <!--authorized  Datatable end-->
                </div>
                <div class=""modal-footer"">
                    <button type=""button"" class=""btn btn-primary"" onclick=""cleardata()"" data-dismiss=""modal"">Close</button>
                </div>
            </div><!-- /.modal-content -->
        </div><!-- /.modal-dialog -->
    </div>
    <!-- End authorized_ip_popup model box Content -->
    <!--add new IP Range form content-->
    <div class=""modal fade"" id=""add_ip_range"" tabindex=""-1"" role=""dialog"" aria-labelledby=""myModalLabel"" aria-hidden=""true"" data-backdrop=""static"" data-keyboard=""false"">
        <div class=""modal-dialog modal-md"">
            <div class=""modal-content"">
                <div class=""modal-header"">
                    <button type=""button"" class=""close"" data-dismiss=""modal"" onclick=""cleardata()"" aria-hidden=""true"">&times;</button>
                    <h6 class=""modal-title"">Add New IP Range </h6>
                </div>
                <div class=""mod");
                WriteLiteral(@"al-body"">
                    <!--form  content-->
                    <div class=""row"">
                        <div class=""col-sm-12 col-md-12 col-lg-12"">

                            <div class=""row"">
                                <div class=""col-xs-12"">
                                    ");
                EndContext();
                BeginContext(11972, 4283, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e22d0a8bb7bf404db5949a56c9007c3a", async() => {
                    BeginContext(12067, 4181, true);
                    WriteLiteral(@"

                                        <div class=""form-group"">
                                            <label for=""nameField"" class=""col-xs-2 form_label"">Category </label>
                                            <div class=""col-xs-2"">
                                                <div class=""radio"">
                                                    <label> <input type=""radio"" name=""category"" id=""authorize"" value=""0"" checked onclick=""javascript: Check1();""> Authorize </label>
                                                </div>
                                            </div>
                                            <div class=""col-xs-2"">
                                                <div class=""radio"">
                                                    <label> <input type=""radio"" name=""category"" id=""unauthorize"" value=""1"" onclick=""javascript: Check1();""> Unauthorize </label>
                                                </div>
                                          ");
                    WriteLiteral(@"  </div>
                                        </div>
                                        <div class=""form-group"">
                                            <label for=""nameField"" class=""col-xs-2 form_label"">Start IP Address</label>
                                            <div class=""col-xs-5"">
                                                <input type=""text"" name=""startip"" id=""startip"" class=""form-control ip_address"" placeholder=""Enter Start IP Address"" />
                                            </div>
                                        </div>
                                        <div class=""form-group"">
                                            <label for=""nameField"" class=""col-xs-2 form_label"">End IP Address</label>
                                            <div class=""col-xs-5"">
                                                <input type=""text"" name=""endip"" id=""endip"" class=""form-control ip_address"" placeholder=""Enter End IP Address"" />
                            ");
                    WriteLiteral(@"                </div>
                                        </div>
                                        <div id=""authorize_category"">


                                        </div>

                                        <div id=""unauthorize_category"" style=""display:none;"">
                                            <div class=""form-group"">
                                                <label for=""nameField"" class=""col-xs-2 form_label"">Local Port</label>
                                                <div class=""col-xs-5"">
                                                    <input type=""text"" name=""localport"" id=""localport"" class=""form-control"" onkeypress=""return isNumberKey(event)"" maxlength=""5"" placeholder=""Enter Local Port"" />
                                                </div>
                                            </div>
                                            <div class=""form-group"">
                                                <label for=""nameField"" class=""col");
                    WriteLiteral(@"-xs-2 form_label"">Remote Port</label>
                                                <div class=""col-xs-5"">
                                                    <input type=""text"" name=""remoteport"" id=""remoteport"" class=""form-control"" onkeypress=""return isNumberKey(event)"" maxlength=""5"" placeholder=""Enter Remote Port"" />
                                                </div>
                                            </div>
                                        </div>
                                        <div class=""form-group model-button"">
                                            <div class=""col-xs-8 pull-right "">
                                                <input type=""submit"" class=""btn btn-primary"" value=""Add IP Range"" id=""btnsaveiprange"" name=""add range1"" />
                                                <input type=""button"" class=""btn btn-default"" data-dismiss=""modal"" value=""Cancel"" name=""Add cancel1"" onclick=""cleardata()"" />
                                            </div>
 ");
                    WriteLiteral("                                       </div>\r\n\r\n                                    ");
                    EndContext();
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper.Method = (string)__tagHelperAttribute_1.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(16255, 1205, true);
                WriteLiteral(@"

                                </div>
                            </div>
                        </div>
                    </div>  <!--form  content end-->
                </div>
            </div><!-- /.modal-content -->
        </div><!-- /.modal-dialog -->
    </div> <!--add new IP Range form content End-->
    <!--edit  IP Range form content-->
    <div class=""modal fade"" id=""edit_ip_range"" tabindex=""-1"" role=""dialog"" aria-labelledby=""myModalLabel"" aria-hidden=""true"" data-backdrop=""static"" data-keyboard=""false"">
        <div class=""modal-dialog modal-md"">
            <div class=""modal-content"">
                <div class=""modal-header"">
                    <button type=""button"" class=""close"" data-dismiss=""modal"" aria-hidden=""true"">&times;</button>
                    <h6 class=""modal-title"">Edit IP Range </h6>
                </div>
                <div class=""modal-body"">
                    <!--form  content-->
                    <div class=""row"">
                        <div c");
                WriteLiteral("lass=\"col-sm-12 col-md-12 col-lg-12\">\r\n\r\n                            <div class=\"row\">\r\n                                <div class=\"col-xs-12\">\r\n                                    ");
                EndContext();
                BeginContext(17460, 4202, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "535dc0a6c07a48ceb7bf4127ad6e6ae8", async() => {
                    BeginContext(17504, 4151, true);
                    WriteLiteral(@"

                                        <div class=""form-group"">
                                            <label for=""nameField"" class=""col-xs-3"">Category </label>
                                            <div class=""col-xs-2"">
                                                <div class=""radio"">
                                                    <label> <input type=""radio"" name=""category"" id=""authorize1"" value=""authorize"" checked onclick=""javascript: Check1();""> Authorize </label>
                                                </div>
                                            </div>
                                            <div class=""col-xs-2"">
                                                <div class=""radio"">
                                                    <label> <input type=""radio"" name=""category"" id=""unauthorize1"" value=""unauthorize"" onclick=""javascript: Check1();""> Unauthorize </label>
                                                </div>
                                 ");
                    WriteLiteral(@"           </div>


                                        </div>
                                        <div class=""form-group"">
                                            <label for=""nameField"" class=""col-xs-3"">Start IP Address</label>
                                            <div class=""col-xs-5"">
                                                <input type=""text"" name=""startip"" class=""form-control ip_address"" id=""startip1"" placeholder=""Enter Start IP Address"" />
                                            </div>
                                        </div>
                                        <div class=""form-group"">
                                            <label for=""nameField"" class=""col-xs-3"">End IP Address</label>
                                            <div class=""col-xs-5"">
                                                <input type=""text"" name=""endip"" class=""form-control ip_address"" id=""endip1"" placeholder=""Enter End IP Address"" />
                                   ");
                    WriteLiteral(@"         </div>
                                        </div>
                                        <div id=""authorize_category1"">

                                        </div>

                                        <div id=""unauthorize_category1"" style=""display:none;"">

                                            <div class=""form-group"">
                                                <label for=""nameField"" class=""col-xs-3"">Local Port</label>
                                                <div class=""col-xs-5"">
                                                    <input type=""text"" name=""Localport"" id=""localport1"" class=""form-control"" onkeypress=""return isNumberKey(event)"" maxlength=""5"" value=""8080"" placeholder=""Enter Local Port"" />
                                                </div>
                                            </div>
                                            <div class=""form-group"">
                                                <label for=""nameField"" class=""col-x");
                    WriteLiteral(@"s-3"">Remote Port</label>
                                                <div class=""col-xs-5"">
                                                    <input type=""text"" name=""remoteport"" id=""remoteport1"" class=""form-control"" onkeypress=""return isNumberKey(event)"" maxlength=""5"" value=""143"" placeholder=""Enter Remote Port"" />
                                                </div>
                                            </div>
                                        </div>

                                        <div class=""form-group model-button"">
                                            <div class=""col-xs-7 pull-right "">
                                                <input type=""button"" class=""btn btn-primary"" value=""Edit IP Range"" id=""ipupdate"" name=""edit range"" />
                                                <input type=""button"" class=""btn btn-default"" value=""Cancel"" id=""ipEditcancel"" name=""Edit cancel"" />
                                            </div>
                             ");
                    WriteLiteral("           </div>\r\n                                    ");
                    EndContext();
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper.Method = (string)__tagHelperAttribute_1.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(21662, 1093, true);
                WriteLiteral(@"

                                </div>
                            </div>
                        </div>
                    </div>  <!--form  content end-->
                </div>
            </div><!-- /.modal-content -->
        </div><!-- /.modal-dialog -->
    </div> <!--edit IP Range form content End-->
    <!--delete_authorized_ip  model  content-->
    <div class=""modal fade"" id=""delete_authorized_ip"" tabindex=""-1"" role=""dialog"" aria-labelledby=""myModalLabel"" aria-hidden=""true"" data-backdrop=""static"" data-keyboard=""false"">
        <div class=""modal-dialog  modal-small"">
            <div class=""modal-content"">
                <div class=""modal-header"">
                    <button type=""button"" class=""close"" data-dismiss=""modal"" aria-hidden=""true"">&times;</button>
                    <h6 class="" modal-title"">
                        Confirmation
                    </h6>
                </div>
                <div class=""modal-body"">
                    <div class=""row"">
        ");
                WriteLiteral("                <div class=\"col-xs-10\">\r\n                            ");
                EndContext();
                BeginContext(22755, 1103, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "2d23755233124e5c9f17057b22dd8f40", async() => {
                    BeginContext(22799, 1052, true);
                    WriteLiteral(@"
                                <div class=""form-group"">

                                    <label for=""nameField"" class=""col-xs-12"">
                                        <i class=""glyphicon glyphicon-exclamation-sign delete_msg""></i>
                                        <span style=""font-weight:normal;margin-left:30px;"">Are you sure you want to delete this record?</span>
                                    </label>

                                </div>
                                <div class=""form-group"">
                                    <label for=""nameField"" class=""col-xs-4""></label>
                                    <div class=""col-xs-6"">
                                        <input type=""button"" class=""btn btn-primary"" name=""yes"" value=""Yes"" id=""btndelete"" />
                                        <input type=""button"" class=""btn btn-default"" name=""no"" value=""No"" id=""btndeletecancle"" />
                                    </div>
                                </div>
");
                    WriteLiteral("                            ");
                    EndContext();
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper.Method = (string)__tagHelperAttribute_1.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(23858, 1081, true);
                WriteLiteral(@"
                        </div>
                    </div>
                </div>
            </div><!-- /.modal-content -->
        </div><!-- /.modal-dialog -->
    </div>
    <!--delete_authorized_ip device model  content-->
    <!--delete_range device model  content-->
    <div class='modal fade ' id='delete_range' tabindex='-1' role='dialog' aria-labelledby='myModalLabel' aria-hidden='true'>
        <div class='modal-dialog  modal-small'>
            <div class='modal-content '>
                <div class='modal-header'>
                    <button type='button' class='close' data-dismiss='modal' aria-hidden='true'>&times;</button>
                    <h6 class='modal-title'>Conformation </h6>
                </div>
                <div class='modal-body'>
                    <!--form  content-->
                    <div class='row'>
                        <div class='col-sm-12 col-md-12 col-lg-12'>

                            <div class='row'>
                                <div");
                WriteLiteral(" class=\'col-xs-12\'>\r\n                                    ");
                EndContext();
                BeginContext(24939, 1219, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "f271ad80cb484d0aa3d3dce8d193ee28", async() => {
                    BeginContext(24983, 1168, true);
                    WriteLiteral(@"
                                        <div class='form-group'>

                                            <label for='nameField' class='col-xs-12'>
                                                <i class='glyphicon glyphicon-exclamation-sign delete_msg'></i>
                                                <span style='font-weight:normal;margin-left:30px;'>Are you sure you want to delete this record?</span>
                                            </label>

                                        </div>
                                        <div class='form-group'>
                                            <label for='nameField' class='col-xs-4'></label>
                                            <div class='col-xs-6'>
                                                <input type='button' class='btn btn-primary' name='yes' value='Yes' id=""btnscandelete"" />
                                                <input type='button' class='btn btn-default' data-dismiss=""modal"" name='no' value='");
                    WriteLiteral("No\' />\r\n                                            </div>\r\n                                        </div>\r\n                                    ");
                    EndContext();
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
                __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper.Method = (string)__tagHelperAttribute_6.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_6);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(26158, 366, true);
                WriteLiteral(@"
                                </div>

                            </div>

                        </div>
                    </div>  <!--form  content end-->
                </div>

            </div><!-- /.modal-content -->
        </div><!-- /.modal-dialog -->
    </div><!-- /.modal -->
    <!-- delete_range main node popup model box  Content-->
");
                EndContext();
                BeginContext(26550, 190, true);
                WriteLiteral("    <script>\r\n        function showscaniprange() {\r\n            $(\"#overlay\").show();\r\n            $(\"#overlay\").fadeIn(300);\r\n        $.ajax({\r\n            type: \"POST\",\r\n            url: \'");
                EndContext();
                BeginContext(26741, 49, false);
#line 496 "C:\Users\USER\Desktop\OwnYITCSAT_V3\Views\csat_settings_page\setting_scan_ip_range.cshtml"
             Write(Url.Content("~/csat_settings_page/GetScanIPdata"));

#line default
#line hidden
                EndContext();
                BeginContext(26790, 3275, true);
                WriteLiteral(@"',
            success: function (data) {
                var dataclear = document.getElementById('divscanip_div');
                dataclear.innerHTML = '&nbsp;';
                $('#divscanip_div').append(""<table id='divscanip' class='table table-striped table-bordered' width='100%'></table>"");
                dtable = document.getElementById('divscanip');
                var data1 = [];
                for (var i = 0; i < data.scanipdetail.length; i++) {
                    //debugger;
                    var setting_div = ""<i class='glyphicon glyphicon-refresh manage_icon' type='button' title='Setting' onclick=rescanip('"" + data.scanipdetail[i].ip_range + ""','"" + data.scanipdetail[i].subnet_mask + ""')></i>"";
                    var details_div = ""<i class='glyphicon glyphicon-list-alt manage_icon' type='button' data-toggle='modal'  onclick=ShowScanIPPCDetail('"" + data.scanipdetail[i].ip_range + ""') title='Show Detail'></i>"";
                    var delete_div = ""<i class=' glyphicon glyphicon-t");
                WriteLiteral(@"rash manage_icon ' type='button' data-toggle='modal'  title='Delete' onclick=deleteiprange('"" + data.scanipdetail[i].ip_range + ""','"" + data.scanipdetail[i].subnet_mask + ""')></i>"";
                    data1.push([data.scanipdetail[i].ip_range, data.scanipdetail[i].subnet_mask, data.scanipdetail[i].device_timestamp, status, setting_div, details_div, delete_div]);
                }
                var dtable = $(""#divscanip"").DataTable({
                    data: data1, scrollX: !0, searching: !1, dom: ""<'top'lB>rt<'bottom'ip><'clear'>"", buttons: [""colvis""],
                    columns: [{ title: ""IP Range"" }, { title: ""Subnet Mask"" }, { title: ""Last Scan Time"" }, { title: ""Status"" }, { title: ""Rescan"", orderable: false, className: 'dt-center', width: '10px' }, { title: ""Show Detail"", orderable: false, className: 'dt-center', width: '100px' }, { title: ""Delete"", orderable: false,className: 'dt-center', width: '10px' }]
                });
                $("".table"").css({ ""width"": ""100%"" });
          ");
                WriteLiteral(@"      $("".dataTables_scrollHeadInner "").css({ ""width"": ""100%"" });
            }
          
        }).done(function () {
            setTimeout(function () {
                $(""#overlay"").fadeOut(300);
            }, 500);
        });
    }
     //$('#btnsavescanip').on('click', function () {
        function scanip() {
            $(""#overlay"").show();
            $(""#overlay"").fadeIn(300);
      // debugger;
        var variprange = document.ip_scan_form.iprange.value;
        var ip = variprange.split(""."");
        if (ip.length != 4) {
            alert(""Please provide Proper IP Range !"");
            setTimeout(function () {
                $(""#overlay"").fadeOut(300);
            }, 500);
            return false;
        }
        //Check Numbers
        for (var c = 0; c < 4; c++) {
            //Perform Test
            if (!(1 / ip[c] > 0) || ip[c] > 255 || isNaN(parseFloat(ip[c])) || !isFinite(ip[c]) || ip[c].indexOf("" "") !== -1) {
                alert(""Please provide Pro");
                WriteLiteral("per IP Range !\");\r\n                return false;\r\n            }\r\n        }\r\n         var varsubnet = document.ip_scan_form.subnet.value;\r\n         $.ajax({\r\n            type: \"POST\",\r\n             url: \'");
                EndContext();
                BeginContext(30066, 58, false);
#line 549 "C:\Users\USER\Desktop\OwnYITCSAT_V3\Views\csat_settings_page\setting_scan_ip_range.cshtml"
              Write(Url.Content("~/csat_settings_page/AddScanIPdata?iprange="));

#line default
#line hidden
                EndContext();
                BeginContext(30124, 390, true);
                WriteLiteral(@"' + variprange + '&netmask=' + varsubnet,
             success: function (data) {
              // debugger;
                alert(data);
                cleardata();
                showscaniprange();
            }
         });
        }
        function rescanip(variprange, varsubnet) {
           // debugger;
         $.ajax({
            type: ""POST"",
             url: '");
                EndContext();
                BeginContext(30515, 57, false);
#line 562 "C:\Users\USER\Desktop\OwnYITCSAT_V3\Views\csat_settings_page\setting_scan_ip_range.cshtml"
              Write(Url.Content("~/csat_settings_page/ReScanIPdata?iprange="));

#line default
#line hidden
                EndContext();
                BeginContext(30572, 409, true);
                WriteLiteral(@"' + variprange + '&netmask=' + varsubnet,
             success: function (data) {
              // debugger;
                alert(data);                
                showscaniprange();
            }
    });
    }
    // Show IP Detail
    var iprange1;
    function ShowScanIPPCDetail(iprange) {
       // debugger;
       
        $('#show_detail_popup').modal('show');
        var url1 = '");
                EndContext();
                BeginContext(30982, 62, false);
#line 576 "C:\Users\USER\Desktop\OwnYITCSAT_V3\Views\csat_settings_page\setting_scan_ip_range.cshtml"
               Write(Url.Content("~/csat_settings_page/GetScanIPPCDetail?iprange="));

#line default
#line hidden
                EndContext();
                BeginContext(31044, 2734, true);
                WriteLiteral(@"' + iprange;
        $.ajax({
            type: ""POST"",
            url: url1,
            success: function (data) {
               // debugger;
                var dataclear = document.getElementById('divscanippcdetail_div');
                dataclear.innerHTML = '&nbsp;';
                $('#divscanippcdetail_div').append(""<table id='divscanippcdetail' class='table table-striped table-bordered' width='100%'></table>"");
                dtable = document.getElementById('divscanippcdetail');
                var data1 = [];               
                    for (var i = 0; i < data.scanippcdetail.length; i++) {
                        //debugger;
                        var status = """";
                        if (data.scanippcdetail[i].status == 'up') {
                            status = ""<span class='badge badge-success'>"" + data.scanippcdetail[i].status+""</span>"";
                        } else {
                            status = ""<span class='badge badge-danger'>"" + data.scanippcdeta");
                WriteLiteral(@"il[i].status + ""</span>"";
                        }                       
                        data1.push([data.scanippcdetail[i].ip, data.scanippcdetail[i].ip, data.scanippcdetail[i].mac, data.scanippcdetail[i].allocated_deviceid, status]);
                    }
                    var dtable = $(""#divscanippcdetail"").DataTable({
                        data: data1, scrollX: !0, searching: !1, /*dom: ""<'top'lB>rt<'bottom'ip><'clear'>"",*/
                        columns: [{ title: ""System Name"" }, { title: ""IP Address"" }, { title: ""MAC Address"" }, { title: ""Manufacture"" }, { title: ""Status"" }],
                });
                $("".table"").css({ ""width"": ""100%"" });
                $("".dataTables_scrollHeadInner "").css({ ""width"": ""100%"" });                                  
            }
       
        });
    }
    </script>


    <script>
    function cleardata() {
        document.getElementById(""startip"").value = '';
        document.getElementById(""endip"").value = '';
        d");
                WriteLiteral(@"ocument.getElementById(""localport"").value = '';
        document.getElementById(""remoteport"").value = '';
        document.getElementById('authorize').checked = true;
        document.getElementById('unauthorize_category').style.display = 'none';
        document.ip_scan_form.iprange.value = '';
        document.ip_scan_form.subnet.value = '';
    }
        $('#btnautorizeip').on('click', function () {
            $(""#overlay_modal"").show();
            $(""#overlay_modal"").fadeIn(300); 
        $('#authorized_ip_popup').modal('show');
        showauthorizeip();
    });
    function showauthorizeip() {
        $.ajax({
            type: ""POST"",
            url: '");
                EndContext();
                BeginContext(33779, 55, false);
#line 630 "C:\Users\USER\Desktop\OwnYITCSAT_V3\Views\csat_settings_page\setting_scan_ip_range.cshtml"
             Write(Url.Content("~/csat_settings_page/GetAuthorizedIPdata"));

#line default
#line hidden
                EndContext();
                BeginContext(33834, 2602, true);
                WriteLiteral(@"',
            success: function (data) {
                var dataclear = document.getElementById('divauthip_div');
                dataclear.innerHTML = '&nbsp;';
                $('#divauthip_div').append(""<table id='divauthip' class='table table-striped table-bordered' width='100%'></table>"");
                dtable = document.getElementById('divauthip');
                var data1 = [];
                for (var i = 0; i < data.authorizedipdetail.length; i++) {
                    //debugger;
                    var edit_div = ""<i class=' glyphicon glyphicon-pencil manage_icon ' type='button' data-toggle='modal' onclick='editauthipdata("" + data.authorizedipdetail[i].ip_id +"")' title='Edit'></i>"";                   
                    var delete_div = ""<i class=' glyphicon glyphicon-trash manage_icon ' type='button' data-toggle='modal' title='Delete' onclick='deleteauthipdata("" + data.authorizedipdetail[i].ip_id +"")'></i>"";
                    data1.push([data.authorizedipdetail[i].type, data.aut");
                WriteLiteral(@"horizedipdetail[i].start_ip, data.authorizedipdetail[i].end_ip, data.authorizedipdetail[i].local_port, data.authorizedipdetail[i].remote_port, edit_div, delete_div]);
                }
                var dtable = $(""#divauthip"").DataTable({
                    data: data1, scrollX: !0, searching: !1, dom: ""<'top'lB>rt<'bottom'ip><'clear'>"", buttons: [],
                    columns: [{ title: ""Category"" },{ title: ""Start IP Address"" }, { title: ""End IP Address"" }, { title: ""Local Port"" }, { title: ""Remote Port"" }, { title: ""Edit"", orderable: false, className: 'dt-center', width: '10px' }, { title: ""Delete"", orderable: false, className: 'dt-center', width: '10px' }]
                });
                $("".table"").css({ ""width"": ""100%"" });
                $("".dataTables_scrollHeadInner "").css({ ""width"": ""100%"" });
              
            }
        }).done(function () {
            setTimeout(function () {
                $(""#overlay_modal"").fadeOut(300);
            }, 500);
        });
    } ");
                WriteLiteral(@"   

    var IPauthorizevalue = """";
    $('input[type=radio]').change(function () {
        IPauthorizevalue = this.value;

    });
    $('#btnsaveiprange').on('click', function () {
      //  debugger;
        var varstartip = document.getElementById(""startip"").value;
        var varendip = document.getElementById(""endip"").value;
        var varlocalport = document.getElementById(""localport"").value;
        var varremoteport = document.getElementById(""remoteport"").value;
         $.ajax({
            type: ""POST"",
            url: '");
                EndContext();
                BeginContext(36437, 61, false);
#line 671 "C:\Users\USER\Desktop\OwnYITCSAT_V3\Views\csat_settings_page\setting_scan_ip_range.cshtml"
             Write(Url.Content("~/csat_settings_page/AddAuthorizedIPdata?type="));

#line default
#line hidden
                EndContext();
                BeginContext(36498, 649, true);
                WriteLiteral(@"' + IPauthorizevalue + '&start_ip=' + varstartip + '&end_ip=' + varendip + '&remoteport=' + varremoteport + '&localport=' + varlocalport,
            success: function (data) {
                alert(data);
                $('#add_ip_range').modal('hide');
                $('#authorized_ip_popup').modal('show');
                cleardata();
                showauthorizeip();
            }
    });
    });
    var authipid = """";
    function deleteauthipdata(id) {
        //debugger;
        authipid = id;
        $('#delete_authorized_ip').modal('show');
    }

     $('#btndelete').on('click',function(){
         var url1 = '");
                EndContext();
                BeginContext(37148, 68, false);
#line 689 "C:\Users\USER\Desktop\OwnYITCSAT_V3\Views\csat_settings_page\setting_scan_ip_range.cshtml"
                Write(Url.Content("~/csat_settings_page/deleteAuthorizedIPdata?authipid="));

#line default
#line hidden
                EndContext();
                BeginContext(37216, 508, true);
                WriteLiteral(@"' + authipid;
	 $.ajax({
            type: ""POST"",
            url:url1,
            success: function (result) {
			alert(result);
                $('#delete_authorized_ip').modal('hide');
                showauthorizeip();
			}
			});

	});
	$('#btndeletecancle').on('click',function(){
        $('#delete_authorized_ip').modal('hide');
	});
    // Edit IP Data
    var autheditid = """";
    function editauthipdata(id) {
       // debugger;
        autheditid = id;
        var url1 = '");
                EndContext();
                BeginContext(37725, 67, false);
#line 709 "C:\Users\USER\Desktop\OwnYITCSAT_V3\Views\csat_settings_page\setting_scan_ip_range.cshtml"
               Write(Url.Content("~/csat_settings_page/GetAuthorizedIPdetail?authipid="));

#line default
#line hidden
                EndContext();
                BeginContext(37792, 2038, true);
                WriteLiteral(@"' + autheditid;
        $.ajax({
            type: ""POST"",
            url: url1,
            success: function (data) {
              //  debugger;
                document.getElementById(""startip1"").value = data.authipdata[0].start_ip;
                document.getElementById(""endip1"").value = data.authipdata[0].end_ip;
                document.getElementById(""localport1"").value = data.authipdata[0].local_port;
                document.getElementById(""remoteport1"").value = data.authipdata[0].remote_port;
                if (data.authipdata[0].type == '0') {
                    document.getElementById('authorize1').checked = true;
                    document.getElementById('authorize_category1').style.display = 'block';
                    document.getElementById('unauthorize_category1').style.display = 'none';
                }
                else
                {
                    document.getElementById('unauthorize1').checked = true;
                     document.getElementById('una");
                WriteLiteral(@"uthorize_category1').style.display = 'block';
                    document.getElementById('authorize_category1').style.display = 'none';
                }
                $('#edit_ip_range').modal('show');

            }
        });
    }
    $('#ipEditcancel').on('click', function () {
        $('#edit_ip_range').modal('hide');
    });
    $('#ipupdate').on('click', function () {
        var startip = """";
        var endip = """";
        var localport = """";
        var remoteport = """";
        var type = """";
        var startip = document.getElementById(""startip1"").value;
        var endip = document.getElementById(""endip1"").value;
        var localport = document.getElementById(""localport1"").value;
        var remoteport = document.getElementById(""remoteport1"").value;
        if (document.getElementById('authorize1').checked) {
            type = ""0"";
            localport = 0;
            remoteport = 0;
        }
        else
            type = ""1"";
        var url = '");
                EndContext();
                BeginContext(39831, 66, false);
#line 755 "C:\Users\USER\Desktop\OwnYITCSAT_V3\Views\csat_settings_page\setting_scan_ip_range.cshtml"
              Write(Url.Content("~/csat_settings_page/UpdateAuthorizedIPdetail?ipid="));

#line default
#line hidden
                EndContext();
                BeginContext(39897, 714, true);
                WriteLiteral(@"' + autheditid + '&startip=' + startip + '&endip=' + endip + '&localport=' + localport + '&remoteport=' + remoteport + '&type=' + type;
        $.ajax({

            type: ""POST"",
            url: url,
            success: function (result) {
			alert(result);
                $('#edit_ip_range').modal('hide');
                showauthorizeip();
			}

			});
    });

    // Delete Scan IP Range
    var scanip1 = """";
    var subnetmask1 = """";
    function deleteiprange(scanip,subnetmask) {
      //  debugger;
        scanip1 = scanip;
        subnetmask1 = subnetmask;
        $('#delete_range').modal('show');
    }
     $('#btnscandelete').on('click',function(){
         var url1 = '");
                EndContext();
                BeginContext(40612, 57, false);
#line 779 "C:\Users\USER\Desktop\OwnYITCSAT_V3\Views\csat_settings_page\setting_scan_ip_range.cshtml"
                Write(Url.Content("~/csat_settings_page/DeleteScanIP?iprange="));

#line default
#line hidden
                EndContext();
                BeginContext(40669, 10047, true);
                WriteLiteral(@"' + scanip1 + '&subnet=' + subnetmask1;
        $.ajax({
        type: ""POST"",
        url: url1,
        success: function (result) {
            alert(result);
            $('#delete_range').modal('hide');
            showscaniprange();
            subnetmask = """";
            scanip = """";
		 }
		 });

	});


    </script>
    <script>
        (function (g) {
            ""function"" === typeof define && define.amd ? define([""jquery""], g) : g(window.jQuery || window.Zepto)
        })(function (g) {
            var y = function (a, f, d) {
                var k = this,
                    x;
                a = g(a);
                f = ""function"" === typeof f ? f(a.val(), void 0, a, d) : f;
                k.init = function () {
                    d = d || {};
                    k.byPassKeys = [9, 16, 17, 18, 36, 37, 38, 39, 40, 91];
                    k.translation = {
                        0: {
                            pattern: /\d/
                        },
       ");
                WriteLiteral(@"                 9: {
                            pattern: /\d/,
                            optional: !0
                        },
                        ""#"": {
                            pattern: /\d/,
                            recursive: !0
                        },
                        A: {
                            pattern: /[a-zA-Z0-9]/
                        },
                        S: {
                            pattern: /[a-zA-Z]/
                        }
                    };
                    k.translation = g.extend({}, k.translation, d.translation);
                    k = g.extend(!0, {}, k, d);
                    a.each(function () {
                        !1 !==
                            d.maxlength && a.attr(""maxlength"", f.length);
                        d.placeholder && a.attr(""placeholder"", d.placeholder);
                        a.attr(""autocomplete"", ""off"");
                        c.destroyEvents();
                        c.events();
    ");
                WriteLiteral(@"                    var b = c.getCaret();
                        c.val(c.getMasked());
                        c.setCaret(b + c.getMaskCharactersBeforeCount(b, !0))
                    })
                };
                var c = {
                    getCaret: function () {
                        var b;
                        b = 0;
                        var e = a.get(0),
                            c = document.selection,
                            e = e.selectionStart;
                        if (c && !~navigator.appVersion.indexOf(""MSIE 10"")) b = c.createRange(), b.moveStart(""character"", a.is(""input"") ? -a.val().length : -a.text().length), b = b.text.length;
                        else if (e ||
                            ""0"" === e) b = e;
                        return b
                    },
                    setCaret: function (b) {
                        if (a.is("":focus"")) {
                            var e;
                            e = a.get(0);
                 ");
                WriteLiteral(@"           e.setSelectionRange ? e.setSelectionRange(b, b) : e.createTextRange && (e = e.createTextRange(), e.collapse(!0), e.moveEnd(""character"", b), e.moveStart(""character"", b), e.select())
                        }
                    },
                    events: function () {
                        a.on(""keydown.mask"", function () {
                            x = c.val()
                        });
                        a.on(""keyup.mask"", c.behaviour);
                        a.on(""paste.mask drop.mask"", function () {
                            setTimeout(function () {
                                a.keydown().keyup()
                            }, 100)
                        });
                        a.on(""change.mask"", function () {
                            a.data(""changeCalled"", !0)
                        });
                        a.on(""blur.mask"",
                            function (b) {
                                b = g(b.target);
                           ");
                WriteLiteral(@"     b.prop(""defaultValue"") !== b.val() && (b.prop(""defaultValue"", b.val()), b.data(""changeCalled"") || b.trigger(""change""));
                                b.data(""changeCalled"", !1)
                            });
                        a.on(""focusout.mask"", function () {
                            d.clearIfNotMatch && c.val().length < f.length && c.val("""")
                        })
                    },
                    destroyEvents: function () {
                        a.off(""keydown.mask keyup.mask paste.mask drop.mask change.mask blur.mask focusout.mask"").removeData(""changeCalled"")
                    },
                    val: function (b) {
                        var e = a.is(""input"");
                        return 0 < arguments.length ? e ? a.val(b) : a.text(b) : e ? a.val() : a.text()
                    },
                    getMaskCharactersBeforeCount: function (b,
                        e) {
                        for (var a = 0, c = 0, d = f.length; c < d && c < b");
                WriteLiteral(@"; c++) k.translation[f.charAt(c)] || (b = e ? b + 1 : b, a++);
                        return a
                    },
                    determineCaretPos: function (b, a, d, h) {
                        return k.translation[f.charAt(Math.min(b - 1, f.length - 1))] ? Math.min(b + d - a - h, d) : c.determineCaretPos(b + 1, a, d, h)
                    },
                    behaviour: function (b) {
                        b = b || window.event;
                        var a = b.keyCode || b.which;
                        if (-1 === g.inArray(a, k.byPassKeys)) {
                            var d = c.getCaret(),
                                f = c.val(),
                                n = f.length,
                                l = d < n,
                                p = c.getMasked(),
                                m = p.length,
                                q = c.getMaskCharactersBeforeCount(m - 1) - c.getMaskCharactersBeforeCount(n - 1);
                            p !== f && c.");
                WriteLiteral(@"val(p);
                            !l || 65 === a && b.ctrlKey || (8 !== a && 46 !== a && (d = c.determineCaretPos(d, n, m, q)), c.setCaret(d));
                            return c.callbacks(b)
                        }
                    },
                    getMasked: function (b) {
                        var a = [],
                            g = c.val(),
                            h = 0,
                            n = f.length,
                            l = 0,
                            p = g.length,
                            m = 1,
                            q = ""push"",
                            s = -1,
                            r, u;
                        d.reverse ? (q = ""unshift"", m = -1, r = 0, h = n - 1, l = p - 1, u = function () {
                            return -1 < h && -1 < l
                        }) : (r = n - 1, u = function () {
                            return h < n && l < p
                        });
                        for (; u();) {
");
                WriteLiteral(@"                            var v = f.charAt(h),
                                w = g.charAt(l),
                                t = k.translation[v];
                            if (t) w.match(t.pattern) ? (a[q](w), t.recursive && (-1 === s ? s = h : h === r && (h = s - m), r === s && (h -= m)), h += m) : t.optional && (h += m, l -= m), l +=
                                m;
                            else {
                                if (!b) a[q](v);
                                w === v && (l += m);
                                h += m
                            }
                        }
                        b = f.charAt(r);
                        n !== p + 1 || k.translation[b] || a.push(b);
                        return a.join("""")
                    },
                    callbacks: function (b) {
                        var e = c.val(),
                            g = c.val() !== x;
                        if (!0 === g && ""function"" === typeof d.onChange) d.onChang");
                WriteLiteral(@"e(e, b, a, d);
                        if (!0 === g && ""function"" === typeof d.onKeyPress) d.onKeyPress(e, b, a, d);
                        if (""function"" === typeof d.onComplete && e.length === f.length) d.onComplete(e, b, a, d)
                    }
                };
                k.remove = function () {
                    var a = c.getCaret(),
                        d = c.getMaskCharactersBeforeCount(a);
                    c.destroyEvents();
                    c.val(k.getCleanVal()).removeAttr(""maxlength"");
                    c.setCaret(a - d)
                };
                k.getCleanVal = function () {
                    return c.getMasked(!0)
                };
                k.init()
            };
            g.fn.mask = function (a, f) {
                //this.unmask();
                return this.each(function () {
                    g(this).data(""mask"", new y(this, a, f))
                })
            };
            //g.fn.unmask = function () {
            ");
                WriteLiteral(@"//    return this.each(function () {
            //        try {
            //            g(this).data(""mask"").remove()
            //        } catch (a) { }
            //    })
            //};
            g.fn.cleanVal = function () {
                return g(this).data(""mask"").getCleanVal()
            };
            g(""*[data-mask]"").each(function () {
                var a = g(this),
                    f = {};
                ""true"" === a.attr(""data-mask-reverse"") && (f.reverse = !0);
                ""false"" === a.attr(""data-mask-maxlength"") && (f.maxlength = !1);
                ""true"" === a.attr(""data-mask-clearifnotmatch"") && (f.clearIfNotMatch = !0);
                a.mask(a.attr(""data-mask""), f)
            })
        });

        $('.ip_address').mask('099.099.099.099');
    </script>
");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_7);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
