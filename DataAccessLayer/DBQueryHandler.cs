using OwnYITCSAT.Models;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Web;

namespace OwnYITCSAT.DataAccessLayer
{
    public class DBQueryHandler
    {
        private DatabaseHandler database = null;
        private int DBServer_Type = 0;
        // private int DBServer_Port = 1433;
        OwnYITConstant.DatabaseTypes dbtype;
        private DataTable data_table = new DataTable();
        OwnYITCommon objcommon = new OwnYITCommon();

        public DBQueryHandler()
        {
            // Get DB Configration
            loadDBSettings();

            this.database = new DatabaseHandler(OwnYITConstant.db_settings);
            this.DBServer_Type = this.database.DB_SERVER_TYPE;
            switch (this.database.DB_SERVER_TYPE)
            {
                case 0:
                    dbtype = OwnYITConstant.DatabaseTypes.MSSQL_SERVER;
                    break;
                case 1:
                    dbtype = OwnYITConstant.DatabaseTypes.MYSQL_SERVER;
                    break;
            }

            if (OwnYITConstant.configuration == null)
            {
                loadProperty();
            }
        }

        public DBQueryHandler(String strFileName)
        {
            // Get DB Configration

            loadDBSettings(strFileName);

            this.database = new DatabaseHandler(OwnYITConstant.db_settings);
            this.DBServer_Type = this.database.DB_SERVER_TYPE;

            if (OwnYITConstant.configuration == null)
            {
                loadProperty();
            }
            //Get Header Menu Item
            //loadMenuItem();
        }

        public void loadDBSettings()
        {
            //  loadDBSettings(OwnYITConstant.DB_SETTINGS_FILENAME);
            //For Linux
            loadDBSettings(OwnYITConstant.DB_SETTINGS_FILENAME);
        }

        public void loadDBSettings(String strFileName)
        {
            if (OwnYITConstant.db_settings == null)
            {
                OwnYITCommon.loadDBSettings(strFileName);
            }

        }

        //public void loadMenuItem()
        //{
        //    if (OwnYITConstant.DT_MAIN_MENU == null)
        //    {
        //        OwnYITConstant.DT_MAIN_MENU = GetMainMenu();
        //    }
        //    if (OwnYITConstant.DT_MAIN_MENU.Rows.Count == 0)
        //    {
        //        OwnYITConstant.DT_MAIN_MENU = GetMainMenu();
        //    }
        //}
        public void loadProperty()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.Append("select sectionname,propertyname,propertyvalue from configuration_setting order by sectionname asc");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.Append("select sectionname,propertyname,propertyvalue from configuration_setting order by sectionname asc");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "loadProperty Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
                OwnYITConstant.configuration = new Configuration(data_table);
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "loadProperty Exception : " + ex.Message.ToString());
            }
            strQuery = null;
        }
        public int Check_useraccess_gui(string ipaddress)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select COUNT(*) as cnt from UserAccessGUI where ipaddress='{0}'", ipaddress);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select COUNT(*) as cnt from UserAccessGUI where ipaddress='{0}'", ipaddress);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Check_expiryGui Query : " + strQuery.ToString());
                result = this.database.getIntValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Check_expiryGui Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int Check_expiryGui()
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select count(*) from LicIssue where ProductID=1 and componentID=2 and (Valid=1 or EndDate >= GETDATE())");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select count(*) from LicIssue where ProductID=1 and componentID=2 and (Valid=1 or EndDate >= Now())");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Check_expiryGui Query : " + strQuery.ToString());
                result = this.database.getIntValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Check_expiryGui Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public bool doUserLogin(string username, string password)
        {
            bool bFlag = false;
            try
            {
                StringBuilder strQueryBuilder = new StringBuilder();
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQueryBuilder.AppendFormat("select count(*) from user_master where user_name ='{0}' and user_password='{1}'", username, password);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat("select count(*) from user_master where user_name ='{0}' and user_password='{1}'", username, password);
                        break;
                }
                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "doUserLogin Query : " + strQuery);
                int result = this.database.getIntValue(strQuery);

                if (result > 0)
                {
                    bFlag = true;
                }
                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "doUserLogin Exception : " + ex.Message.ToString());
            }
            return bFlag;
        }

        #region Menu Management
        public DataTable GetMainMenu()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select menu_id,menu_name,menu_url from menu_master where menu_parent_id=0 and active=1 order by menu_priority asc");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select menu_id,menu_name,menu_url from menu_master where menu_parent_id=0 and active=1 order by menu_priority asc");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "GetMainMenu Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
                //if (this.DBServer_Type == OwnYITConstant.MSSQL_SERVER)
                //{
                //    strQuery.Append("select menu_id,menu_name,menu_url from menu_master where menu_parent_id=0 and active=1 order by menu_priority asc");

                //}
                //else if (DBServer_Type == OwnYITConstant.MYSQL_SERVER)
                //{
                //    strQuery.Append("select menu_id,menu_name,menu_url from menu_master where menu_parent_id=0 and active=1 order by menu_priority asc");
                //}
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "GetMainMenu Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        public DataTable GetMainMenu(string menuid)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select menu_id,menu_name,menu_url from menu_master where menu_parent_id=0 and active=1 and menu_id in (" + menuid + ") order by menu_priority asc");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select menu_id,menu_name,menu_url from menu_master where menu_parent_id=0 and active=1 and menu_id in (" + menuid + ") order by menu_priority asc");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "GetMainMenu Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "GetMainMenu Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_Dashbord_chats(string group_id)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select mm.menu_id,case t.menu_id when isnull(t.menu_id, 0) then 1 else 0 end as menu_active from menu_master mm left outer join ");
                        strQuery.AppendFormat(" (select mms.menu_id from menu_master mms, group_rights_master grm where mms.menu_id = grm.menu_id and grm.group_id = {0}) t on mm.menu_id = t.menu_id where mm.active=1 order by mm.menu_id ", group_id);
                        //strQuery.Append("select menu_id from menu_master where menu_parent_id=1 and active=1 and menu_id in (" + menuid + ") order by menu_priority asc");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select mm.menu_id,case t.menu_id when ifnull(t.menu_id, 0) then 1 else 0 end as menu_active from menu_master mm left outer join ");
                        strQuery.AppendFormat(" (select mms.menu_id from menu_master mms, group_rights_master grm where mms.menu_id = grm.menu_id and grm.group_id = {0}) t on mm.menu_id = t.menu_id where mm.active=1 order by mm.menu_id ", group_id);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Dashbord_chats Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Dashbord_chats Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_SubMenu(int id)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select menu_id,menu_name,menu_url from menu_master where menu_parent_id={0} and active=1 order by menu_priority asc", id);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select menu_id,menu_name,menu_url from menu_master where menu_parent_id={0} and active=1 order by menu_priority asc", id);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_SubMenu Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
                //if (this.DBServer_Type == OwnYITConstant.MSSQL_SERVER)
                //{
                //    strQuery.AppendFormat("select menu_name,menu_url from menu_master where menu_parent_id={0} and active=1 order by menu_priority asc", id);

                //}
                //else if (DBServer_Type == OwnYITConstant.MYSQL_SERVER)
                //{
                //    strQuery.Append("select menu_name,menu_url from menu_master where menu_parent_id=2 and active=1 order by menu_priority asc");
                //}
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_SubMenu Exception : " + ex.Message.ToString());
            }
            //data_table = this.database.getDataTable(strQuery.ToString());
            //return data_table;
            //loadDBSettings(strFileName);
            //this.database = new DatabaseHandler(OwnYITConstant.db_settings);
            return data_table;
        }
        public DataTable Get_SubToSubMenu(int menuid)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                if (this.DBServer_Type == OwnYITConstant.MSSQL_SERVER)
                {
                    strQuery.Append("select menu_name from menu_master where menu_parent_id=" + menuid + " and active=1 order by menu_priority asc");
                }
                else if (DBServer_Type == OwnYITConstant.MYSQL_SERVER)
                {
                    strQuery.Append("select menu_name from menu_master where menu_parent_id=" + menuid + " and active=1 order by menu_priority asc");
                }
                objcommon.WriteLog("DBQueryHandler", "Get_SubToSubMenu Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_SubToSubMenu Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        #endregion

        #region Asset Management
        // Top Alert
        public DataTable Get_TopAlert()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        //strQuery.AppendFormat("select top 10 isnull(dm.virtual_name,dm.device_name) as 'PC Name',case category_type  when 11 then 'Hardware' when 12 then 'Software' ");
                        //strQuery.AppendFormat(" when 15 then 'User' when 18 then 'Process' when 19 then 'Service' when 20 then 'Share' end as Type,case category_subtype when 101 then 'IP Address' when 102 then 'Host' when 103 then 'MAC' when 104 then 'Firewall' when 105 then 'N/W Printer' when 106 then 'Show hidden file/folder' ");
                        //strQuery.AppendFormat(" when 107 then 'Simple file sharing' when 108 then 'Compliance' when 111 then 'CPU' 	when 112 then 'RAM' when 121 then 'Removable' when 122 then 'Disk' when 123 then 'ROM' when 131 then 'System32' when 132 then 'Control Panel' ");
                        //strQuery.AppendFormat(" when 133 then 'Registry' when 134 then 'Login' when 135 then 'Service' when 136 then 'Guest' when 137 then 'LAN' when 10 then 'Remote' when 11 then 'Hardware' when 15 then 'User' when 20 then 'Share' when 18 then 'Process' ");
                        //strQuery.AppendFormat(" when 110 then 'Event' when 0 then '-' end as SubType,case category_status when -2 then 'Failed' when -1 then 'Removed' when 0 then 'Down' when 1 then 'Added' when 2 then 'Running' when 3 then 'Warning' ");
                        //strQuery.AppendFormat(" when 4 then 'Error' when 5 then 'Violation' when 6 then 'Time Difference' when 7 then 'Enabled' when 8 then 'Disabled' when 9 then 'Implement' when 10 then 'Access' when 11 then 'Attempt' when 12 then 'Changed' when 13 then 'Detect' ");
                        //strQuery.AppendFormat(" when 14 then 'Activation Code Already Exists' when 15 then 'Invalid Activation Code' when 16 then 'Client Limit Exceeded' when 17 then 'Updated' when 99 then 'General' end as Status,NA.details as 'Message',convert(varchar,device_timestamp,110)+' ' + convert(varchar,device_timestamp,108)  as 'Time'  ");
                        //strQuery.AppendFormat(" from node_audit_trail NA,device_master DM where NA.device_id = DM.device_id and category_type in(11,12,15,18,19,20) order by 5 desc ");

                        strQuery.AppendFormat(" select top(10) (convert(varchar,date_time,105) + ' ' + convert(varchar,date_time,108)) as date_time,(convert(varchar,servertime,105) + ' ' + convert(varchar,servertime,108)) as server_time,systemname,ipaddress,category,status,message from ( ");
                        strQuery.AppendFormat(" select top(10) na.device_timestamp as 'date_time',na.servertime,isnull(dm.virtual_name,dm.device_name) as 'systemname',dm.ip as 'ipaddress',case category_type  when 11 then 'Hardware' when 12 then 'Software' ");
                        strQuery.AppendFormat(" when 15 then 'User' when 18 then 'Process' when 19 then 'Service' when 20 then 'Share' end as 'category',case category_status when -2 then 'Failed' when -1 then 'Removed' when 0 then 'Down' when 1 then 'Added' when 2 then 'Running' when 3 then 'Warning' ");
                        strQuery.AppendFormat(" when 4 then 'Error' when 5 then 'Violation' when 6 then 'Time Difference' when 7 then 'Enabled' when 8 then 'Disabled' when 9 then 'Implement' when 10 then 'Access' when 11 then 'Attempt' when 12 then 'Changed' when 13 then 'Detect' ");
                        strQuery.AppendFormat(" when 14 then 'Activation Code Already Exists' when 15 then 'Invalid Activation Code' when 16 then 'Client Limit Exceeded' when 17 then 'Updated' when 99 then 'General' end as status,na.details as 'message' ");
                        strQuery.AppendFormat(" from node_audit_trail na,device_master dm where na.device_id = dm.device_id and  dm.status not in (-1,90) and dm.active=1 and dm.device_mode in(1,2,3) and category_type in(11,12,15,18,19,20) and na.details not like 'pnp entity%' order by 1 desc) t ");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select cast(date_format(device_timestamp,'%d-%m-%Y %H:%i:%s') as char)  as 'date_time',cast(date_format(servertime,'%d-%m-%Y %H:%i:%s') as char)  as 'server_time',ifnull(dm.virtual_name,dm.device_name) as 'systemname',dm.ip as 'ipaddress',case category_type  when 11 then 'Hardware' when 12 then 'Software'  ");
                        strQuery.AppendFormat(" when 15 then 'User' when 18 then 'Process' when 19 then 'Service' when 20 then 'Share' end as 'category',case category_status when -2 then 'Failed' when -1 then 'Removed' when 0 then 'Down' when 1 then 'Added' when 2 then 'Running' when 3 then 'Warning'  ");
                        strQuery.AppendFormat(" when 4 then 'Error' when 5 then 'Violation' when 6 then 'Time Difference' when 7 then 'Enabled' when 8 then 'Disabled' when 9 then 'Implement' when 10 then 'Access' when 11 then 'Attempt' when 12 then 'Changed' when 13 then 'Detect'  ");
                        strQuery.AppendFormat(" when 14 then 'Activation Code Already Exists' when 15 then 'Invalid Activation Code' when 16 then 'Client Limit Exceeded' when 17 then 'Updated' when 99 then 'General' end as status,na.details as 'message' ");
                        strQuery.AppendFormat(" from node_audit_trail na,device_master dm where na.device_id = dm.device_id and  dm.status not in (-1,90) and dm.active=1 and dm.device_mode in(1,2,3) and category_type in(11,12,15,18,19,20) and na.details not like 'pnp entity%' order by 1 desc limit 10 ");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_TopAlert Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_TopAlert Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        // OS Summary
        public DataTable Get_OS()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        //strQuery.Append("select os as osname, ostype as os_type, count(total) as counts from (select distinct nsd.device_id,nsd.parameter_value as os, s.ostype, s.total from ");
                        //strQuery.Append("(select nsd.device_id,nsd.parameter_value as ostype, count(nsd.device_id) as total from node_system_info_details nsd where type_id=8 and parameter_name='OSArchitecture' group by device_id,parameter_value) s left outer join ");
                        //strQuery.Append("node_system_info_details nsd on s.device_id = nsd.device_id where type_id=8 and parameter_name = 'Caption') t group by os, ostype order by 1 desc ");
                        strQuery.Append("select replace(replace(OS1,'{',''),'}','') as osname,os_type, count(*)  as counts from ( ");
                        strQuery.Append(" select os as osname, case when ostype= 'NA' then '' when ostype is null then '' else ostype end as os_type, case when len(os) < 5 then ");
                        strQuery.Append(" (select top 1 replace(replace(replace(json,'/`TYPE/`:/`9/`,/`SUBTYPE/`:/`1/`,/`PRODUCTNAME/`:',''),'/`',''),'','') from node_system_info  ");
                        strQuery.Append(" where data_type=9 and data_subtype=1 and device_id=T.device_id) else os end as OS1");
                        strQuery.Append(" from ( select distinct dl.device_id,dl.device_name,");
                        strQuery.Append(" isnull((select  top 1 parameter_value from node_system_info_details nsd where nsd.type_id=8 and nsd.parameter_name='caption' and nsd.device_id=dl.device_id),'') as os ,");
                        strQuery.Append(" (select top 1 parameter_value from node_system_info_details where type_id=8 and parameter_name='OSArchitecture' and device_id=dl.device_id) as OSType");
                        strQuery.Append(" from device_linkage dl  left outer join node_user_info nu 	on dl.device_id=nu.device_id  left outer join node_system_info_details nsd ");
                        strQuery.Append(" on dl.device_id=nsd.device_id  	where dl.status<>-1 and dl.device_active = 1 and dl.device_mode in (1,2,3) and dl.status not in (-1,90)");
                        strQuery.Append(" ) T ) T1 where len(OS1) > 0  group by OS1,os_type");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        //strQuery.AppendFormat("select os ,count(*) as 'Count' from node_general_info,device_master,ou_device ");
                        //strQuery.AppendFormat(" where device_master.device_id=node_general_info.device_id  ");
                        //strQuery.AppendFormat(" and device_master.device_id=ou_device.device_id and ou_device.status=1 ");
                        //strQuery.AppendFormat(" and device_master.status not in (-1,90) and device_master.active=1 ");
                        //strQuery.AppendFormat(" and device_master.device_mode in(1,2,3)  group by os order by count desc");

                        //strQuery.AppendFormat(" select os as 'OS Name',Type,count(os) as Counts from (select replace(os,'32-Bit','') as os,'32-bit' as Type from node_general_info,device_master,ou_device  ");
                        //strQuery.AppendFormat(" where device_master.device_id=node_general_info.device_id  and device_master.device_id=ou_device.device_id and ou_device.status=1 and device_master.status not in (-1,90) and device_master.active=1 ");
                        //strQuery.AppendFormat(" and device_master.device_mode in(1,2,3) and os like '%32-bit%' union all  select replace(os,'64-Bit','') as os ,'64-bit' as Type from node_general_info,device_master,ou_device ");
                        //strQuery.AppendFormat(" where device_master.device_id=node_general_info.device_id  and device_master.device_id=ou_device.device_id and ou_device.status=1  and device_master.status not in (-1,90) and device_master.active=1  ");
                        //strQuery.AppendFormat(" and device_master.device_mode in(1,2,3) and os like '%64-bit%' )T group by os,type order by count(os) desc ");

                        //strQuery.Append("select data1 as 'OS Name','' as Type,count(distinct nsi.device_id) as Counts ");
                        //strQuery.Append(" from node_system_info nsi , device_linkage dl");
                        //strQuery.Append(" where nsi.device_id=dl.device_id and dl.status <> -1 and data_type=8 and data_subtype=1 group by data1 order by 3 desc");

                        //strQuery.Append("select os as 'osname',data1 as type,total as counts  from ( select distinct ns.device_id,data1 as os,count(ns.device_id) as total from node_system_info ns  ");
                        //strQuery.Append(" inner join device_linkage dl on dl.device_id=ns.device_id where data_type=8 and data_subtype=1 group by ns.device_id,data1");
                        //strQuery.Append(" ) T,node_system_info  np where data_type=8 and data_subtype=2 and T.device_id=np.device_id order by 3 desc");

                        strQuery.Append("select os as osname, ostype as os_type, count(total) as counts from (select distinct nsd.device_id,nsd.parameter_value as os, s.ostype, s.total from ");
                        strQuery.Append("(select nsd.device_id,nsd.parameter_value as ostype, count(nsd.device_id) as total from node_system_info_details nsd where type_id=8 and parameter_name='OSArchitecture' group by device_id,parameter_value) s left outer join ");
                        strQuery.Append("node_system_info_details nsd on s.device_id = nsd.device_id where type_id=8 and parameter_name = 'Caption') t group by os, ostype order by 1 desc ");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_OS Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_OS Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_OS_summary_details(string OSName, string OSType)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        //strQuery.Append("select device_name,ip,device_mac,ou_longname from (select distinct nsd.device_id,nsd.parameter_value as os, s.ostype from  ");
                        //strQuery.Append("(select nsd.device_id,nsd.parameter_value as ostype from node_system_info_details nsd where type_id=8 and parameter_name='OSArchitecture'  ");
                        //strQuery.Append("group by device_id,parameter_value	) s left outer join node_system_info_details nsd on s.device_id = nsd.device_id  ");
                        //strQuery.Append(" where type_id=8 and parameter_name = 'Caption') T , device_linkage dl ");
                        //strQuery.AppendFormat(" where T.device_id=dl.device_id and T.os='{0}' and T.ostype='{1}' and dl.status not in (-1,90) and dl.device_mode in (1,2,3)", OSName, OSType);

                        strQuery.Append("select device_name,ip, a.mac_address as 'device_mac',ou_longname from (select distinct nsd.device_id,nsd.parameter_value as os, s.ostype from  ");
                        strQuery.Append("(select nsd.device_id,nsd.parameter_value as ostype from node_system_info_details nsd where type_id=8 and parameter_name='OSArchitecture'  ");
                        strQuery.Append("group by device_id,parameter_value	) s left outer join node_system_info_details nsd on s.device_id = nsd.device_id  ");
                        strQuery.Append(" where type_id=8 and parameter_name = 'Caption') T , device_linkage dl, node_user_info a ");
                        strQuery.AppendFormat(" where T.device_id=dl.device_id and t.device_id = a.device_id and T.os='{0}' and T.ostype='{1}' and dl.status not in (-1,90) and dl.device_mode in (1,2,3)", OSName, OSType);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:

                        //strQuery.Append("select device_name,ip,device_mac,ou_longname from (select distinct nsd.device_id,nsd.parameter_value as os, s.ostype from  ");
                        //strQuery.Append("(select nsd.device_id,nsd.parameter_value as ostype from node_system_info_details nsd where type_id=8 and parameter_name='OSArchitecture'  ");
                        //strQuery.Append("group by device_id,parameter_value	) s left outer join node_system_info_details nsd on s.device_id = nsd.device_id  ");
                        //strQuery.Append(" where type_id=8 and parameter_name = 'Caption') T , device_linkage dl ");
                        //strQuery.AppendFormat(" where T.device_id=dl.device_id and T.os='{0}' and T.ostype='{1}' and dl.status not in (-1,90) and dl.device_mode in (1,2,3)", OSName, OSType);

                        strQuery.Append("select device_name,ip, a.mac_address as 'device_mac',ou_longname from (select distinct nsd.device_id,nsd.parameter_value as os, s.ostype from  ");
                        strQuery.Append("(select nsd.device_id,nsd.parameter_value as ostype from node_system_info_details nsd where type_id=8 and parameter_name='OSArchitecture'  ");
                        strQuery.Append("group by device_id,parameter_value	) s left outer join node_system_info_details nsd on s.device_id = nsd.device_id  ");
                        strQuery.Append(" where type_id=8 and parameter_name = 'Caption') T , device_linkage dl, node_user_info a ");
                        strQuery.AppendFormat(" where T.device_id=dl.device_id and t.device_id = a.device_id and T.os='{0}' and T.ostype='{1}' and dl.status not in (-1,90) and dl.device_mode in (1,2,3)", OSName, OSType);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_OS_summary_details Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_OS_summary_details Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_OS_summary_details(string OSName)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        //strQuery.Append("select replace(replace(OS1,'{',''),'}','') as osname,os_type,device_name ,ip,device_mac,ou_longname from ( ");
                        //strQuery.Append(" select os as osname,device_name,ip,device_mac,ou_longname, case when ostype= 'NA' then '' when ostype is null then '' else ostype end as os_type, case when len(os) < 5 then ");
                        //strQuery.Append(" (select top 1 replace(replace(replace(json,'/`TYPE/`:/`9/`,/`SUBTYPE/`:/`1/`,/`PRODUCTNAME/`:',''),'/`',''),'','') from node_system_info  ");
                        //strQuery.Append(" where data_type=9 and data_subtype=1 and device_id=T.device_id) else os end as OS1");
                        //strQuery.Append(" from 	(select distinct dl.device_id,dl.device_name,dl.ip,dl.device_mac,dl.ou_longname,");
                        //strQuery.Append(" isnull((select  top 1 parameter_value from node_system_info_details nsd where nsd.type_id=8 and nsd.parameter_name='caption' and nsd.device_id=dl.device_id),'') as os ,");
                        //strQuery.Append(" (select top 1 parameter_value from node_system_info_details where type_id=8 and parameter_name='OSArchitecture' and device_id=dl.device_id) as OSType");
                        //strQuery.Append(" from device_linkage dl  left outer join node_user_info nu 	on dl.device_id=nu.device_id  left outer join node_system_info_details nsd ");
                        //strQuery.Append(" on dl.device_id=nsd.device_id  	where dl.status<>-1 and dl.device_active = 1 and dl.device_mode in (1,2,3) and dl.status not in (-1,90) ");
                        //strQuery.Append(" ) T ) T1 where len(OS1) > 0  and OS1 like '%{");
                        //strQuery.AppendFormat("{0}", OSName);
                        //strQuery.Append("}%'");

                        strQuery.Append("select replace(replace(OS1,'{',''),'}','') as osname,os_type,device_name ,ip,device_mac,ou_longname from ( ");
                        strQuery.Append(" select os as osname,device_name,ip,device_mac,ou_longname, case when ostype= 'NA' then '' when ostype is null then '' else ostype end as os_type, case when len(os) < 5 then ");
                        strQuery.Append(" (select top 1 replace(replace(replace(json,'/`TYPE/`:/`9/`,/`SUBTYPE/`:/`1/`,/`PRODUCTNAME/`:',''),'/`',''),'','') from node_system_info  ");
                        strQuery.Append(" where data_type=9 and data_subtype=1 and device_id=T.device_id) else os end as OS1");
                        strQuery.Append(" from 	(select distinct dl.device_id,dl.device_name,dl.ip,nu.mac_address as 'device_mac',dl.ou_longname,");
                        strQuery.Append(" isnull((select  top 1 parameter_value from node_system_info_details nsd where nsd.type_id=8 and nsd.parameter_name='caption' and nsd.device_id=dl.device_id),'') as os ,");
                        strQuery.Append(" (select top 1 parameter_value from node_system_info_details where type_id=8 and parameter_name='OSArchitecture' and device_id=dl.device_id) as OSType");
                        strQuery.Append(" from device_linkage dl  left outer join node_user_info nu 	on dl.device_id=nu.device_id  left outer join node_system_info_details nsd ");
                        strQuery.Append(" on dl.device_id=nsd.device_id  	where dl.status<>-1 and dl.device_active = 1 and dl.device_mode in (1,2,3) and dl.status not in (-1,90) ");
                        strQuery.Append(" ) T ) T1 where len(OS1) > 0  and OS1 like '%{");
                        strQuery.AppendFormat("{0}", OSName);
                        strQuery.Append("}%'");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        //strQuery.Append("select replace(replace(OS1,'{',''),'}','') as osname,os_type,device_name ,ip,device_mac,ou_longname from ( ");
                        //strQuery.Append(" select os as osname,device_name,ip,device_mac,ou_longname, case when ostype= 'NA' then '' when ostype is null then '' else ostype end as os_type, case when len(os) < 5 then ");
                        //strQuery.Append(" (select top 1 replace(replace(replace(json,'/`TYPE/`:/`9/`,/`SUBTYPE/`:/`1/`,/`PRODUCTNAME/`:',''),'/`',''),'','') from node_system_info  ");
                        //strQuery.Append(" where data_type=9 and data_subtype=1 and device_id=T.device_id) else os end as OS1");
                        //strQuery.Append(" from 	(select distinct dl.device_id,dl.device_name,dl.ip,dl.device_mac,dl.ou_longname,");
                        //strQuery.Append(" isnull((select  top 1 parameter_value from node_system_info_details nsd where nsd.type_id=8 and nsd.parameter_name='caption' and nsd.device_id=dl.device_id),'') as os ,");
                        //strQuery.Append(" (select top 1 parameter_value from node_system_info_details where type_id=8 and parameter_name='OSArchitecture' and device_id=dl.device_id) as OSType");
                        //strQuery.Append(" from device_linkage dl  left outer join node_user_info nu 	on dl.device_id=nu.device_id  left outer join node_system_info_details nsd ");
                        //strQuery.Append(" on dl.device_id=nsd.device_id  	where dl.status<>-1 and dl.device_active = 1 and dl.device_mode in (1,2,3) and dl.status not in (-1,90) ");
                        //strQuery.AppendFormat(" ) T ) T1 where len(OS1) > 0  and OS1 like '%{{0}}%'", OSName);

                        strQuery.Append("select replace(replace(OS1,'{',''),'}','') as osname,os_type,device_name ,ip,device_mac,ou_longname from ( ");
                        strQuery.Append(" select os as osname,device_name,ip,device_mac,ou_longname, case when ostype= 'NA' then '' when ostype is null then '' else ostype end as os_type, case when len(os) < 5 then ");
                        strQuery.Append(" (select top 1 replace(replace(replace(json,'/`TYPE/`:/`9/`,/`SUBTYPE/`:/`1/`,/`PRODUCTNAME/`:',''),'/`',''),'','') from node_system_info  ");
                        strQuery.Append(" where data_type=9 and data_subtype=1 and device_id=T.device_id) else os end as OS1");
                        strQuery.Append(" from 	(select distinct dl.device_id,dl.device_name,dl.ip,nu.mac_address as 'device_mac',dl.ou_longname,");
                        strQuery.Append(" isnull((select  top 1 parameter_value from node_system_info_details nsd where nsd.type_id=8 and nsd.parameter_name='caption' and nsd.device_id=dl.device_id),'') as os ,");
                        strQuery.Append(" (select top 1 parameter_value from node_system_info_details where type_id=8 and parameter_name='OSArchitecture' and device_id=dl.device_id) as OSType");
                        strQuery.Append(" from device_linkage dl  left outer join node_user_info nu 	on dl.device_id=nu.device_id  left outer join node_system_info_details nsd ");
                        strQuery.Append(" on dl.device_id=nsd.device_id  	where dl.status<>-1 and dl.device_active = 1 and dl.device_mode in (1,2,3) and dl.status not in (-1,90) ");
                        strQuery.Append(" ) T ) T1 where len(OS1) > 0  and OS1 like '%{");
                        strQuery.AppendFormat("{0}", OSName);
                        strQuery.Append("}%'");

                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_OS_summary_details Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_OS_summary_details Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        // Processor Details
        public DataTable Get_Processor()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select details as 'processorname',count(*) as 'count' from( select distinct node_hardware_info.device_id,node_hardware_info.details  from node_hardware_info,device_linkage dl  ");
                        strQuery.AppendFormat(" where dl.device_id=node_hardware_info.device_id  ");
                        strQuery.AppendFormat(" and dl.status <> -1  and hardware_class='Processor')T group by details order by count(*) desc ");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select details as 'processorname',count(*) as 'count' from( select distinct node_hardware_info.device_id,node_hardware_info.details  from node_hardware_info,device_linkage dl  ");
                        strQuery.AppendFormat(" where dl.device_id=node_hardware_info.device_id  ");
                        strQuery.AppendFormat(" and dl.status <> -1  and hardware_class='Processor')T group by details order by count(*) desc ");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Processor Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Processor Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_Processor_summary_details(string ProcessorName)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        //strQuery.AppendFormat(" select distinct device_name,ip,device_mac,ou_longname  from node_hardware_info,device_linkage dl  ");
                        //strQuery.AppendFormat("	where dl.device_id=node_hardware_info.device_id  ");
                        //strQuery.AppendFormat(" and dl.status <> -1  and hardware_class='Processor' and details='{0}' ", ProcessorName);

                        strQuery.AppendFormat(" select distinct device_name,ip,a.mac_address,ou_longname  from node_hardware_info,device_linkage dl,node_user_info a ");
                        strQuery.AppendFormat("	where dl.device_id=node_hardware_info.device_id and a.device_id=dl.device_id");
                        strQuery.AppendFormat(" and dl.status <> -1  and hardware_class='Processor' and details='{0}' ", ProcessorName);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        //strQuery.AppendFormat(" select distinct device_name,ip,device_mac,ou_longname  from node_hardware_info,device_linkage dl  ");
                        //strQuery.AppendFormat("	where dl.device_id=node_hardware_info.device_id  ");
                        //strQuery.AppendFormat(" and dl.status <> -1  and hardware_class='Processor' and details='{0}' ", ProcessorName);

                        strQuery.AppendFormat(" select distinct device_name,ip,a.mac_address,ou_longname  from node_hardware_info,device_linkage dl,node_user_info a ");
                        strQuery.AppendFormat("	where dl.device_id=node_hardware_info.device_id and a.device_id=dl.device_id");
                        strQuery.AppendFormat(" and dl.status <> -1  and hardware_class='Processor' and details='{0}' ", ProcessorName);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Processor_summary_details Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Processor_summary_details Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_domain_summary_details(string DomainWorkgroupname)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        //strQuery.AppendFormat(" select distinct dl.device_name,dl.ip,dl.device_mac,dl.ou_longname,data1 from node_system_info ns,device_linkage dl where ns.device_id=dl.device_id and dl.status <>-1  and  data_type=1 and data_subtype=2 and data1='{0}'", DomainWorkgroupname);

                        strQuery.AppendFormat(" select distinct dl.device_name,dl.ip,a.mac_address as 'device_mac',dl.ou_longname,data1 from node_system_info ns,device_linkage dl, node_user_info a where ns.device_id=dl.device_id and ns.device_id=a.device_id and dl.status <>-1  and  data_type=1 and data_subtype=2 and data1='{0}'", DomainWorkgroupname);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select distinct dl.device_name,dl.ip,a.mac_address as 'device_mac',dl.ou_longname,data1 from node_system_info ns,device_linkage dl, node_user_info a where ns.device_id=dl.device_id and ns.device_id=a.device_id and dl.status <>-1  and  data_type=1 and data_subtype=2 and data1='{0}'", DomainWorkgroupname);
                        //strQuery.AppendFormat(" select distinct dl.device_name,dl.ip,dl.device_mac,dl.ou_longname,data1 from node_system_info ns,device_linkage dl where ns.device_id=dl.device_id and dl.status <>-1  and  data_type=1 and data_subtype=2 and data1='{0}'", DomainWorkgroupname);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_domain_summary_details Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_domain_summary_details Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        public DataTable Get_Disk_summary_details(string DiskSize)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        //strQuery.AppendFormat(" select device_id,device_name,ip,device_mac,ou_longname,gb from(select dl.device_id,dl.device_name,dl.ip,dl.device_mac,dl.ou_longname,sum(gb) as gb  ");
                        //strQuery.AppendFormat("	from(	select distinct device_id,sum(gb) as gb from ( select distinct node_drive_info.device_id,drive_id,total/1024/1024/1024 as gb,total/1024/1024/1024 as total  ");
                        //strQuery.AppendFormat(" from node_drive_info , device_master dm where   node_drive_info.device_id = dm.device_id and dm.status not in (-1,90) and active =1 and device_mode in (1,2,3) ");
                        //strQuery.AppendFormat(" and (total/1024/1024/1024 !=0 and total !=0 )  and node_drive_info.device_id !='0' and drive_type in('Fixed hard disk media') and  device_type in('desktop','laptop') and filesystem='ntfs' ");
                        //strQuery.AppendFormat(" group by node_drive_info.device_id,drive_id,total/1024,total )t group by t.device_id,t.total )s , device_linkage dl where s.device_id=dl.device_id group by dl.device_id,dl.device_name,dl.ip,dl.device_mac,dl.ou_longname ");
                        //strQuery.AppendFormat(" )T where {0}", DiskSize);

                        strQuery.AppendFormat(" select t.device_id,device_name,ip, a.mac_address as 'device_mac' ,ou_longname,gb from(select dl.device_id,dl.device_name,dl.ip,dl.device_mac,dl.ou_longname,sum(gb) as gb  ");
                        strQuery.AppendFormat("	from(	select distinct device_id,sum(gb) as gb from ( select distinct node_drive_info.device_id,drive_id,total/1024/1024/1024 as gb,total/1024/1024/1024 as total  ");
                        strQuery.AppendFormat(" from node_drive_info , device_master dm where   node_drive_info.device_id = dm.device_id and dm.status not in (-1,90) and active =1 and device_mode in (1,2,3) ");
                        strQuery.AppendFormat(" and (total/1024/1024/1024 !=0 and total !=0 )  and node_drive_info.device_id !='0' and drive_type in('Fixed hard disk media') and  device_type in('desktop','laptop') and filesystem='ntfs' ");
                        strQuery.AppendFormat(" group by node_drive_info.device_id,drive_id,total/1024,total )t group by t.device_id,t.total )s , device_linkage dl where s.device_id=dl.device_id group by dl.device_id,dl.device_name,dl.ip,dl.device_mac,dl.ou_longname ");
                        strQuery.AppendFormat(" )T, node_user_info a where t.device_id=a.device_id and  {0}", DiskSize);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:


                        //strQuery.AppendFormat(" select device_id,device_name,ip,device_mac,ou_longname,gb from(select dl.device_id,dl.device_name,dl.ip,dl.device_mac,dl.ou_longname,sum(gb) as gb  ");
                        //strQuery.AppendFormat("	from(	select distinct device_id,sum(gb) as gb from ( select distinct node_drive_info.device_id,drive_id,total/1024/1024/1024 as gb,total/1024/1024/1024 as total  ");
                        //strQuery.AppendFormat(" from node_drive_info , device_master dm where   node_drive_info.device_id = dm.device_id and dm.status not in (-1,90) and active =1 and device_mode in (1,2,3) ");
                        //strQuery.AppendFormat(" and (total/1024/1024/1024 !=0 and total !=0 )  and node_drive_info.device_id !='0' and drive_type in('Fixed hard disk media') and  device_type in('desktop','laptop') and filesystem='ntfs' ");
                        //strQuery.AppendFormat(" group by node_drive_info.device_id,drive_id,total/1024,total )t group by t.device_id,t.total )s , device_linkage dl where s.device_id=dl.device_id group by dl.device_id,dl.device_name,dl.ip,dl.device_mac,dl.ou_longname ");
                        //strQuery.AppendFormat(" )T where gb < {0}", DiskSize);

                        strQuery.AppendFormat(" select t.device_id,device_name,ip, a.mac_address as 'device_mac' ,ou_longname,gb from(select dl.device_id,dl.device_name,dl.ip,dl.device_mac,dl.ou_longname,sum(gb) as gb  ");
                        strQuery.AppendFormat("	from(	select distinct device_id,sum(gb) as gb from ( select distinct node_drive_info.device_id,drive_id,total/1024/1024/1024 as gb,total/1024/1024/1024 as total  ");
                        strQuery.AppendFormat(" from node_drive_info , device_master dm where   node_drive_info.device_id = dm.device_id and dm.status not in (-1,90) and active =1 and device_mode in (1,2,3) ");
                        strQuery.AppendFormat(" and (total/1024/1024/1024 !=0 and total !=0 )  and node_drive_info.device_id !='0' and drive_type in('Fixed hard disk media') and  device_type in('desktop','laptop') and filesystem='ntfs' ");
                        strQuery.AppendFormat(" group by node_drive_info.device_id,drive_id,total/1024,total )t group by t.device_id,t.total )s , device_linkage dl where s.device_id=dl.device_id group by dl.device_id,dl.device_name,dl.ip,dl.device_mac,dl.ou_longname ");
                        strQuery.AppendFormat(" )T, node_user_info a where t.device_id=a.device_id and  {0}", DiskSize);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Disk_summary_details Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Disk_summary_details Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_RAM_summary_details(string RAMCondition)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        //strQuery.AppendFormat(" select device_name,ip,device_mac,ou_longname, GB  from  ( ");
                        //strQuery.AppendFormat("	select  nd.device_id,device_name,ip,device_mac,ou_longname,isnull(sum(cast(capacity as bigint)/1024/1024/1024),'0')  as 'GB'   ");
                        //strQuery.AppendFormat(" from node_hardware_info nd,device_linkage dl  	where nd.device_id = dl.device_id and dl.status <> -1 and hardware_class='PhysicalMemory' ");
                        //strQuery.AppendFormat(" and capacity not in ('NA') and isnull(cast(capacity as bigint)/1024/1024/1024,'0')  <> '0'   	group by nd.device_id,device_name,ip,device_mac,ou_longname ");
                        //strQuery.AppendFormat(" ) T where {0}", RAMCondition);

                        strQuery.AppendFormat(" select device_name,ip,a.mac_address as 'device_mac',ou_longname, GB  from  ( ");
                        strQuery.AppendFormat("	select  nd.device_id,device_name,ip,device_mac,ou_longname,isnull(sum(cast(capacity as bigint)/1024/1024/1024),'0')  as 'GB'   ");
                        strQuery.AppendFormat(" from node_hardware_info nd,device_linkage dl  	where nd.device_id = dl.device_id and dl.status <> -1 and hardware_class='PhysicalMemory' ");
                        strQuery.AppendFormat(" and capacity not in ('NA') and isnull(cast(capacity as bigint)/1024/1024/1024,'0')  <> '0'   	group by nd.device_id,device_name,ip,device_mac,ou_longname ");
                        strQuery.AppendFormat(" ) T, node_user_info a where  t.device_id=a.device_id and  {0}", RAMCondition);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        //strQuery.AppendFormat(" select device_name,ip,device_mac,ou_longname, GB  from  ( ");
                        //strQuery.AppendFormat("	select  nd.device_id,device_name,ip,device_mac,ou_longname,isnull(sum(cast(capacity as bigint)/1024/1024/1024),'0')  as 'GB'   ");
                        //strQuery.AppendFormat(" from node_hardware_info nd,device_linkage dl  	where nd.device_id = dl.device_id and dl.status <> -1 and hardware_class='PhysicalMemory' ");
                        //strQuery.AppendFormat(" and capacity not in ('NA') and isnull(cast(capacity as bigint)/1024/1024/1024,'0')  <> '0'   	group by nd.device_id,device_name,ip,device_mac,ou_longname ");
                        //strQuery.AppendFormat(" ) T where {0}", RAMCondition);

                        strQuery.AppendFormat(" select device_name,ip,a.mac_address as 'device_mac',ou_longname, GB  from  ( ");
                        strQuery.AppendFormat("	select  nd.device_id,device_name,ip,device_mac,ou_longname,isnull(sum(cast(capacity as bigint)/1024/1024/1024),'0')  as 'GB'   ");
                        strQuery.AppendFormat(" from node_hardware_info nd,device_linkage dl  	where nd.device_id = dl.device_id and dl.status <> -1 and hardware_class='PhysicalMemory' ");
                        strQuery.AppendFormat(" and capacity not in ('NA') and isnull(cast(capacity as bigint)/1024/1024/1024,'0')  <> '0'   	group by nd.device_id,device_name,ip,device_mac,ou_longname ");
                        strQuery.AppendFormat(" ) T, node_user_info a where  t.device_id=a.device_id and  {0}", RAMCondition);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_RAM_summary_details Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_RAM_summary_details Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_multiple_lan_summary_details()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        //strQuery.AppendFormat(" select device_name,ip,device_mac,ou_longname, name from device_linkage dl, node_networkcard_info nni where connection_status = '2' and dl.device_id=nni.device_id");
                        //strQuery.AppendFormat("	and dl.device_id in (select device_id from (select device_id,count(*) as cnt from node_networkcard_info where connection_status = '2' group by device_id ) T where cnt>1) ");

                        strQuery.AppendFormat(" select device_name,ip,a.mac_address as 'device_mac',ou_longname, name from device_linkage dl, node_networkcard_info nni, node_user_info a where connection_status = '2' and dl.device_id=nni.device_id");
                        strQuery.AppendFormat(" and dl.device_id=a.device_id and dl.device_id in (select device_id from (select device_id,count(*) as cnt from node_networkcard_info where connection_status = '2' group by device_id ) T where cnt>1) ");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        //strQuery.AppendFormat(" select device_name,ip,device_mac,ou_longname, name from device_linkage dl, node_networkcard_info nni where connection_status = '2' and dl.device_id=nni.device_id");
                        //strQuery.AppendFormat("	and dl.device_id in (select device_id from (select device_id,count(*) as cnt from node_networkcard_info where connection_status = '2' group by device_id ) T where cnt>1) ");

                        strQuery.AppendFormat(" select device_name,ip,a.mac_address as 'device_mac',ou_longname, name from device_linkage dl, node_networkcard_info nni, node_user_info a where connection_status = '2' and dl.device_id=nni.device_id");
                        strQuery.AppendFormat(" and dl.device_id=a.device_id and dl.device_id in (select device_id from (select device_id,count(*) as cnt from node_networkcard_info where connection_status = '2' group by device_id ) T where cnt>1) ");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_multiple_lan_summary_details Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_multiple_lan_summary_details Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_unauthorise_software_summary_details()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        //strQuery.AppendFormat(" select dl.device_name,dl.ip,dl.device_mac,dl.ou_longname,software from nodesoftwaredetails a,device_linkage dl where a.deviceid = dl.device_id  and dl.status<>-1 and dl.device_mode in (1,2,3) and a.software in(select typename from authorizedata where datatype=1 and authorizetype=0) ");
                        strQuery.AppendFormat("select dl.device_name,dl.ip,nu.mac_address as 'device_mac',dl.ou_longname,software from nodesoftwaredetails a,device_linkage dl, node_user_info nu where a.deviceid = dl.device_id and a.deviceid=nu.device_id  and dl.status<>-1 and dl.device_mode in (1,2,3) and a.software in(select typename from authorizedata where datatype=1 and authorizetype=0) ");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        //strQuery.AppendFormat(" select dl.device_name,dl.ip,dl.device_mac,dl.ou_longname,software from nodesoftwaredetails a,device_linkage dl where a.deviceid = dl.device_id  and dl.status<>-1 and dl.device_mode in (1,2,3) and a.software in(select typename from authorizedata where datatype=1 and authorizetype=0) ");
                        strQuery.AppendFormat("select dl.device_name,dl.ip,nu.mac_address as 'device_mac',dl.ou_longname,software from nodesoftwaredetails a,device_linkage dl, node_user_info nu where a.deviceid = dl.device_id and a.deviceid=nu.device_id  and dl.status<>-1 and dl.device_mode in (1,2,3) and a.software in(select typename from authorizedata where datatype=1 and authorizetype=0) ");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_unauthorise_software_summary_details Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_unauthorise_software_summary_details Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_user_summary_details(string Condition)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        //strQuery.AppendFormat(" select dl.device_name,dl.ip,dl.device_mac,dl.ou_longname, username from user_table inner join device_linkage dl on dl.device_id=user_table.device_id and dl.status<>-1 and local_account='-1' {0} ", Condition);
                        strQuery.AppendFormat(" select dl.device_name,dl.ip,nui.mac_address as 'device_mac',dl.ou_longname, username from user_table inner join device_linkage dl on dl.device_id=user_table.device_id left outer join node_user_info nui on dl.device_id=nui.device_id where dl.status<>-1 and local_account='-1' {0} ", Condition);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        //strQuery.AppendFormat(" select dl.device_name,dl.ip,dl.device_mac,dl.ou_longname, username from user_table inner join device_linkage dl on dl.device_id=user_table.device_id and dl.status<>-1 and local_account='-1' {0} ", Condition);
                        strQuery.AppendFormat(" select dl.device_name,dl.ip,nui.mac_address as 'device_mac',dl.ou_longname, username from user_table inner join device_linkage dl on dl.device_id=user_table.device_id left outer join node_user_info nui on dl.device_id=nui.device_id where dl.status<>-1 and local_account='-1' {0} ", Condition);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_user_summary_details Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_user_summary_details Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_antivirus_not_installed_summary_details()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        //strQuery.AppendFormat(" select dl.device_name,dl.ip,dl.device_mac,dl.ou_longname from device_linkage dl where  dl.status<>-1 and dl.device_mode in (1,2,3) and dl.device_id in (select device_id from (select device_id , case sum(cnt)  when (select count(*) from antivirus_configuration ) then 'Yes' else 'No' end as cnt1 from (select device_id,0 as cnt from device_linkage union select nsi.device_id,count(*) as cnt from node_service_info nsi, antivirus_configuration ac where nsi.service_name=ac.antivirus_service_name group by nsi.device_id) T group by device_id) T1 where cnt1 = 'No') ");

                        strQuery.AppendFormat("  select dl.device_name,dl.ip,nu.mac_address as 'device_mac',dl.ou_longname from device_linkage dl, node_user_info nu where  dl.status<>-1 and dl.device_mode in (1,2,3) and dl.device_id in (select device_id from compliance_management_summary where av_installed not like 'YES%' and dl.device_id=nu.device_id )");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        //strQuery.AppendFormat(" select dl.device_name,dl.ip,dl.device_mac,dl.ou_longname from device_linkage dl where  dl.status<>-1 and dl.device_mode in (1,2,3) and dl.device_id in (select device_id from (select device_id , case sum(cnt)  when (select count(*) from antivirus_configuration ) then 'Yes' else 'No' end as cnt1 from (select device_id,0 as cnt from device_linkage union select nsi.device_id,count(*) as cnt from node_service_info nsi, antivirus_configuration ac where nsi.service_name=ac.antivirus_service_name group by nsi.device_id) T group by device_id) T1 where cnt1 = 'No') ");

                        strQuery.AppendFormat(" select dl.device_name,dl.ip,nu.mac_address as 'device_mac',dl.ou_longname from device_linkage dl, node_user_info nu where  dl.status<>-1 and dl.device_mode in (1,2,3) and dl.device_id in (select device_id from (select device_id , case sum(cnt)  when (select count(*) from antivirus_configuration ) then 'Yes' else 'No' end as cnt1 from (select device_id,0 as cnt from device_linkage union select nsi.device_id,count(*) as cnt from node_service_info nsi, antivirus_configuration ac where nsi.service_name=ac.antivirus_service_name group by nsi.device_id) T group by device_id) T1 where cnt1 = 'No') and dl.device_id=nu.device_id");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_antivirus_not_installed_summary_details Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_antivirus_not_installed_summary_details Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_printer_summary_details()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        //strQuery.AppendFormat(" select distinct dl.device_name,dl.ip,dl.device_mac,details as printername,dl.ou_longname ");
                        //strQuery.AppendFormat("	from node_hardware_info d,device_linkage dl where d.device_id = dl.device_id and dl.status <> -1 and hardware_class='Printer'  ");
                        //strQuery.AppendFormat(" and ( d.details not like '%Fax%' and d.details not like '%OneNote%' and  d.details not like '%Send To OneNote%' and  d.details not like '%Microsoft%' and d.details not like '%Adobe PDF%')");

                        strQuery.AppendFormat(" select distinct dl.device_name,dl.ip,a.mac_address as 'device_mac',details as printername,dl.ou_longname ");
                        strQuery.AppendFormat("	from node_hardware_info d,device_linkage dl, node_user_info a where d.device_id = dl.device_id and dl.device_id=a.device_id and dl.status <> -1 and hardware_class='Printer'  ");
                        strQuery.AppendFormat(" and ( d.details not like '%Fax%' and d.details not like '%OneNote%' and  d.details not like '%Send To OneNote%' and  d.details not like '%Microsoft%' and d.details not like '%Adobe PDF%')");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        //strQuery.AppendFormat(" select distinct dl.device_name,dl.ip,dl.device_mac,details as printername,dl.ou_longname ");
                        //strQuery.AppendFormat("	from node_hardware_info d,device_linkage dl where d.device_id = dl.device_id and dl.status <> -1 and hardware_class='Printer'  ");
                        //strQuery.AppendFormat(" and ( d.details not like '%Fax%' and d.details not like '%OneNote%' and  d.details not like '%Send To OneNote%' and  d.details not like '%Microsoft%' and d.details not like '%Adobe PDF%')");

                        strQuery.AppendFormat(" select distinct dl.device_name,dl.ip,a.mac_address as 'device_mac',details as printername,dl.ou_longname ");
                        strQuery.AppendFormat("	from node_hardware_info d,device_linkage dl, node_user_info a where d.device_id = dl.device_id and dl.device_id=a.device_id and dl.status <> -1 and hardware_class='Printer'  ");
                        strQuery.AppendFormat(" and ( d.details not like '%Fax%' and d.details not like '%OneNote%' and  d.details not like '%Send To OneNote%' and  d.details not like '%Microsoft%' and d.details not like '%Adobe PDF%')");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_printer_summary_details Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_printer_summary_details Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_wi_fi_on_pc_summary_details()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        //strQuery.AppendFormat(" select distinct dl.device_name,dl.ip,dl.device_mac,dl.ou_longname ,name,service_name ");
                        //strQuery.AppendFormat("	from node_networkcard_info d,device_linkage dl 	where d.device_id = dl.device_id and dl.status <> -1 and  (connection_id like '%Wi-Fi%')  ");

                        strQuery.AppendFormat(" select distinct dl.device_name,dl.ip,a.mac_address as 'device_mac',dl.ou_longname ,name,service_name ");
                        strQuery.AppendFormat("	from node_networkcard_info d,device_linkage dl, node_user_info a where d.device_id = dl.device_id and dl.device_id=a.device_id and dl.status <> -1 and  (connection_id like '%Wi-Fi%')  ");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        //strQuery.AppendFormat(" select distinct dl.device_name,dl.ip,dl.device_mac,dl.ou_longname ,name,service_name ");
                        //strQuery.AppendFormat("	from node_networkcard_info d,device_linkage dl 	where d.device_id = dl.device_id and dl.status <> -1 and  (connection_id like '%Wi-Fi%')  ");
                        strQuery.AppendFormat(" select distinct dl.device_name,dl.ip,a.mac_address as 'device_mac',dl.ou_longname ,name,service_name ");
                        strQuery.AppendFormat("	from node_networkcard_info d,device_linkage dl, node_user_info a where d.device_id = dl.device_id and dl.device_id=a.device_id and dl.status <> -1 and  (connection_id like '%Wi-Fi%')  ");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_wi_fi_on_pc_summary_details Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_wi_fi_on_pc_summary_details Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_shared_summary_details()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        //strQuery.AppendFormat(" select dl.device_name,dl.ip,dl.device_mac,dl.ou_longname,share_name,path from node_share_info sh,device_linkage dl where sh.device_id=dl.device_id and dl.status<>-1 and dl.device_mode in (1,2,3) ");

                        strQuery.AppendFormat(" select dl.device_name,dl.ip,a.mac_address as 'device_mac',dl.ou_longname,share_name,path from node_share_info sh,device_linkage dl, node_user_info a where sh.device_id=dl.device_id and dl.device_id=a.device_id and dl.status<>-1 and dl.device_mode in (1,2,3) ");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        //strQuery.AppendFormat(" select dl.device_name,dl.ip,dl.device_mac,dl.ou_longname,share_name,path from node_share_info sh,device_linkage dl where sh.device_id=dl.device_id and dl.status<>-1 and dl.device_mode in (1,2,3) ");

                        strQuery.AppendFormat(" select dl.device_name,dl.ip,a.mac_address as 'device_mac',dl.ou_longname,share_name,path from node_share_info sh,device_linkage dl, node_user_info a where sh.device_id=dl.device_id and dl.device_id=a.device_id and dl.status<>-1 and dl.device_mode in (1,2,3) ");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_shared_summary_details Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_shared_summary_details Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_firewall_on_off_summary_details()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        //strQuery.AppendFormat(" select distinct dl.device_name,dl.ip,dl.device_mac,dl.ou_longname,'ON' as 'firewallstatus' from node_system_info  DS inner join device_linkage dl on dl.device_id = DS.device_id where data_type=3 and data_subtype=1 and data1='1' and dl.status <> -1    ");
                        //strQuery.AppendFormat(" union all  ");
                        //strQuery.AppendFormat(" select distinct dl.device_name,dl.ip,dl.device_mac,dl.ou_longname,'OFF' as 'firewallstatus' from node_system_info  DS inner join device_linkage dl on dl.device_id = DS.device_id where data_type=3 and data_subtype=1 and data1='0' and dl.status <> -1");

                        strQuery.AppendFormat("select distinct dl.device_name,dl.ip,nui.mac_address as 'device_mac',dl.ou_longname, case when data1='1' then 'ON' when data1='0' then 'OFF' end as 'firewallstatus' from node_system_info  DS inner join device_linkage dl on dl.device_id = DS.device_id left outer join node_user_info nui on dl.device_id=nui.device_id where data_type=3 and data_subtype=1 and data1 in ('0','1') and dl.status <> -1");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        //strQuery.AppendFormat(" select distinct dl.device_name,dl.ip,dl.device_mac,dl.ou_longname,'ON' as 'firewallstatus' from node_system_info  DS inner join device_linkage dl on dl.device_id = DS.device_id where data_type=3 and data_subtype=1 and data1='1' and dl.status <> -1    ");
                        //strQuery.AppendFormat(" union all  ");
                        //strQuery.AppendFormat(" select distinct dl.device_name,dl.ip,dl.device_mac,dl.ou_longname,'OFF' as 'firewallstatus' from node_system_info  DS inner join device_linkage dl on dl.device_id = DS.device_id where data_type=3 and data_subtype=1 and data1='0' and dl.status <> -1");

                        strQuery.AppendFormat("select distinct dl.device_name,dl.ip,nui.mac_address as 'device_mac',dl.ou_longname, case when data1='1' then 'ON' when data1='0' then 'OFF' end as 'firewallstatus' from node_system_info  DS inner join device_linkage dl on dl.device_id = DS.device_id left outer join node_user_info nui on dl.device_id=nui.device_id where data_type=3 and data_subtype=1 and data1 in ('0','1') and dl.status <> -1");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_firewall_on_off_summary_details Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_firewall_on_off_summary_details Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        // User Summary
        public DataTable Get_UserSummary()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select username as 'userSummary',count(*) as counts from (select case  username when 'Administrator' then 'Administrator' when 'Guest' then 'Guest' else 'Local Users' end as username ");
                        strQuery.AppendFormat(" from user_table inner join device_linkage dl on dl.device_id=user_table.device_id and dl.status<>-1 and local_account='-1') t ");
                        strQuery.AppendFormat(" group by username order by username asc");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select username as 'userSummary',count(*) as counts from (select case  username when 'Administrator' then 'Administrator' when 'Guest' then 'Guest' else 'Local Users' end as username ");
                        strQuery.AppendFormat(" from user_table inner join device_linkage dl on dl.device_id=user_table.device_id and dl.status<>-1 and local_account='-1') t ");
                        strQuery.AppendFormat(" group by username order by username asc");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_UserSummary Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_UserSummary Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        // Domain Summary
        public DataTable Get_Domain()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select  data1 as 'domainName',count(distinct dl.device_id) as counts from node_system_info ns,device_linkage dl where ns.device_id=dl.device_id ");
                        strQuery.AppendFormat(" and dl.status <>-1  and  data_type=1 and data_subtype=2 group by data1  order by Counts desc  ");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select  data1 as 'domainName',count(distinct dl.device_id) as counts from node_system_info ns,device_linkage dl where ns.device_id=dl.device_id ");
                        strQuery.AppendFormat(" and dl.status <>-1  and  data_type=1 and data_subtype=2 group by data1  order by Counts desc  ");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Domain Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Domain Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        // Harddisk Usages
        public DataTable Get_HDDUsage()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" exec get_disk_utilization ");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" Call get_disk_utilization();");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_HDDUsage Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_HDDUsage Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        //RAM Details
        public DataTable Get_RAM_Details()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" exec getramdetails ");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" call getramdetails(); ");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_RAM_Details Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_RAM_Details Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        //Hardware Details
        public DataTable Get_Hardware_Details()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select 'Multiple LAN Card on PC' as 'hardwareDetails',cast(count(device_id) as varchar) as counts from (select device_id,count(*) as cnt from node_networkcard_info where connection_status = '2' group by device_id ) T where cnt>1 ");
                        strQuery.AppendFormat(" union all select 'Printer' as 'Type',cast(count(*) as varchar) as counts from ( select distinct d.device_id,d.details from node_hardware_info d,device_linkage dl where d.device_id = dl.device_id and dl.status <> -1 and hardware_class='Printer' and ( d.details not like '%Fax%' and d.details not like '%OneNote%' and  d.details not like '%Send To OneNote%' and  d.details not like '%Microsoft%' and d.details not like '%Adobe PDF%') )T ");
                        strQuery.AppendFormat(" union all select 'WiFi on PC' as 'Type',cast(count(*) as varchar) as counts from ( select 'WiFi on PC' as 'Hardware Details',count(*) as 'Counts' from node_networkcard_info d,device_linkage dl where d.device_id = dl.device_id and dl.status <> -1 and  (connection_id like '%Wi-Fi%') group by d.device_id )T "); /*having count(*) > 0");*/
                        strQuery.AppendFormat(" union all select 'Total Shared Resources' as 'hardwareDetails',cast(count(distinct sh.device_id) as varchar) as 'counts' from node_share_info sh,device_linkage dl where sh.device_id=dl.device_id and dl.status<>-1 and dl.device_mode in (1,2,3)");
                        //strQuery.AppendFormat(" select 'Multiple LAN Card on PC' as 'hardwareDetails',cast(count(*) as varchar)as counts from node_networkcard_info where connection_status = '2' ");
                        //strQuery.AppendFormat(" union all select 'Printer' as 'Type',cast(count(*) as varchar) as counts from ( select distinct d.device_id,d.details from node_hardware_info d,device_linkage dl where d.device_id = dl.device_id and dl.status <> -1 and hardware_class='Printer' and ( d.details not in('Fax') and  d.details not like '%Send To OneNote%' and  d.details not like '%Microsoft%' and d.details not like '%Adobe PDF%') )T ");
                        //strQuery.AppendFormat(" union all select 'WiFi on PC' as 'Type',cast(count(*) as varchar) as counts from ( select 'WiFi on PC' as 'Hardware Details',count(*) as 'Counts' from node_networkcard_info d,device_linkage dl where d.device_id = dl.device_id and dl.status <> -1 and  (connection_id like '%Wi-Fi%') group by d.device_id )T union all select 'Shared' as 'hardwareDetails',cast(count(*) as varchar) as 'counts' from node_share_info sh,device_linkage dl where sh.device_id=dl.device_id and dl.status<>-1 and dl.device_mode in (1,2,3)"); /*having count(*) > 0");*/
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select 'Multiple LAN Card on PC' as 'hardwareDetails',cast(count(*) as varchar)as counts from node_networkcard_info where connection_status = '2' ");
                        strQuery.AppendFormat(" union all select 'Printer' as 'Type',count(*) as 'counts' from ( select distinct d.device_id,d.details from node_hardware_info d,device_linkage dl where d.device_id = dl.device_id and dl.status <> -1 and hardware_class='Printer' and ( d.details not in('Fax') and  d.details not like '%Send To OneNote%' and  d.details not like '%Microsoft%' and d.details not like '%Adobe PDF%') )T union all select 'Shared' as 'hardwareDetails',cast(count(*) as varchar) as 'counts' from node_share_info sh,device_linkage dl where sh.device_id=dl.device_id and dl.status<>-1 and dl.device_mode in (1,2,3)");
                        strQuery.AppendFormat(" union all select 'WiFi on PC' as 'Type',count(*) as 'counts' from ( select 'WiFi on PC' as 'Hardware Details',count(*) as 'Counts' from node_networkcard_info d,device_linkage dl where d.device_id = dl.device_id and dl.status <> -1 and  (connection_id like '%Wi-Fi%') group by d.device_id )T"); /*having count(*) > 0");*/
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Hardware_Details Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Hardware_Details Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        //Software Details
        public DataTable Get_Software_Details()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select 'Unauthorised Software' as 'softwareDetails',cast(count(*) as varchar) as counts from nodesoftwaredetails a,device_linkage dl where a.deviceid = dl.device_id  and dl.status<>-1 and dl.device_mode in (1,2,3) and a.software in(select typename from authorizedata where datatype=1 and authorizetype=0) ");
                        strQuery.AppendFormat(" union all select 'Antivirus Not Installed' as 'Software Details', count(av_installed) as counts from compliance_management_summary A , device_linkage  dl where A.device_id=dl.device_id and dl.status<>-1 and dl.device_mode in (1,2,3) and  av_installed not like 'YES%' ");

                        //strQuery.AppendFormat(" union all select 'Antivirus Not Installed' as 'Software Details',cast(count(dl.device_id) as varchar) as counts from device_linkage dl where  dl.status<>-1 and dl.device_mode in (1,2,3) and dl.device_id in (select device_id from (select device_id , case sum(cnt)  when (select count(*) from antivirus_configuration ) then 'Yes' else 'No' end as cnt1 from (select device_id,0 as cnt from device_linkage union select nsi.device_id,count(*) as cnt from node_service_info nsi, antivirus_configuration ac where nsi.service_name=ac.antivirus_service_name group by nsi.device_id) T group by device_id) T1 where cnt1 = 'No') ");

                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select 'Unauthorised Software' as 'softwareDetails',cast(count(*) as char) as 'counts' from nodesoftwaredetails a,device_linkage dl where a.deviceid = dl.device_id  and dl.status<>-1 and dl.device_mode in (1,2,3) and a.software in(select typename from authorizedata where datatype=1 and authorizetype=0) ");
                        strQuery.AppendFormat(" union all select 'Antivirus Not Installed' as 'Software Details', count(av_installed) as counts from compliance_management_summary A , device_linkage  dl where A.device_id=dl.device_id and dl.status<>-1 and dl.device_mode in (1,2,3) and  av_installed not like 'YES%' ");

                        //strQuery.AppendFormat(" union all select 'Antivirus Not Installed' as 'Software Details',cast(count(dl.device_id) as char) as 'counts' from device_linkage dl where dl.status<>-1 and dl.device_mode in (1,2,3) and dl.device_id in (select device_id from (select device_id , case sum(cnt)  when (select count(*) from antivirus_configuration ) then 'Yes' else 'No' end as cnt1 from (select device_id,0 as cnt from device_linkage union select nsi.device_id,count(*) as cnt from node_service_info nsi, antivirus_configuration ac where nsi.service_name=ac.antivirus_service_name group by nsi.device_id) T group by device_id) T1 where cnt1 = 'No') ");
                        //strQuery.AppendFormat(" union all select 'Shared' as 'Software Details',cast(count(*) as char) as 'counts' from node_share_info sh,device_linkage dl where sh.device_id=dl.device_id and dl.status<>-1 and dl.device_mode in (1,2,3) ");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Software_Details Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Software_Details Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        //Software Details Network ON_OFF 
        public DataTable Get_Software_Details_Network_ON_OFF()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select cast(count(distinct dl.device_id) as varchar) as 'Counts','ON' as 'TYPE' from node_system_info  DS inner join device_linkage dl on dl.device_id = DS.device_id where data_type=3 and data_subtype=1 and data1='1' and dl.status <> -1   ");
                        strQuery.AppendFormat(" union all  select cast(count(distinct dl.device_id) as varchar) as 'Counts','OFF' as 'TYPE' from node_system_info  DS inner join device_linkage dl on dl.device_id = DS.device_id where data_type=3 and data_subtype=1 and data1='0' and dl.status <> -1 ");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select cast(count(distinct dl.device_id) as char) as 'Counts','ON' as 'TYPE' from node_system_info  DS inner join device_linkage dl on dl.device_id = DS.device_id where data_type=3 and data_subtype=1 and data1='1' and dl.status <> -1   ");
                        strQuery.AppendFormat(" union all  select cast(count(distinct dl.device_id) as char) as 'Counts','OFF' as 'TYPE' from node_system_info  DS inner join device_linkage dl on dl.device_id = DS.device_id where data_type=3 and data_subtype=1 and data1='0' and dl.status <> -1 ");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Software_Details_Network_ON_OFF Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Software_Details_Network_ON_OFF Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        // Unauthorize Software
        //public DataTable Get_UnAuthSW()
        //{
        //    StringBuilder strQuery = new StringBuilder();
        //    try
        //    {
        //        switch (dbtype)
        //        {
        //            case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
        //                strQuery.AppendFormat("select top 5 software,count(*) as 'Count' from node_software_info a, device_master dm,ou_device od,ou_nodelinkage onl,softwareauthorize b ");
        //                strQuery.AppendFormat(" where a.device_id = dm.device_id  and  dm.device_id=od.device_id and ou_id=ou_nodelinkage_ouid and dm.status<>-1 and od.status=1 ");
        //                strQuery.AppendFormat(" and a.software like '%'+  b.softwarename + '%' and b.authorize=0 group by software order by count desc");
        //                break;
        //            case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
        //                strQuery.AppendFormat("select top 5 software,count(*) as 'Count' from node_software_info a, device_master dm,ou_device od,ou_nodelinkage onl,softwareauthorize b ");
        //                strQuery.AppendFormat(" where a.device_id = dm.device_id  and  dm.device_id=od.device_id and ou_id=ou_nodelinkage_ouid and dm.status<>-1 and od.status=1 ");
        //                strQuery.AppendFormat(" and a.software like '%'+  b.softwarename + '%' and b.authorize=0 group by software order by count desc");
        //                break;
        //        }
        //        objcommon.WriteLog("DBQueryHandler", "Get_UnAuthSW Query : " + strQuery.ToString());
        //        data_table = this.database.getDataTable(strQuery.ToString());
        //    }
        //    catch (Exception ex)
        //    {
        //        objcommon.WriteLog("DBQueryHandler", "Get_UnAuthSW Exception : " + ex.Message.ToString());
        //    }
        //    return data_table;
        //}

        // USB Violation Count
        //public int Get_USBStoargeCount()
        //{
        //    StringBuilder strQueryBuilder = new StringBuilder();
        //    int result = 0;
        //    try
        //    {
        //        switch (dbtype)
        //        {
        //            case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
        //                strQueryBuilder.AppendFormat("select count(*) as 'Total' from ( ");
        //                strQueryBuilder.AppendFormat(" select nat.details,count(distinct (d.device_id)) as  'total' from node_audit_trail nat,device_master d,ou_device od where category_type = 11 and ");
        //                strQueryBuilder.AppendFormat(" ( nat.details like '%usb%' ) and nat.details not like 'cddrive%' and d.device_id = nat.device_id ");
        //                strQueryBuilder.AppendFormat(" and d.device_id=od.device_id and od.status=1 and d.status not in (-1, 90) and d.active = 1 ");
        //                strQueryBuilder.AppendFormat(" and d.device_mode in(1,2,3) group by nat.details) t ");
        //                break;
        //            case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
        //                strQueryBuilder.AppendFormat("select count(*) as 'Total' from ( ");
        //                strQueryBuilder.AppendFormat(" select nat.details,count(distinct (d.device_id)) as  'total' from node_audit_trail nat,device_master d,ou_device od where category_type = 11 and ");
        //                strQueryBuilder.AppendFormat(" ( nat.details like '%usb%' ) and nat.details not like 'cddrive%' and d.device_id = nat.device_id ");
        //                strQueryBuilder.AppendFormat(" and d.device_id=od.device_id and od.status=1 and d.status not in (-1, 90) and d.active = 1 ");
        //                strQueryBuilder.AppendFormat(" and d.device_mode in(1,2,3) group by nat.details) t ");
        //                break;
        //        }
        //        String strQuery = strQueryBuilder.ToString();
        //        objcommon.WriteLog("DBQueryHandler", "Get_USBStoargeCount Query : " + strQuery);
        //        result = this.database.getIntValue(strQuery);
        //    }
        //    catch (Exception ex)
        //    {
        //        objcommon.WriteLog("DBQueryHandler", "Get_USBStoargeCount Exception : " + ex.Message.ToString());
        //    }
        //    return result;
        //}

        // Multiple LAN Card on PC
        public int Get_LANCardCount()
        {
            StringBuilder strQueryBuilder = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQueryBuilder.AppendFormat("select count(*) as 'Count' from ( ");
                        strQueryBuilder.AppendFormat(" select d.device_id,count(d.details) as 'Total Number Of Card' ");
                        strQueryBuilder.AppendFormat(" from node_networkcard_info  d,device_master m where d.device_id = m.device_id and m.status not in (-1, 90) ");
                        strQueryBuilder.AppendFormat(" and m.agent_enabled = 1 group by d.device_id having  count(distinct(d.details)) > 1 )t");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat("select count(*) as 'Count' from ( ");
                        strQueryBuilder.AppendFormat(" select d.device_id,count(d.details) as 'Total Number Of Card' ");
                        strQueryBuilder.AppendFormat(" from node_networkcard_info  d,device_master m where d.device_id = m.device_id and m.status not in (-1, 90) ");
                        strQueryBuilder.AppendFormat(" and m.agent_enabled = 1 group by d.device_id having  count(distinct(d.details)) > 1 )t");
                        break;
                }
                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "Get_LANCardCount Query : " + strQuery);
                result = this.database.getIntValue(strQuery);
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_LANCardCount Exception : " + ex.Message.ToString());
            }
            return result;
        }
        // WIFI on PC
        //public int Get_WIFICount()
        //{
        //    StringBuilder strQueryBuilder = new StringBuilder();
        //    int result = 0;
        //    try
        //    {
        //        switch (dbtype)
        //        {
        //            case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
        //                strQueryBuilder.AppendFormat("select distinct count(*) as 'Total' from e122appliedpolicymaster ap,device_master d,ou_device od ");
        //                strQueryBuilder.AppendFormat(" where ruletype=1  and  param1 in (12) and param2=0 and d.device_id = ap.deviceid  ");
        //                strQueryBuilder.AppendFormat(" and d.device_id=od.device_id and od.status=1 and d.status not in (-1, 90) and d.active = 1 ");
        //                strQueryBuilder.AppendFormat(" and d.device_mode in(1,2,3)");
        //                break;
        //            case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
        //                strQueryBuilder.AppendFormat("select distinct count(*) as 'Total' from e122appliedpolicymaster ap,device_master d,ou_device od ");
        //                strQueryBuilder.AppendFormat(" where ruletype=1  and  param1 in (12) and param2=0 and d.device_id = ap.deviceid  ");
        //                strQueryBuilder.AppendFormat(" and d.device_id=od.device_id and od.status=1 and d.status not in (-1, 90) and d.active = 1 ");
        //                strQueryBuilder.AppendFormat(" and d.device_mode in(1,2,3)");
        //                break;
        //        }

        //        String strQuery = strQueryBuilder.ToString();
        //        objcommon.WriteLog("DBQueryHandler", "Get_WIFICount Query : " + strQuery);
        //        result = this.database.getIntValue(strQuery);
        //    }
        //    catch (Exception ex)
        //    {
        //        objcommon.WriteLog("DBQueryHandler", "Get_WIFICount Exception : " + ex.Message.ToString());
        //    }
        //    return result;
        //}
        // Printers on PC
        //public int Get_PrinterCount()
        //{
        //    StringBuilder strQueryBuilder = new StringBuilder();
        //    int result = 0;
        //    try
        //    {
        //        switch (dbtype)
        //        {
        //            case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
        //                strQueryBuilder.AppendFormat("select distinct count(*) as 'Total' from node_hardware_info NH,device_master d,ou_device od where hardware_class = 'Printer' ");
        //                strQueryBuilder.AppendFormat(" and d.device_id=NH.device_id and d.device_id = od.device_id and od.status = 1 ");
        //                strQueryBuilder.AppendFormat(" and d.status not in (-1,90) and d.active=1 and d.device_mode in (1, 2, 3) ");
        //                break;
        //            case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
        //                strQueryBuilder.AppendFormat("select distinct count(*) as 'Total' from node_hardware_info NH,device_master d,ou_device od where hardware_class = 'Printer' ");
        //                strQueryBuilder.AppendFormat(" and d.device_id=NH.device_id and d.device_id = od.device_id and od.status = 1 ");
        //                strQueryBuilder.AppendFormat(" and d.status not in (-1,90) and d.active=1 and d.device_mode in (1, 2, 3) ");
        //                break;
        //        }

        //        String strQuery = strQueryBuilder.ToString();
        //        objcommon.WriteLog("DBQueryHandler", "Get_PrinterCount Query : " + strQuery);
        //        result = this.database.getIntValue(strQuery);
        //    }
        //    catch (Exception ex)
        //    {
        //        objcommon.WriteLog("DBQueryHandler", "Get_PrinterCount Exception : " + ex.Message.ToString());
        //    }
        //    return result;
        //}
        // Shared on PC
        //public int Get_SharedCount()
        //{
        //    StringBuilder strQueryBuilder = new StringBuilder();
        //    int result = 0;
        //    try
        //    {
        //        switch (dbtype)
        //        {
        //            case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
        //                strQueryBuilder.AppendFormat("select distinct count(*) as 'Total' from e122appliedpolicymaster APM ,device_master d,ou_device od ");
        //                strQueryBuilder.AppendFormat(" where  ruletype=11  and  param3=1 and d.device_id = APM.deviceid  ");
        //                strQueryBuilder.AppendFormat(" and d.device_id=od.device_id and od.status=1 and d.status not in (-1, 90) and d.active = 1 ");
        //                strQueryBuilder.AppendFormat(" and d.device_mode in(1,2,3) ");
        //                break;
        //            case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
        //                strQueryBuilder.AppendFormat("select distinct count(*) as 'Total' from e122appliedpolicymaster APM ,device_master d,ou_device od ");
        //                strQueryBuilder.AppendFormat(" where  ruletype=11  and  param3=1 and d.device_id = APM.deviceid  ");
        //                strQueryBuilder.AppendFormat(" and d.device_id=od.device_id and od.status=1 and d.status not in (-1, 90) and d.active = 1 ");
        //                strQueryBuilder.AppendFormat(" and d.device_mode in(1,2,3) ");
        //                break;
        //        }

        //        String strQuery = strQueryBuilder.ToString();
        //        objcommon.WriteLog("DBQueryHandler", "Get_SharedCount Query : " + strQuery);
        //        result = this.database.getIntValue(strQuery);
        //    }
        //    catch (Exception ex)
        //    {
        //        objcommon.WriteLog("DBQueryHandler", "Get_SharedCount Exception : " + ex.Message.ToString());
        //    }
        //    return result;
        //}
        // Windows Firewall OFF on PC
        //public int Get_FirewallOFFCount()
        //{
        //    StringBuilder strQueryBuilder = new StringBuilder();
        //    int result = 0;
        //    try
        //    {
        //        switch (dbtype)
        //        {
        //            case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
        //                strQueryBuilder.AppendFormat("select distinct count(*) as 'Total' from e103dtlsystemsecurity DS ,device_master d,ou_device od ");
        //                strQueryBuilder.AppendFormat(" where e103firewall=0 and d.device_id = DS.e103deviceid ");
        //                strQueryBuilder.AppendFormat(" and d.device_id=od.device_id and od.status=1 and d.status not in (-1, 90) and d.active = 1 ");
        //                strQueryBuilder.AppendFormat(" and d.device_mode in(1,2,3) ");
        //                break;
        //            case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
        //                strQueryBuilder.AppendFormat("select distinct count(*) as 'Total' from e103dtlsystemsecurity DS ,device_master d,ou_device od ");
        //                strQueryBuilder.AppendFormat(" where e103firewall=0 and d.device_id = DS.e103deviceid ");
        //                strQueryBuilder.AppendFormat(" and d.device_id=od.device_id and od.status=1 and d.status not in (-1, 90) and d.active = 1 ");
        //                strQueryBuilder.AppendFormat(" and d.device_mode in(1,2,3) ");
        //                break;
        //        }

        //        String strQuery = strQueryBuilder.ToString();
        //        objcommon.WriteLog("DBQueryHandler", "Get_FirewallOFFCount Query : " + strQuery);
        //        result = this.database.getIntValue(strQuery);
        //    }
        //    catch (Exception ex)
        //    {
        //        objcommon.WriteLog("DBQueryHandler", "Get_FirewallOFFCount Exception : " + ex.Message.ToString());
        //    }
        //    return result;
        //}

        // Device List 
        //public DataTable Get_DeviceDataList()
        //{
        //    StringBuilder strQueryBuilder = new StringBuilder();
        //    try
        //    {
        //        switch (dbtype)
        //        {
        //            case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
        //            case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
        //                strQueryBuilder.AppendFormat("select device_id,Virtual_Name,device_name  as ActualName,status,case status when 1 then '/images/running.gif' when 2 then '/images/warning.gif' ");
        //                strQueryBuilder.AppendFormat(" when 3 then '/images/down.gif' end ImagesStatus,ip as IPAddress,mac, mode,timestamp as Performance,client_version as clientVersion, ou_id, OU_nodelinkage_LongName as OUName, login_user as LoginUser, ");
        //                strQueryBuilder.AppendFormat(" os from (select t1.device_id, Virtual_Name, upper(device_name) as device_name,case when diff < 8 then 1 when diff< 61 then 2 else 3 end as status,ip,mac, ");
        //                strQueryBuilder.AppendFormat(" device_mode as mode,  device_timestamp as timestamp,client_version,ou_id,login_user,os from ( ");
        //                strQueryBuilder.AppendFormat(" Select device_master.device_id,upper(virtual_name) as Virtual_Name, upper(device_name) as device_name,ip,mac,device_mode,client_version, ou_id from device_master, ou_device where  device_master.device_id = ou_device.device_id  and ou_device.status = 1 ");
        //                strQueryBuilder.AppendFormat(" and active=1 and device_mode in (2,1,3)  and device_master.status not in (-1,99) )t1 left outer join ");
        //                strQueryBuilder.AppendFormat(" (select device_Timestamp, last_poll_time, diff, login_user, A.device_id, os from ");
        //                strQueryBuilder.AppendFormat(" ( select distinct max(convert(varchar,last_poll_time,104)+' '+ convert(varchar,last_poll_time,108)) as device_Timestamp,last_poll_time, DATEDIFF(DAY, last_poll_time, GETDATE()) as diff, dd.device_id, du.login_user ");
        //                strQueryBuilder.AppendFormat(" from device_master dd left outer join node_user_info  du on dd.device_id=du.device_id   group by last_poll_time,DATEDIFF(DAY,last_poll_time,GETDATE()),dd.device_id,  du.login_user ");
        //                strQueryBuilder.AppendFormat(" )A left outer join node_general_info I on A.device_id=I.device_id )t2 on t1.device_id = t2.device_id )A left outer join ou_nodelinkage B on A.OU_ID = B.OU_nodelinkage_OUID   order by status asc");
        //                break;
        //        }
        //        objcommon.WriteLog("DBQueryHandler", "Get_DeviceDataList Query : " + strQueryBuilder);
        //        data_table = this.database.getDataTable(strQueryBuilder.ToString());

        //    }
        //    catch (Exception ex)
        //    {
        //        objcommon.WriteLog("DBQueryHandler", "Get_DeviceDataList Exception : " + ex.Message.ToString());
        //    }
        //    return data_table;
        //}
        public DataTable Get_DeviceDataList(string search, string StatusCond)
        {
            StringBuilder strQueryBuilder = new StringBuilder();
            string strQuery = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        //strQueryBuilder.AppendFormat("select device_id,device_name,status, ");
                        //strQueryBuilder.AppendFormat(" ip, mac, last_poll_time, client_version, ou_id, ou_longname, ");
                        //strQueryBuilder.AppendFormat(" login_user,os  from (select distinct dm.device_id,upper(dl.device_name) as device_name, dm.status, dm.ip, dm.client_version, nu.login_user, dm.mac, ");
                        //strQueryBuilder.AppendFormat(" dl.ou_id,dl.ou_longname,isnull((convert(varchar,nu.last_poll_time,105) + ' ' + convert(varchar,nu.last_poll_time,108)),'') as last_poll_time,");
                        //strQueryBuilder.AppendFormat(" isnull((select  top 1 parameter_value from node_system_info_details nsd where nsd.type_id=8 and nsd.parameter_name='caption' and nsd.device_id=dm.device_id),'') + ' ' + ");
                        //strQueryBuilder.AppendFormat(" isnull((select top 1 parameter_value from node_system_info_details nsd where nsd.type_id=8 and nsd.parameter_name='OSArchitecture' and nsd.device_id=dm.device_id),'')  as os  from device_master dm inner join device_linkage dl on dm.device_id=dl.device_id ");
                        //strQueryBuilder.AppendFormat(" left outer join node_user_info nu on dl.device_id=nu.device_id  left outer join node_system_info_details nsd on dm.device_id=nsd.device_id ");
                        //strQueryBuilder.AppendFormat(" where dl.status<>-1 and dm.active = 1 and dm.device_mode in (1,2,3) and dm.status not in (-1,90) {0})t order by status", search);

                        //strQueryBuilder.AppendFormat("select device_id,device_name,status, ");
                        //strQueryBuilder.AppendFormat(" ip, mac, last_poll_time, client_version, ou_id, ou_longname,login_user, ");
                        //strQueryBuilder.AppendFormat(" case when len(os) < 5 then (select top 1 replace(replace(replace(json,'/`TYPE/`:/`9/`,/`SUBTYPE/`:/`1/`,/`PRODUCTNAME/`:',''),'/`',''),'','') as OS from node_system_info nsg where data_type=9 and data_subtype=1 and nsg.device_id=t.device_id) else os end as os");
                        //strQueryBuilder.AppendFormat(" from (select distinct dm.device_id,upper(dl.device_name) as device_name, dm.status, dm.ip, dm.client_version, nu.login_user, dm.mac, ");
                        //strQueryBuilder.AppendFormat(" dl.ou_id,dl.ou_longname,isnull((convert(varchar,nu.last_poll_time,105) + ' ' + convert(varchar,nu.last_poll_time,108)),'') as last_poll_time,");
                        //strQueryBuilder.AppendFormat(" isnull((select  top 1 parameter_value from node_system_info_details nsd where nsd.type_id=8 and nsd.parameter_name='caption' and nsd.device_id=dm.device_id),'') + ' ' + ");
                        //strQueryBuilder.AppendFormat(" isnull((select top 1 parameter_value from node_system_info_details nsd where nsd.type_id=8 and nsd.parameter_name='OSArchitecture' and nsd.device_id=dm.device_id),'')  as os  from device_master dm inner join device_linkage dl on dm.device_id=dl.device_id ");
                        //strQueryBuilder.AppendFormat(" left outer join node_user_info nu on dl.device_id=nu.device_id  left outer join node_system_info_details nsd on dm.device_id=nsd.device_id ");
                        //strQueryBuilder.AppendFormat(" where dl.status<>-1 and dm.active = 1 and dm.device_mode in (1,2,3) and dm.status not in (-1,90) {0})t order by status", search);

                        //strQueryBuilder.AppendFormat("select device_id,device_name,status, ");
                        //strQueryBuilder.AppendFormat(" ip, mac, last_poll_time, client_version, ou_id, ou_longname,login_user, ");
                        //strQueryBuilder.AppendFormat(" case when len(os) < 5 then (select top 1 replace(replace(replace(json,'/`TYPE/`:/`9/`,/`SUBTYPE/`:/`1/`,/`PRODUCTNAME/`:',''),'/`',''),'','') as OS from node_system_info nsg where data_type=9 and data_subtype=1 and nsg.device_id=t.device_id) else os end as os");
                        //strQueryBuilder.AppendFormat(" from (select distinct dl.device_id,upper(dl.device_name) as device_name, dl.status, dl.ip, dl.device_client_version as client_version, nu.login_user, dl.device_mac as mac, ");
                        //strQueryBuilder.AppendFormat(" dl.ou_id,dl.ou_longname,isnull((convert(varchar,nu.last_poll_time,105) + ' ' + convert(varchar,nu.last_poll_time,108)),'') as last_poll_time,");
                        //strQueryBuilder.AppendFormat(" isnull((select  top 1 parameter_value from node_system_info_details nsd where nsd.type_id=8 and nsd.parameter_name='caption' and nsd.device_id=dl.device_id),'') + ' ' + ");
                        //strQueryBuilder.AppendFormat(" isnull((select top 1 parameter_value from node_system_info_details nsd where nsd.type_id=8 and nsd.parameter_name='OSArchitecture' and nsd.device_id=dl.device_id),'')  as os  from device_linkage dl ");
                        //strQueryBuilder.AppendFormat(" left outer join node_user_info nu on dl.device_id=nu.device_id  left outer join node_system_info_details nsd on dl.device_id=nsd.device_id ");
                        //strQueryBuilder.AppendFormat(" where dl.status<>-1 and dl.device_active = 1 and dl.device_mode in (1,2,3) and dl.status not in (-1,90) {0})t order by status", search);

                        //strQueryBuilder.AppendFormat("select device_id,device_name,status, ");
                        //strQueryBuilder.AppendFormat(" ip, mac, last_poll_time, client_version, ou_id, ou_longname,login_user, ");
                        //strQueryBuilder.AppendFormat(" case when len(os) < 5 then (select top 1 replace(replace(replace(json,'/`TYPE/`:/`9/`,/`SUBTYPE/`:/`1/`,/`PRODUCTNAME/`:',''),'/`',''),'','') as OS from node_system_info nsg where data_type=9 and data_subtype=1 and nsg.device_id=t.device_id) else os end as os");
                        //strQueryBuilder.AppendFormat(" from (select distinct dl.device_id,upper(dl.device_name) as device_name, case when dl.status=0 then case when CONVERT(date, getdate(),103) < device_timestamp then 10 else dl.status end else dl.status end as status, dl.ip, dl.device_client_version as client_version, nu.login_user, dl.device_mac as mac, ");
                        //strQueryBuilder.AppendFormat(" dl.ou_id,dl.ou_longname,isnull((convert(varchar,nu.last_poll_time,105) + ' ' + convert(varchar,nu.last_poll_time,108)),'') as last_poll_time,");
                        //strQueryBuilder.AppendFormat(" isnull((select  top 1 parameter_value from node_system_info_details nsd where nsd.type_id=8 and nsd.parameter_name='caption' and nsd.device_id=dl.device_id),'') + ' ' + ");
                        //strQueryBuilder.AppendFormat(" isnull((select top 1 parameter_value from node_system_info_details nsd where nsd.type_id=8 and nsd.parameter_name='OSArchitecture' and nsd.device_id=dl.device_id),'')  as os  from device_linkage dl ");
                        //strQueryBuilder.AppendFormat(" left outer join node_user_info nu on dl.device_id=nu.device_id  left outer join node_system_info_details nsd on dl.device_id=nsd.device_id ");
                        //strQueryBuilder.AppendFormat(" where dl.status<>-1 and dl.device_active = 1 and dl.device_mode in (1,2,3) and dl.status not in (-1,90) {0})t order by status", search);

                        //strQueryBuilder.AppendFormat("select device_id,device_name,status, ");
                        //strQueryBuilder.AppendFormat(" ip, mac, last_poll_time, client_version, ou_id, ou_longname,login_user, ");
                        //strQueryBuilder.AppendFormat(" case when len(os) < 5 then (select top 1 replace(replace(replace(json,'/`TYPE/`:/`9/`,/`SUBTYPE/`:/`1/`,/`PRODUCTNAME/`:',''),'/`',''),'','') as OS from node_system_info nsg where data_type=9 and data_subtype=1 and nsg.device_id=t.device_id) else os end as os");
                        //strQueryBuilder.AppendFormat(" from (select distinct dl.device_id,upper(dl.device_name) as device_name, case when dl.status=0 then case when CONVERT(date, getdate(),103) < device_timestamp then 10 else dl.status end else dl.status end as status, dl.ip, dl.device_client_version as client_version, nu.login_user,  ");
                        //strQueryBuilder.AppendFormat(" (select top 1 parameter_value from node_system_info_details where device_id=dl.device_id and type_id=1 and subtype_id=3  and parameter_name='MACADDRESS')  as mac,");
                        //strQueryBuilder.AppendFormat(" dl.ou_id,dl.ou_longname,isnull((convert(varchar,nu.last_poll_time,105) + ' ' + convert(varchar,nu.last_poll_time,108)),'') as last_poll_time,");
                        //strQueryBuilder.AppendFormat(" isnull((select  top 1 parameter_value from node_system_info_details nsd where nsd.type_id=8 and nsd.parameter_name='caption' and nsd.device_id=dl.device_id),'') + ' ' + ");
                        //strQueryBuilder.AppendFormat(" isnull((select top 1 parameter_value from node_system_info_details nsd where nsd.type_id=8 and nsd.parameter_name='OSArchitecture' and nsd.device_id=dl.device_id),'')  as os  from device_linkage dl ");
                        //strQueryBuilder.AppendFormat(" left outer join node_user_info nu on dl.device_id=nu.device_id  left outer join node_system_info_details nsd on dl.device_id=nsd.device_id ");
                        //strQueryBuilder.AppendFormat(" where dl.status<>-1 and dl.device_active = 1 and dl.device_mode in (1,2,3) and dl.status not in (-1,90) {0})t order by status", search);

                        //strQueryBuilder.AppendFormat("select device_id,device_name,status, ");
                        //strQueryBuilder.AppendFormat(" ip, mac, last_poll_time, client_version, ou_id, ou_longname,login_user, ");
                        //strQueryBuilder.AppendFormat(" case when len(os) < 5 then (select top 1 replace(replace(replace(json,'/`TYPE/`:/`9/`,/`SUBTYPE/`:/`1/`,/`PRODUCTNAME/`:',''),'/`',''),'','') as OS from node_system_info nsg where data_type=9 and data_subtype=1 and nsg.device_id=t.device_id) else os end as os");
                        //strQueryBuilder.AppendFormat(" from (select distinct dl.device_id,upper(dl.device_name) as device_name, case when dl.status=0 then case when CONVERT(date, getdate(),103) < device_timestamp then 10 else dl.status end else dl.status end as status, dl.ip, dl.device_client_version as client_version, nu.login_user,  ");
                        ////strQueryBuilder.AppendFormat(" (select top 1 parameter_value from node_system_info_details where device_id=dl.device_id and type_id=1 and subtype_id=3  and parameter_name='MACADDRESS')  as mac,");
                        //strQueryBuilder.AppendFormat(" dl.device_mac as mac,");
                        //strQueryBuilder.AppendFormat(" dl.ou_id,dl.ou_longname,isnull((convert(varchar,nu.last_poll_time,105) + ' ' + convert(varchar,nu.last_poll_time,108)),'') as last_poll_time,");
                        //strQueryBuilder.AppendFormat(" isnull((select  top 1 parameter_value from node_system_info_details nsd where nsd.type_id=8 and nsd.parameter_name='caption' and nsd.device_id=dl.device_id),'') + ' ' + ");
                        //strQueryBuilder.AppendFormat(" isnull((select top 1 parameter_value from node_system_info_details nsd where nsd.type_id=8 and nsd.parameter_name='OSArchitecture' and nsd.device_id=dl.device_id),'')  as os  from device_linkage dl ");
                        //strQueryBuilder.AppendFormat(" left outer join node_user_info nu on dl.device_id=nu.device_id  left outer join node_system_info_details nsd on dl.device_id=nsd.device_id ");
                        //strQueryBuilder.AppendFormat(" where dl.status<>-1 and dl.device_active = 1 and dl.device_mode in (1,2,3) and dl.status not in (-1,90) {0})t order by status", search);



                        //strQuery="select device_id,device_name,status, ";
                        //strQuery = strQuery+" ip, mac, last_poll_time, client_version, ou_id, ou_longname,login_user, ";
                        //strQuery = strQuery + " case when len(os) < 5 then (select top 1 replace(replace(replace(json,'{/`UNIQUEID/`:/`'+cast(nsg.unique_id as varchar)+'/`,/`TYPE/`:/`9/`,/`SUBTYPE/`:/`1/`,/`DEVICEID/`:/`'+cast(nsg.device_id as varchar)+'/`,/`PRODUCTNAME/`:/`',''),'/`}',''),'','') as OS from node_system_info nsg where data_type=9 and data_subtype=1 and nsg.device_id=t.device_id) else os end as os";
                        //strQuery = strQuery + " from (select distinct dl.device_id,upper(dl.device_name) as device_name, case when dl.status=0 then case when CONVERT(date, getdate(),103) < device_timestamp then 10 else dl.status end else dl.status end as status, dl.ip, dl.device_client_version as client_version, nu.login_user,  ";

                        //strQuery = strQuery + " dl.device_mac as mac,";
                        //strQuery = strQuery + " dl.ou_id,dl.ou_longname,isnull((convert(varchar,nu.last_poll_time,105) + ' ' + convert(varchar,nu.last_poll_time,108)),'') as last_poll_time,";
                        //strQuery = strQuery + " isnull((select  top 1 parameter_value from node_system_info_details nsd where nsd.type_id=8 and nsd.parameter_name='caption' and nsd.device_id=dl.device_id),'') + ' ' + ";
                        //strQuery = strQuery + " isnull((select top 1 parameter_value from node_system_info_details nsd where nsd.type_id=8 and nsd.parameter_name='OSArchitecture' and nsd.device_id=dl.device_id),'')  as os  from device_linkage dl ";
                        //strQuery = strQuery + " left outer join node_user_info nu on dl.device_id=nu.device_id  left outer join node_system_info_details nsd on dl.device_id=nsd.device_id ";
                        //strQuery = strQuery + " where dl.status<>-1 and dl.device_active = 1 and dl.device_mode in (1,2,3) and dl.status not in (-1,90) "+ search + ")t order by status";

                        //strQuery = "select device_id,device_name,status, ";
                        //strQuery = strQuery + " ip, mac, last_poll_time, client_version, ou_id, ou_longname,login_user, ";
                        //strQuery = strQuery + " case when len(os) < 5 then (select top 1 replace(replace(replace(json,'{/`UNIQUEID/`:/`'+cast(nsg.unique_id as varchar)+'/`,/`TYPE/`:/`9/`,/`SUBTYPE/`:/`1/`,/`DEVICEID/`:/`'+cast(nsg.device_id as varchar)+'/`,/`PRODUCTNAME/`:/`',''),'/`}',''),'','') as OS from node_system_info nsg where data_type=9 and data_subtype=1 and nsg.device_id=t.device_id) else os end as os";
                        //strQuery = strQuery + " from (select distinct dl.device_id,upper(dl.device_name) as device_name, case when dl.status=0 then case when CONVERT(date, getdate(),103) < device_timestamp then 10 else dl.status end else dl.status end as status, dl.ip, dl.device_client_version as client_version, nu.login_user,  ";
                        //strQuery = strQuery + " dl.device_mac as mac,";
                        //strQuery = strQuery + " dl.ou_id,dl.ou_longname,isnull((convert(varchar,nu.last_poll_time,105) + ' ' + convert(varchar,nu.last_poll_time,108)),'') as last_poll_time,";
                        //strQuery = strQuery + " isnull((select  top 1 parameter_value from node_system_info_details nsd where nsd.type_id=8 and nsd.parameter_name='caption' and nsd.device_id=dl.device_id),'') + ' ' + ";
                        //strQuery = strQuery + " isnull((select top 1 parameter_value from node_system_info_details nsd where nsd.type_id=8 and nsd.parameter_name='OSArchitecture' and nsd.device_id=dl.device_id),'')  as os  from device_linkage dl ";
                        //strQuery = strQuery + " left outer join node_user_info nu on dl.device_id=nu.device_id  left outer join node_system_info_details nsd on dl.device_id=nsd.device_id ";
                        //strQuery = strQuery + " where dl.status<>-1 and dl.device_active = 1 and dl.device_mode in (1,2,3) and dl.status not in (-1,90) " + search + ")t " + StatusCond + " order by status";

                        //strQuery = "select device_id,device_name,status, ";
                        //strQuery = strQuery + " ip, mac, last_poll_time, client_version, ou_id, ou_longname,login_user, ";
                        //strQuery = strQuery + " case when len(os) < 5 then (select top 1 replace(replace(replace(json,'{/`UNIQUEID/`:/`'+cast(nsg.unique_id as varchar)+'/`,/`TYPE/`:/`9/`,/`SUBTYPE/`:/`1/`,/`DEVICEID/`:/`'+cast(nsg.device_id as varchar)+'/`,/`PRODUCTNAME/`:/`',''),'/`}',''),'','') as OS from node_system_info nsg where data_type=9 and data_subtype=1 and nsg.device_id=t.device_id) else os end as os";
                        //strQuery = strQuery + " from (select distinct dl.device_id,upper(dl.device_name) as device_name, case when dl.status=0 then case when CONVERT(date, getdate(),103) < device_timestamp then 10 else dl.status end else dl.status end as status, dl.ip, dl.device_client_version as client_version, nu.login_user,  ";
                        //strQuery = strQuery + " (select top 1 data1 from node_system_info where data_type=1 and data_subtype=3 and device_id=dl.device_id) as mac,";
                        //strQuery = strQuery + " dl.ou_id,dl.ou_longname,isnull((convert(varchar,nu.last_poll_time,105) + ' ' + convert(varchar,nu.last_poll_time,108)),'') as last_poll_time,";
                        //strQuery = strQuery + " isnull((select  top 1 parameter_value from node_system_info_details nsd where nsd.type_id=8 and nsd.parameter_name='caption' and nsd.device_id=dl.device_id),'') + ' ' + ";
                        //strQuery = strQuery + " isnull((select top 1 parameter_value from node_system_info_details nsd where nsd.type_id=8 and nsd.parameter_name='OSArchitecture' and nsd.device_id=dl.device_id),'')  as os  from device_linkage dl ";
                        //strQuery = strQuery + " left outer join node_user_info nu on dl.device_id=nu.device_id  left outer join node_system_info_details nsd on dl.device_id=nsd.device_id ";
                        //strQuery = strQuery + " where dl.status<>-1 and dl.device_active = 1 and dl.device_mode in (1,2,3) and dl.status not in (-1,90) " + search + ")t " + StatusCond + " order by status";

                        strQuery = "select device_id,device_name,status, ";
                        strQuery = strQuery + " ip, mac, last_poll_time, client_version, ou_id, ou_longname,login_user, ";
                        strQuery = strQuery + " case when len(os) < 5 then (select top 1 replace(replace(replace(json,'{/`UNIQUEID/`:/`'+cast(nsg.unique_id as varchar)+'/`,/`TYPE/`:/`9/`,/`SUBTYPE/`:/`1/`,/`DEVICEID/`:/`'+cast(nsg.device_id as varchar)+'/`,/`PRODUCTNAME/`:/`',''),'/`}',''),'','') as OS from node_system_info nsg where data_type=9 and data_subtype=1 and nsg.device_id=t.device_id) else os end as os";
                        strQuery = strQuery + " from (select distinct dl.device_id,upper(dl.device_name) as device_name, case when dl.status=0 then case when CONVERT(date, getdate(),103) < device_timestamp then 10 else dl.status end else dl.status end as status, dl.ip, dl.device_client_version as client_version, nu.login_user,  ";
                        strQuery = strQuery + " nu.mac_address as mac,";
                        strQuery = strQuery + " dl.ou_id,dl.ou_longname,isnull((convert(varchar,nu.last_poll_time,105) + ' ' + convert(varchar,nu.last_poll_time,108)),'') as last_poll_time,";
                        strQuery = strQuery + " isnull((select  top 1 parameter_value from node_system_info_details nsd where nsd.type_id=8 and nsd.parameter_name='caption' and nsd.device_id=dl.device_id),'') + ' ' + ";
                        strQuery = strQuery + " isnull((select top 1 parameter_value from node_system_info_details nsd where nsd.type_id=8 and nsd.parameter_name='OSArchitecture' and nsd.device_id=dl.device_id),'')  as os  from device_linkage dl ";
                        strQuery = strQuery + " left outer join node_user_info nu on dl.device_id=nu.device_id  left outer join node_system_info_details nsd on dl.device_id=nsd.device_id ";
                        strQuery = strQuery + " where dl.status<>-1 and dl.device_active = 1 and dl.device_mode in (1,2,3) and dl.status not in (-1,90) " + search + ")t " + StatusCond + " order by status";

                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat("select device_id,device_name,status, ");
                        strQueryBuilder.AppendFormat(" ip, mac, last_poll_time, client_version, ou_id, ou_longname, ");
                        strQueryBuilder.AppendFormat(" login_user,os  from (select distinct dm.device_id,upper(dl.device_name) as device_name, dm.status, dm.ip, dm.device_client_version as client_version, nu.login_user, dl.device_mac as mac, ");
                        strQueryBuilder.AppendFormat(" dl.ou_id,dl.ou_longname,ifnull(cast(date_format(nu.last_poll_time,'%d-%m-%Y %H:%i:%s') as char),'') as last_poll_time,");
                        strQueryBuilder.AppendFormat(" concat(ifnull((select  top 1 parameter_value from node_system_info_details nsd where nsd.type_id=8 and nsd.parameter_name='caption' and nsd.device_id=dm.device_id limit 1),'') , ' ' ,");
                        strQueryBuilder.AppendFormat(" ifnull((select top 1 parameter_value from node_system_info_details nsd where nsd.type_id=8 and nsd.parameter_name='OSArchitecture' and nsd.device_id=dm.device_id limit 1),''))  as os  from device_master dm inner join device_linkage dl on dm.device_id=dl.device_id ");
                        strQueryBuilder.AppendFormat(" left outer join node_user_info nu on dl.device_id=nu.device_id left outer join node_system_info_details nsd on dm.device_id=nsd.device_id");
                        strQueryBuilder.AppendFormat(" where dl.status<>-1 and dm.active = 1 and dm.device_mode in (1,2,3) and dm.status not in (-1,90) {0})t order by status", search);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_DeviceDataList Query : " + strQueryBuilder);
                //data_table = this.database.getDataTable(strQueryBuilder.ToString());
                data_table = this.database.getDataTable(strQuery);
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_DeviceDataList Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        // Get OU List
        public DataTable Get_OUList(string strSearch, string strUserID)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("exec getOU '" + strSearch + "','" + strUserID + "'");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" call getOU ('" + strSearch + "','" + strUserID + "')");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_OUList Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_OUList Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public string Get_Child_OUList(string OUID)
        {
            StringBuilder strQueryBuilder = new StringBuilder();
            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQueryBuilder.AppendFormat("select ou_nodelinkage_allchild from ou_nodelinkage where ou_nodelinkage_ouid=" + OUID);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat("select ou_nodelinkage_allchild from ou_nodelinkage where ou_nodelinkage_ouid=" + OUID);
                        break;
                }
                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "Get_Child_OUList Query : " + strQuery);
                result = this.database.getValue(strQuery);
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Child_OUList Exception : " + ex.Message.ToString());
            }
            return result;
        }
        //public DataTable Get_DeviceForAllOU(string OUIDCond)
        //{
        //    StringBuilder strQuery = new StringBuilder();
        //    try
        //    {
        //        switch (dbtype)
        //        {
        //            case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
        //                strQuery.AppendFormat(" select distinct ou_nodelinkage_ouid as group_id,ou_nodelinkage_Longname as group_name ");
        //                strQuery.AppendFormat(" from ou_nodelinkage, ou_device where ou_nodelinkage_active<>0 {0} and ou_nodelinkage_ouid = ou_id and ou_device.status=1 order by ou_nodelinkage_longname ", OUIDCond);
        //                break;
        //            case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
        //                strQuery.AppendFormat(" select distinct ou_nodelinkage_ouid as group_id,ou_nodelinkage_Longname as group_name ");
        //                strQuery.AppendFormat(" from ou_nodelinkage, ou_device where ou_nodelinkage_active<>0 {0} and ou_nodelinkage_ouid = ou_id and ou_device.status=1 order by ou_nodelinkage_longname ", OUIDCond);
        //                break;
        //        }
        //        objcommon.WriteLog("DBQueryHandler", "Get_DeviceForAllOU Query : " + strQuery.ToString());
        //        data_table = this.database.getDataTable(strQuery.ToString());
        //    }
        //    catch (Exception ex)
        //    {
        //        objcommon.WriteLog("DBQueryHandler", "Get_DeviceForAllOU Exception : " + ex.Message.ToString());
        //    }
        //    return data_table;
        //}
        public DataTable Get_Devicedetails(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select ip,mac,devicename,status,os,os_type as Type,convert(varchar,t.Install_date,105) + ' '+convert(varchar,t.Install_date,108) as OS_Install_date,t.device_id,");
                        strQuery.AppendFormat(" case cd_key when 'NA' then '' else cd_key end as cd_key,login_user,isNull(cpu_usage, '0') as cpu_usage,isNull((total_ram-free_ram)*100/total_ram, '0') as ram,convert(varchar,nu.last_poll_time,105) + ' ' + convert(varchar,nu.last_poll_time,108) as last_poll_time");
                        strQuery.AppendFormat(" from( select dm.device_id,ip,mac,isnull(device_name,virtual_name) as devicename, case dm.status when 1 then 'Up' when 0 then 'Down' when 2 then 'Warning' when 3 then 'Presently Not Linked' end as status, ");
                        strQuery.AppendFormat(" (select top 1 parameter_value from node_system_info_details nsd where  type_id= 8 and nsd.parameter_name ='caption' and device_id=nsd.device_id and device_id = {0}) as os,", deviceid);
                        strQuery.AppendFormat(" (select top 1 parameter_value from node_system_info_details nsd where type_id= 8 and nsd.parameter_name ='OSArchitecture' and device_id=nsd.device_id and device_id={0}) as os_type,", deviceid);
                        strQuery.AppendFormat(" (select top 1 data1 from node_system_info ns where data_type = 9 and data_subtype = 3 and device_id = ns.device_id and device_id = {0}) as cd_key,", deviceid);
                        strQuery.AppendFormat(" (select top 1 cast(left(cast(convert(bigint,floor(substring(parameter_value,0,case charindex('+',parameter_value,0) when 0 then charindex('-',parameter_value,0) else charindex('+',parameter_value,0) end))) as char(14)), 8) as datetime) + cast(stuff(stuff(right(cast(convert(bigint,floor(substring(parameter_value,0,case charindex('+',parameter_value,0) when 0 then charindex('-',parameter_value,0) else charindex('+',parameter_value,0) end))) as char(14)), 6), 5, 0, ':'), 3, 0, ':') as datetime) ");
                        strQuery.AppendFormat(" from node_system_info_details nsd  where type_id= 8 and nsd.parameter_name ='InstallDate'  and device_id=nsd.device_id and device_id={0} ) as Install_date ", deviceid);
                        strQuery.AppendFormat(" from device_master dm where dm.device_id={0} and dm.status not in (-1,99) )T left outer join node_user_info nu on T.device_id=nu.device_id where T.device_id = {0}", deviceid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select ip,mac,devicename,status,os,os_type as Type,cast(date_format(os_installation_date, '%d-%m-%Y %H:%i:%s') as char) as os_installation_date, case cd_key when 'NA' then '' else cd_key end as cd_key, login_user,ifNull(cpu_usage, '0') as cpu_usage,ifNull((total_ram-free_ram)*100/total_ram, '0') as ram,");
                        strQuery.AppendFormat(" cast(date_format(nu.last_poll_time, '%d-%m-%Y %H:%i:%s') as char) as last_poll_time from (");
                        strQuery.AppendFormat(" select dm.device_id, ip, mac, ifnull(device_name, virtual_name) as devicename,");
                        strQuery.AppendFormat(" case dm.status when 1 then 'Up' when 0 then 'Down' when 2 then 'Warning' when 3 then 'Presently Not Linked' end as status,");
                        strQuery.AppendFormat(" (select data1 from node_system_info ns where data_type = 8 and data_subtype = 1 and device_id = ns.device_id and device_id = {0} limit 1) as os,", deviceid);
                        strQuery.AppendFormat(" (select data1 from node_system_info ns where data_type = 8 and data_subtype = 2 and device_id = ns.device_id and device_id = {0} limit 1) as os_type,", deviceid);
                        strQuery.AppendFormat(" (select data1 from node_system_info ns where data_type = 9 and data_subtype = 3 and device_id = ns.device_id and device_id = {0} limit 1) as cd_key,", deviceid);
                        strQuery.AppendFormat(" (select concat( cast( substring(cast(left(cast(cast(floor(substring(data1,1,case locate('+',data1) when 0 then locate('-',data1) else locate('+',data1) end)) as SIGNED) as char(14)), 8) as datetime),1,10) as char), ' ' , 	cast(insert(insert(right(cast(cast(floor(substring(data1,1,case locate('+',data1) when 0 then locate('-',data1) else locate('+',data1) end)) as SIGNED) as char(14)), 6), 5, 0, ':'), 3, 0, ':') as char)) from node_system_info ns  where data_type = 8 and data_subtype = 3  and device_id = ns.device_id and device_id = {0} limit 1) as os_installation_date", deviceid);
                        strQuery.AppendFormat(" from device_master dm where dm.device_id = {0} and dm.status not in (-1, 99)", deviceid);
                        strQuery.AppendFormat(" )t left outer join node_user_info nu on t.device_id = nu.device_id where t.device_id = {0}", deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Devicedetails Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Devicedetails Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_systemdrp_list(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select 'MAC' as report_display_name,1.5 as report_priority,device_id from node_system_info_details where device_id={0} and type_id=1 and subtype_id=3 and parameter_name='MACADDRESS' ", deviceid);
                        strQuery.AppendFormat("union select 'Current Login User' as report_display_name,1.6 as report_priority,device_id  from node_user_info where device_id={0} ", deviceid);
                        strQuery.AppendFormat("union select 'Last Poll Time' as report_display_name,2.1 as report_priority,device_id  from node_user_info where device_id={0} ", deviceid);
                        strQuery.AppendFormat("union select 'Product Key' as report_display_name,10.5 as report_priority,device_id from node_system_info_details where device_id={0} and type_id=9 and subtype_id=3 and parameter_name='PRODUCTCDKEY' ", deviceid);
                        strQuery.AppendFormat("union select distinct nsr.report_display_name,nsr.report_priority,nsd.device_id from node_system_report_list nsr,node_system_info_details nsd where type_id = 8 and nsr.report_field_name=nsd.parameter_name and nsd.device_id = {0} order by report_priority ", deviceid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select 'MAC' as report_display_name,1.5 as report_priority,device_id from node_system_info_details where device_id={0} and type_id=1 and subtype_id=3 and parameter_name='MACADDRESS' ", deviceid);
                        strQuery.AppendFormat("union select 'Current Login User' as report_display_name,1.6 as report_priority,device_id  from node_user_info where device_id={0} ", deviceid);
                        strQuery.AppendFormat("union select 'Last Poll Time' as report_display_name,2.1 as report_priority,device_id  from node_user_info where device_id={0} ", deviceid);
                        strQuery.AppendFormat("union select 'Product Key' as report_display_name,10.5 as report_priority,device_id from node_system_info_details where device_id={0} and type_id=9 and subtype_id=3 and parameter_name='PRODUCTCDKEY' ", deviceid);
                        strQuery.AppendFormat("union select distinct nsr.report_display_name,nsr.report_priority,nsd.device_id from node_system_report_list nsr,node_system_info_details nsd where type_id = 8 and nsr.report_field_name=nsd.parameter_name and nsd.device_id = {0} order by report_priority ", deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_systemdetails_list Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_systemdetails_list Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_systempcdetails_list(string deviceid, string optionvalue)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select 'MAC' as report_display_name,1.5 as report_priority,'' as parameter_name,parameter_value,device_id from node_system_info_details where device_id={0} and type_id=1 and subtype_id=3 and parameter_name='MACADDRESS' ", deviceid);
                        strQuery.AppendFormat("union select 'Current Login User' as report_display_name,1.6 as report_priority,'' as parameter_name,login_user as parameter_value,device_id  from node_user_info where device_id={0} ", deviceid);
                        strQuery.AppendFormat("union select 'Last StartUp Time' as report_display_name, 2.1 as report_priority,'LastBootUpTime' as parameter_name, convert(varchar,t.lastbootuptime,105) + ' '+convert(varchar,t.lastbootuptime,108) as parameter_value,t.device_id from (select top 1 device_id, (cast(left(cast(convert(bigint,floor(substring(parameter_value,0, case charindex('+',parameter_value,0)");
                        strQuery.AppendFormat("when 0 then charindex('-',parameter_value,0)  else charindex('+',parameter_value,0) end))) as char(14)), 8) as datetime) +   cast(stuff(stuff(right(cast(convert(bigint,floor(substring(parameter_value,0,case charindex('+',parameter_value,0) ");
                        strQuery.AppendFormat("when 0 then charindex('-',parameter_value,0) else charindex('+',parameter_value,0) end))) as char(14)), 6), 5, 0, ':'), 3, 0, ':') as datetime) ) as lastbootuptime from node_system_info_details nsd  where type_id=8 and device_id={0} AND parameter_name = 'LastBootUpTime') t ", deviceid);
                        strQuery.AppendFormat("union select 'Last Poll Time' as report_display_name,2.2 as report_priority,'' as parameter_name,convert(varchar,last_poll_time,105) + ' '+convert(varchar,last_poll_time,108) as parameter_value,device_id  from node_user_info where device_id={0} ", deviceid);
                        strQuery.AppendFormat("union select distinct nsr.report_display_name,nsr.report_priority,nsd.parameter_name,nsd.parameter_value,nsd.device_id from node_system_report_list nsr,node_system_info_details nsd where nsd.type_id = 8 and nsr.report_field_name=nsd.parameter_name  and nsd.device_id = {0} and nsr.report_priority in ({1}) and nsr.report_subtype= 7  and nsr.report_priority != 2.0  order by report_priority ", deviceid, optionvalue);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select 'MAC' as report_display_name,1.5 as report_priority,'' as parameter_name,parameter_value,device_id from node_system_info_details where device_id={0} and type_id=1 and subtype_id=3 and parameter_name='MACADDRESS' ", deviceid);
                        strQuery.AppendFormat("union select 'Current Login User' as report_display_name,1.6 as report_priority,'' as parameter_name,login_user as parameter_value,device_id  from node_user_info where device_id={0} ", deviceid);
                        strQuery.AppendFormat("union select 'Last StartUp Time' as report_display_name, 2.1 as report_priority,'LastBootUpTime' as parameter_name, cast(date_format(parameter_value, '%d-%m-%Y %H:%i:%s') as char) as parameter_value,t.device_id from (select concat( cast( substring(cast(left(cast(cast(floor(substring(parameter_value,1,locate('+',parameter_value))) as SIGNED) as char(14)), 8) as datetime),1,10) as char), ' ' ");
                        strQuery.AppendFormat(", cast(insert(insert(right(cast(cast(floor(substring(parameter_value,1,locate('+',parameter_value))) as SIGNED) as char(14)), 6), 5, 0, ':'), 3, 0, ':') as char)) ");
                        strQuery.AppendFormat(" from node_system_info_details nsd  where type_id= 8 and device_id={0} AND parameter_name = 'LastBootUpTime') t ", deviceid);
                        strQuery.AppendFormat("union select 'Last Poll Time' as report_display_name,2.2 as report_priority,'' as parameter_name,cast(date_format(last_poll_time, '%d-%m-%Y %H:%i:%s') as char) as parameter_value,device_id  from node_user_info where device_id={0} ", deviceid);
                        strQuery.AppendFormat(" select distinct nsr.report_display_name,nsr.report_priority,nsd.parameter_name,nsd.parameter_value,nsd.device_id from node_system_report_list nsr,node_system_info_details nsd where nsd.type_id = 8 and nsr.report_field_name=nsd.parameter_name  and nsd.device_id = {0} and nsr.report_priority in ({1})  and nsr.report_subtype= 7  order by report_priority ", deviceid, optionvalue);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_systemdetails_list Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_systemdetails_list Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_systemdetails_list(string deviceid, string optionvalue)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        //strQuery.AppendFormat(" select 'MAC' as report_display_name,9.1 as report_priority,'' as parameter_name,parameter_value,device_id from node_system_info_details where device_id={0} and type_id=1 and subtype_id=3 and parameter_name='MACADDRESS'", deviceid);
                        //strQuery.AppendFormat(" union select 'Current Login User' as report_display_name,9.2 as report_priority,'' as parameter_name,login_user as parameter_value,device_id  from node_user_info where device_id={0}", deviceid);
                        //strQuery.AppendFormat("  union select 'OS Install Date' as report_display_name, 11.1 as report_priority,'InstallDate' as parameter_name, convert(varchar,t.Install_date,105) + ' '+convert(varchar,t.Install_date,108) as parameter_value,");
                        //strQuery.AppendFormat(" t.device_id from (select top 1 device_id, (cast(left(cast(convert(bigint,floor(substring(parameter_value,0, case charindex('+', parameter_value, 0) when 0 then charindex('-',parameter_value,0) else charindex('+', parameter_value, 0) end))) as char(14)), 8) as datetime)");
                        //strQuery.AppendFormat("  +  cast(stuff(stuff(right(cast(convert(bigint, floor(substring(parameter_value, 0,case charindex('+', parameter_value, 0) when 0 then charindex('-',parameter_value,0) else charindex('+', parameter_value, 0) end))) as char(14)), 6), 5, 0, ':'), 3, 0, ':') as datetime) ) as Install_date  from node_system_info_details nsd  where type_id=8 and device_id={0} AND parameter_name = 'InstallDate') t ", deviceid);
                        //strQuery.AppendFormat(" union select distinct nsr.report_display_name,nsr.report_priority,nsd.parameter_name,nsd.parameter_value,nsd.device_id from node_system_report_list nsr,node_system_info_details nsd where nsd.type_id = 8 and nsr.report_field_name=nsd.parameter_name  and nsd.device_id = {0}  and nsr.report_priority in ({1}) and nsr.report_subtype= 8 and nsr.report_priority != 10.0 order by report_priority  ", deviceid, optionvalue);

                        //strQuery.AppendFormat(" select 'MAC' as report_display_name,9.1 as report_priority,'' as parameter_name,device_mac as parameter_value,device_id  from device_linkage where device_id={0}", deviceid);
                        //strQuery.AppendFormat(" union select 'Current Login User' as report_display_name,9.2 as report_priority,'' as parameter_name,login_user as parameter_value,device_id  from node_user_info where device_id={0}", deviceid);
                        //strQuery.AppendFormat("  union select 'OS Install Date' as report_display_name, 11.1 as report_priority,'InstallDate' as parameter_name, convert(varchar,t.Install_date,105) + ' '+convert(varchar,t.Install_date,108) as parameter_value,");
                        //strQuery.AppendFormat(" t.device_id from (select top 1 device_id, (cast(left(cast(convert(bigint,floor(substring(parameter_value,0, case charindex('+', parameter_value, 0) when 0 then charindex('-',parameter_value,0) else charindex('+', parameter_value, 0) end))) as char(14)), 8) as datetime)");
                        //strQuery.AppendFormat("  +  cast(stuff(stuff(right(cast(convert(bigint, floor(substring(parameter_value, 0,case charindex('+', parameter_value, 0) when 0 then charindex('-',parameter_value,0) else charindex('+', parameter_value, 0) end))) as char(14)), 6), 5, 0, ':'), 3, 0, ':') as datetime) ) as Install_date  from node_system_info_details nsd  where type_id=8 and device_id={0} AND parameter_name = 'InstallDate') t ", deviceid);
                        //strQuery.AppendFormat(" union select distinct nsr.report_display_name,nsr.report_priority,nsd.parameter_name,nsd.parameter_value,nsd.device_id from node_system_report_list nsr,node_system_info_details nsd where nsd.type_id = 8 and nsr.report_field_name=nsd.parameter_name  and nsd.device_id = {0}  and nsr.report_priority in ({1}) and nsr.report_subtype= 8 and nsr.report_priority != 10.0 order by report_priority  ", deviceid, optionvalue);

                        //strQuery.AppendFormat(" select top 1 'MAC' as report_display_name,9.1 as report_priority,'' as parameter_name,data1 as parameter_value,device_id   from node_system_info where data_type=1 and data_subtype=3 and device_id={0}", deviceid);
                        //strQuery.AppendFormat(" union select 'Current Login User' as report_display_name,9.2 as report_priority,'' as parameter_name,login_user as parameter_value,device_id  from node_user_info where device_id={0}", deviceid);
                        //strQuery.AppendFormat("  union select 'OS Install Date' as report_display_name, 11.1 as report_priority,'InstallDate' as parameter_name, convert(varchar,t.Install_date,105) + ' '+convert(varchar,t.Install_date,108) as parameter_value,");
                        //strQuery.AppendFormat(" t.device_id from (select top 1 device_id, (cast(left(cast(convert(bigint,floor(substring(parameter_value,0, case charindex('+', parameter_value, 0) when 0 then charindex('-',parameter_value,0) else charindex('+', parameter_value, 0) end))) as char(14)), 8) as datetime)");
                        //strQuery.AppendFormat("  +  cast(stuff(stuff(right(cast(convert(bigint, floor(substring(parameter_value, 0,case charindex('+', parameter_value, 0) when 0 then charindex('-',parameter_value,0) else charindex('+', parameter_value, 0) end))) as char(14)), 6), 5, 0, ':'), 3, 0, ':') as datetime) ) as Install_date  from node_system_info_details nsd  where type_id=8 and device_id={0} AND parameter_name = 'InstallDate') t ", deviceid);
                        //strQuery.AppendFormat(" union select distinct nsr.report_display_name,nsr.report_priority,nsd.parameter_name,nsd.parameter_value,nsd.device_id from node_system_report_list nsr,node_system_info_details nsd where nsd.type_id = 8 and nsr.report_field_name=nsd.parameter_name  and nsd.device_id = {0}  and nsr.report_priority in ({1}) and nsr.report_subtype= 8 and nsr.report_priority != 10.0 order by report_priority  ", deviceid, optionvalue);

                        strQuery.AppendFormat(" select top 1 'MAC' as report_display_name,9.1 as report_priority,'' as parameter_name,mac_address as parameter_value,device_id   from node_user_info where device_id={0}", deviceid);
                        strQuery.AppendFormat(" union select 'Current Login User' as report_display_name,9.2 as report_priority,'' as parameter_name,login_user as parameter_value,device_id  from node_user_info where device_id={0}", deviceid);
                        strQuery.AppendFormat("  union select 'OS Install Date' as report_display_name, 11.1 as report_priority,'InstallDate' as parameter_name, convert(varchar,t.Install_date,105) + ' '+convert(varchar,t.Install_date,108) as parameter_value,");
                        strQuery.AppendFormat(" t.device_id from (select top 1 device_id, (cast(left(cast(convert(bigint,floor(substring(parameter_value,0, case charindex('+', parameter_value, 0) when 0 then charindex('-',parameter_value,0) else charindex('+', parameter_value, 0) end))) as char(14)), 8) as datetime)");
                        strQuery.AppendFormat("  +  cast(stuff(stuff(right(cast(convert(bigint, floor(substring(parameter_value, 0,case charindex('+', parameter_value, 0) when 0 then charindex('-',parameter_value,0) else charindex('+', parameter_value, 0) end))) as char(14)), 6), 5, 0, ':'), 3, 0, ':') as datetime) ) as Install_date  from node_system_info_details nsd  where type_id=8 and device_id={0} AND parameter_name = 'InstallDate') t ", deviceid);
                        strQuery.AppendFormat(" union select distinct nsr.report_display_name,nsr.report_priority,nsd.parameter_name,nsd.parameter_value,nsd.device_id from node_system_report_list nsr,node_system_info_details nsd where nsd.type_id = 8 and nsr.report_field_name=nsd.parameter_name  and nsd.device_id = {0}  and nsr.report_priority in ({1}) and nsr.report_subtype= 8 and nsr.report_priority != 10.0 order by report_priority  ", deviceid, optionvalue);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select 'MAC' as report_display_name,9.1 as report_priority,'' as parameter_name,parameter_value,device_id from node_system_info_details where device_id={0} and type_id=1 and subtype_id=3 and parameter_name='MACADDRESS'", deviceid);
                        strQuery.AppendFormat(" union select 'Current Login User' as report_display_name,9.2 as report_priority,'' as parameter_name,login_user as parameter_value,device_id  from node_user_info where device_id={0}", deviceid);
                        strQuery.AppendFormat(" union select 'OS Install Date' as report_display_name, 10.1 as report_priority,'InstallDate' as parameter_name, cast(date_format(os_installation_date, '%d-%m-%Y %H:%i:%s') as char)  as parameter_value,t.device_id from ");
                        strQuery.AppendFormat("( (select concat( cast( substring(cast(left(cast(cast(floor(substring(parameter_value,1,locate('+',parameter_value))) as SIGNED) as char(14)), 8) as datetime),1,10) as char), ' ' ");
                        strQuery.AppendFormat(" , cast(insert(insert(right(cast(cast(floor(substring(parameter_value,1,locate('+',parameter_value))) as SIGNED) as char(14)), 6), 5, 0, ':'), 3, 0, ':') as char))  as Install_date ");
                        strQuery.AppendFormat(" from node_system_info_details nsd  where type_id=8 and device_id={0} AND parameter_name = 'InstallDate') t ", deviceid);
                        strQuery.AppendFormat(" union select distinct nsr.report_display_name,nsr.report_priority,nsd.parameter_name,nsd.parameter_value,nsd.device_id from node_system_report_list nsr,node_system_info_details nsd where nsd.type_id = 8 and nsr.report_field_name=nsd.parameter_name  and nsd.device_id = {0}  and nsr.report_priority in ({1}) and nsr.report_subtype= 8  order by report_priority ", deviceid, optionvalue);
                        break;
                        //strQuery.AppendFormat(" select 'Product Key' as report_display_name,10.5 as report_priority,'' as parameter_name,parameter_value,device_id from node_system_info_details where device_id={0} and type_id=9 and subtype_id=3 and parameter_name='PRODUCTCDKEY' ", deviceid);
                        //strQuery.AppendFormat(" union select 'OS Install Date' as report_display_name, 10.1 as report_priority,'InstallDate' as parameter_name, convert(varchar,t.Install_date,105) + ' '+convert(varchar,t.Install_date,108) as parameter_value,t.device_id from (select top 1 device_id, (cast(left(cast(convert(bigint,floor(substring(parameter_value,0,");
                        //strQuery.AppendFormat(" case charindex('+', parameter_value, 0) when 0 then charindex('-',parameter_value,0) else charindex('+', parameter_value, 0) end))) as char(14)), 8) as datetime) + ");
                        //strQuery.AppendFormat(" cast(stuff(stuff(right(cast(convert(bigint, floor(substring(parameter_value, 0,case charindex('+', parameter_value, 0) when 0 then charindex('-',parameter_value,0) else charindex('+', parameter_value, 0) end))) as char(14)), 6), 5, 0, ':'), 3, 0, ':') as datetime) ) as Install_date ");
                        //strQuery.AppendFormat(" from node_system_info_details nsd  where type_id=8 and device_id={0} AND parameter_name = 'InstallDate') t ",deviceid);
                        //strQuery.AppendFormat(" union select distinct nsr.report_display_name,nsr.report_priority,nsd.parameter_name,nsd.parameter_value,nsd.device_id from node_system_report_list nsr,node_system_info_details nsd where nsd.type_id = 8 and nsr.report_field_name=nsd.parameter_name  and nsd.device_id = {0}  and nsr.report_priority in ({1}) and nsr.report_subtype= 8 and nsr.report_priority != 10.0 order by report_priority ", deviceid, optionvalue);
                        //break;
                        //case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        //    strQuery.AppendFormat(" select 'Product Key' as report_display_name,10.5 as report_priority,'' as parameter_name,parameter_value,device_id from node_system_info_details where device_id={0} and type_id=9 and subtype_id=3 and parameter_name='PRODUCTCDKEY' ", deviceid);
                        //    strQuery.AppendFormat(" union select 'OS Install Date' as report_display_name, 10.1 as report_priority,'InstallDate' as parameter_name, cast(date_format(os_installation_date, '%d-%m-%Y %H:%i:%s') as char)  as parameter_value,t.device_id from ");
                        //    strQuery.AppendFormat("( (select concat( cast( substring(cast(left(cast(cast(floor(substring(parameter_value,1,locate('+',parameter_value))) as SIGNED) as char(14)), 8) as datetime),1,10) as char), ' ' ");
                        //    strQuery.AppendFormat(" , cast(insert(insert(right(cast(cast(floor(substring(parameter_value,1,locate('+',parameter_value))) as SIGNED) as char(14)), 6), 5, 0, ':'), 3, 0, ':') as char))  as Install_date ");
                        //    strQuery.AppendFormat(" from node_system_info_details nsd  where type_id=8 and device_id={0} AND parameter_name = 'InstallDate') t ", deviceid);
                        //    strQuery.AppendFormat(" union select distinct nsr.report_display_name,nsr.report_priority,nsd.parameter_name,nsd.parameter_value,nsd.device_id from node_system_report_list nsr,node_system_info_details nsd where nsd.type_id = 8 and nsr.report_field_name=nsd.parameter_name  and nsd.device_id = {0}  and nsr.report_priority in ({1}) and nsr.report_subtype= 8  order by report_priority ", deviceid, optionvalue);
                        //    break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_systemdetails_list Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_systemdetails_list Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public int Get_drivedetails(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        //strQuery.AppendFormat(" select sum(free)*100/sum(total) as Drivedata from node_drive_info where ");
                        //strQuery.AppendFormat(" device_id={0} and (drive_type='Hard Drive' or drive_type='Hard Disk' or drive_type='HDD')  group by device_id order by Drivedata desc ", deviceid);
                        strQuery.AppendFormat(" select UseHdd*100/totalhdd as Usehdd from( select sum(total/1024/1024/1024)-sum(free/1024/1024/1024) as UseHdd,sum(total/1024/1024/1024) as totalhdd from node_drive_info where ");
                        strQuery.AppendFormat(" device_id={0}  and drive_type='Fixed hard disk media' and logical=12  group by device_id  )T ", deviceid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select UseHdd*100 div totalhdd as Usehdd from( select sum(total div (1024*1024*1024))-sum(free div (1024*1024*1024)) as UseHdd,sum(total div (1024*1024*1024)) as totalhdd from node_drive_info where  ");
                        strQuery.AppendFormat(" device_id={0}  and drive_type='Fixed hard disk media' and logical=12  group by device_id  )T ", deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_drivedetails Query : " + strQuery.ToString());
                result = this.database.getIntValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_drivedetails Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public DataTable Get_DiskUtilization(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        //strQuery.AppendFormat(" select drive_id as Drive,total as 'Total (GB)',free as 'Free (GB)',total-free as 'Used (GB)',(total-free)*100/total as [Used %] from( ");
                        //strQuery.AppendFormat(" select distinct drive_id,total/1024 as total,free/1024 as free from node_drive_info where device_id={0} and (drive_type='Hard Drive' or drive_type='Hard Disk' or drive_type='HDD') and logical=1)T where (total > 0 or free > 0) ", deviceid);
                        strQuery.AppendFormat(" select drive_id as Drive,total as 'Total (GB)',free as 'Free (GB)',total-free as 'Used (GB)',(total-free)*100/total as [Used %] from( ");
                        strQuery.AppendFormat(" select distinct drive_id,total/1024/1024/1024 as total,free/1024/1024/1024 as free from node_drive_info where device_id={0} and logical=12)T where (total>0 or free>0) order by drive_id", deviceid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select drive_id as Drive,total as 'Total (GB)',free as 'Free (GB)',total-free as 'Used (GB)',(total-free)*100 div total as 'Used %' from(  ");
                        strQuery.AppendFormat(" select distinct drive_id,total div (1024*1024*1024) as total,free div (1024*1024*1024) as free from node_drive_info where device_id={0} and logical=12)T where (total>0 or free>0) order by drive_id", deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_DiskUtilization Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_DiskUtilization Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public string Get_ProcessorName(string DeviceID)
        {
            StringBuilder strQueryBuilder = new StringBuilder();
            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQueryBuilder.AppendFormat("select distinct details as Details from node_hardware_info t1  where device_id = {0}", DeviceID);
                        strQueryBuilder.AppendFormat(" and UPPER(hardware_class) = 'PROCESSOR' and(slot_connector not Like '%USB%' or slot_connector is null)");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat("select distinct details as Details from node_hardware_info t1  where device_id = {0}", DeviceID);
                        strQueryBuilder.AppendFormat(" and UPPER(hardware_class) = 'PROCESSOR' and(slot_connector not Like '%USB%' or slot_connector is null)");
                        break;
                }
                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "Get_ProcessorName Query : " + strQuery);
                result = this.database.getValue(strQuery);
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_ProcessorName Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public string Get_HDDCapacity(string DeviceID)
        {
            StringBuilder strQueryBuilder = new StringBuilder();
            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQueryBuilder.AppendFormat("select isnull(sum(distinct (disk_size/1024/1024/1024)),0) as 'HDD' from node_drive_info where device_id = {0}", DeviceID);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat("select  cast(ifnull(sum(distinct(disk_size/1024/1024/1024)),0) as UNSIGNED) as 'HDD' from node_drive_info where device_id = {0}", DeviceID);
                        break;
                }
                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "Get_HDDCapacity Query : " + strQuery);
                result = this.database.getValue(strQuery);
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_HDDCapacity Exception : " + ex.Message.ToString());
            }
            return result;
        }

        public int Get_RAMSize(string DeviceID)
        {
            StringBuilder strQueryBuilder = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        //strQueryBuilder.AppendFormat("select top 1 isnull(cast(capacity as bigint)/1024/1024/1024,'0') as Capacity from node_hardware_info where hardware_class='PhysicalMemory' and device_id = {0}", DeviceID);
                        strQueryBuilder.AppendFormat("select top 1 isnull(sum(cast(capacity as bigint)/1024/1024/1024),'0') as Capacity from node_hardware_info where hardware_class='PhysicalMemory' and device_id = {0}", DeviceID);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        //strQueryBuilder.AppendFormat("select sum(cast(replace(capacity,'NA',0) as int))/1024 as Capacity from node_hardware_info where hardware_type='RAM' and device_id = {0}", DeviceID);
                        strQueryBuilder.AppendFormat("select ifnull(sum(cast(capacity as char) div (1024*1024*1024)),'0') as Capacity from node_hardware_info where hardware_class='PhysicalMemory' and device_id = {0} limit 1", DeviceID);
                        break;
                }
                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "Get_RAMSize Query : " + strQuery);
                result = this.database.getIntValue(strQuery);
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_RAMSize Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public string Get_DeviceMode(string DeviceID)
        {
            StringBuilder strQueryBuilder = new StringBuilder();
            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQueryBuilder.AppendFormat("select device_type as Type from device_master where device_id = {0}", DeviceID);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat("select device_type as Type from device_master where device_id = {0}", DeviceID);
                        break;
                }
                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "Get_DeviceMode Query : " + strQuery);
                result = this.database.getValue(strQuery);
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_DeviceMode Exception : " + ex.Message.ToString());
            }
            return result;
        }

        public int Get_hardware_Total(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select count(distinct details) as  'hardware'  from node_hardware_info where device_id={0}", deviceid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select count(distinct details) as  'hardware'  from node_hardware_info where device_id={0}", deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_hardware_Total Query : " + strQuery.ToString());
                result = this.database.getIntValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_hardware_Total Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int Get_Software_Total(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select count(*) as 'software' from nodesoftwaredetails where deviceid={0} and software <> '0' ", deviceid);
                        //strQuery.AppendFormat(" select count(distinct software) as 'software' from nodesoftwaredetails where deviceid={0} and software <> '0' ", deviceid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select count(*) as 'software' from nodesoftwaredetails where deviceid={0} and software <> '0' ", deviceid);
                        //strQuery.AppendFormat(" select count(distinct software) as 'software' from nodesoftwaredetails where deviceid={0} and software <> '0' ", deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Software_Total Query : " + strQuery.ToString());
                result = this.database.getIntValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Software_Total Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int Get_Lancard_Total(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select count(*) as 'Lancard' from node_networkcard_info where connection_id <> '0' and device_id={0}", deviceid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        //strQuery.AppendFormat(" select count(distinct details) as 'Lancard' from node_hardware_info where hardware_class='Network'  and details like '%Network Adapter%' and device_id={0}", deviceid);
                        strQuery.AppendFormat(" select count(*) as 'Lancard' from node_networkcard_info where connection_id <> '0' and device_id={0}", deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Lancard_Total Query : " + strQuery.ToString());
                result = this.database.getIntValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Lancard_Total Exception : " + ex.Message.ToString());
            }
            return result;
        }
        #endregion

        //  Asset Management -  Device List - Hardware Menu
        public DataTable Get_Asset_hardwareMenu(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select distinct device_id,case REPLACE(hardware_class, ' ', '') when 'Motherboard' then case details when 'Physical Memory' then 'RAM' else hardware_class end when 'Motherboard/Port' then REPLACE(hardware_class, '/', '_') ");
                        strQuery.AppendFormat(" when 'Port/MotherBoard' then REPLACE(hardware_class, '/', '_') ");
                        strQuery.AppendFormat("  else REPLACE(hardware_class, ' ', '') end as Name  from node_hardware_info where device_id={0}", deviceid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:

                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Asset_hardwareMenu Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Asset_hardwareMenu Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        //  Asset Management -  Device List - Hardware Menu Data 
        public DataTable Get_Asset_hardwareDeviceDataRAM(string strfield, string deviceid, string HWClass, string strConnect)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" Select distinct case details when 'Physical Memory' then 'RAM' end as Details,isnull(manufacture,'NA') as Manufacture,case when status=1 then 'Enabled' else 'disabled' end as Status, " + strfield + " from node_hardware_info t1 ");
                        strQuery.AppendFormat(" where  device_id='" + deviceid + "' and UPPER(hardware_class)='" + HWClass + "' and details='Physical Memory' and " + strConnect + "");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:

                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Asset_hardwareDeviceDataRAM Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Asset_hardwareDeviceDataRAM Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_Asset_hardwareDeviceData(string strfield, string deviceid, string HWClass, string strConnect)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" Select distinct details as Details,isnull(manufacture,'NA') as Manufacture,case when status=1 then 'Enabled' else 'disabled' end as Status, " + strfield + " from node_hardware_info t1 ");
                        strQuery.AppendFormat(" where  device_id='" + deviceid + "' and UPPER(hardware_class)='" + HWClass + "' and " + strConnect + "");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:

                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Asset_hardwareDeviceData Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Asset_hardwareDeviceData Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        //  Asset Management -  Device List - Software Menu Data
        public DataTable Get_Softwaredetails(string deviceid, string software)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select distinct ltrim(rtrim(software)) as software,version,publisher,date,location,source,uninstallstring   from device_master dm , node_software_info ni ,device_linkage dl where  dm.device_id=dl.device_id and dm.device_id = ni.device_id ");
                        strQuery.AppendFormat(" and dl.status <> -1 and dm.device_id={0} and software='{1}'  and ou_id in (select distinct ou_userroll_ou_id from ou_userroll where ou_userroll_user_id = 1) order by software ", deviceid, software);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:

                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Softwaredetails Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Softwaredetails Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        //public DataTable Get_Userdata(string deviceid)
        //{
        //    StringBuilder strQuery = new StringBuilder();
        //    try
        //    {
        //        switch (dbtype)
        //        {
        //            case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
        //                strQuery.AppendFormat(" select username,count(ug.username) as total from  device_master dm,User_table ug, ou_Device od, ou_nodelinkage onl  where dm.device_id = od.device_id and dm.device_id = ug.device_id and od.ou_id = onl.ou_nodelinkage_ouid ");
        //                strQuery.AppendFormat(" and dm.status not in(-1,90)  and od.status<>0 and agent_enabled=1 and active=1 and  dm.device_type  in ('Desktop','Laptop') and ug.username in ('Administrator','Guest') and ug.device_id={0} group by username ", deviceid);
        //                break;
        //            case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
        //                break;
        //        }
        //        objcommon.WriteLog("DBQueryHandler", "Get_Userdata Query : " + strQuery.ToString());
        //        data_table = this.database.getDataTable(strQuery.ToString());
        //    }
        //    catch (Exception ex)
        //    {
        //        objcommon.WriteLog("DBQueryHandler", "Get_Userdata Exception : " + ex.Message.ToString());
        //    }
        //    return data_table;
        //}
        //public DataTable Get_Softwaredata(string deviceid)
        //{
        //    StringBuilder strQuery = new StringBuilder();
        //    try
        //    {
        //        switch (dbtype)
        //        {
        //            case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
        //                strQuery.AppendFormat(" select distinct dm.device_id,ltrim(rtrim(software)) as software,version,publisher,date   from device_master dm , ou_device od, node_software_info ni  where dm.device_id = od.device_id and dm.device_id = ni.device_id and od.status = 1  ");
        //                strQuery.AppendFormat(" and dm.status not in (-1,90) and  dm.device_mode in (1) and dm.device_id={0}  and ou_id in (select distinct ou_userroll_ou_id from ou_userroll where ou_userroll_user_id = 1) order by software ", deviceid);
        //                break;
        //            case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
        //                break;
        //        }
        //        objcommon.WriteLog("DBQueryHandler", "Get_Softwaredata Query : " + strQuery.ToString());
        //        data_table = this.database.getDataTable(strQuery.ToString());
        //    }
        //    catch (Exception ex)
        //    {
        //        objcommon.WriteLog("DBQueryHandler", "Get_Softwaredata Exception : " + ex.Message.ToString());
        //    }
        //    return data_table;
        //}

        public DataTable Get_System_utilization_Chart(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select cast(cast(hour1 as varchar)+':00' as varchar) as hours,cpu,ram,hdddisk,alert from(select hour1,sum(cpu) as cpu,sum(ram) as ram,sum(hdddisk) as hdddisk,sum(al) as alert from(select hour1,cpu/cnt as cpu,ram/cnt as ram,hdddisk/cnt as hdddisk,0 as al from(select distinct datepart(hour,nui.device_timestamp) as hour1,cpu_usage as cpu ,(total_ram-free_ram)*100/total_ram as ram, u.hdddisk,count(*) as cnt from (select device_id,UseHdd*100/totalhdd as hdddisk from( select device_id,sum(total/1024/1024/1024)-sum(free/1024/1024/1024) as UseHdd,sum(total/1024/1024/1024) as totalhdd from node_drive_info where drive_type='Fixed hard disk media' and logical=12  group by device_id  )T ) u left outer join node_user_info nui on nui.device_id = u.device_id where  nui.device_id='" + deviceid + "' and nui.device_timestamp between convert(varchar(10),getdate(),120) + ' 00:00:00' and getdate() group by datepart(hour,nui.device_timestamp),cpu_usage,(total_ram-free_ram)*100/total_ram,hdddisk)t");
                        strQuery.AppendFormat(" union all select datepart(hour, device_timestamp) as hours1,0 as cpu,0 as ram ,0 as hdddisk,count(*) as 'al' from node_audit_trail where device_id='" + deviceid + "' and category_type in (13,14) and category_subtype in (111,112,122) and device_timestamp between convert(varchar(10),getdate(),120) + ' 00:00:00' and getdate() group by datepart(hour, device_timestamp) union all select 0 as hours1,0 as cpu,0 as ram,0 as hdddisk,0 as alert union all select 1 as hours1,0 as cpu,0 as ram,0 as hdddisk,0 as alert union all select 2 as hours1,0 as cpu,0 as ram,0 as hdddisk,0 as alert union all select 3 as hours1,0 as cpu,0 as ram,0 as hdddisk,0 as alert union all select 4 as hours1,0 as cpu,0 as ram,0 as hdddisk,0 as alert union all select 5 as hours1,0 as cpu,0 as ram,0 as hdddisk,0 as alert union all select 6 as hours1,0 as cpu,0 as ram,0 as hdddisk,0 as alert union all select 7 as hours1,0 as cpu,0 as ram,0 as hdddisk,0 as alert  ");
                        strQuery.AppendFormat(" union all select 8 as hours1,0 as cpu,0 as ram,0 as hdddisk,0 as alert union all select 9 as hours1,0 as cpu,0 as ram,0 as hdddisk,0 as alert union all select 10 as hours1,0 as cpu,0 as ram,0 as hdddisk,0 as alert union all select 11 as hours1,0 as cpu,0 as ram,0 as hdddisk,0 as alert union all select 12 as hours1,0 as cpu,0 as ram,0 as hdddisk,0 as alert union all select 13 as hours1,0 as cpu,0 as ram,0 as hdddisk,0 as alert union all select 14 as hours1,0 as cpu,0 as ram,0 as hdddisk,0 as alert union all select 15 as hours1,0 as cpu,0 as ram,0 as hdddisk,0 as alert  union all select 16 as hours1,0 as cpu,0 as ram,0 as hdddisk,0 as alert union all select 17 as hours1,0 as cpu,0 as ram,0 as hdddisk,0 as alert union all select 18 as hours1,0 as cpu,0 as ram,0 as hdddisk,0 as alert union all select 19 as hours1,0 as cpu,0 as ram,0 as hdddisk,0 as alert union all select 20 as hours1,0 as cpu,0 as ram,0 as hdddisk,0 as alert union all select 21 as hours1,0 as cpu,0 as ram,0 as hdddisk,0 as alert union all select 22 as hours1,0 as cpu,0 as ram,0 as hdddisk,0 as alert union all select 23 as hours1,0 as cpu,0 as ram,0 as hdddisk,0 as alert) t group by hour1)t  ");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select cast(concat(hour1,':00') as char) as hours,cast(cpu as SIGNED) as cpu,cast(ram as SIGNED) as ram,cast(hdddisk as SIGNED) as hdddisk,cast(alert  as SIGNED) as alert from( select hour1,sum(cpu) as cpu,sum(ram) as ram,sum(hdddisk) as hdddisk,sum(al) as alert from (select hour1,cpu div cnt as cpu,ram div cnt as ram,hdddisk div cnt as hdddisk,0 as al from (select distinct DATE_FORMAT(nui.device_timestamp,'%H') as hour1,cpu_usage as cpu ,(total_ram-free_ram)*100 div total_ram as ram, u.hdddisk,count(*) as cnt from ( select device_id,UseHdd*100 div totalhdd as hdddisk from( select device_id,sum(total div 1024 div 1024 div 1024)-sum(free div 1024 div 1024 div 1024) as UseHdd,sum(total div 1024 div 1024 div 1024) as totalhdd from node_drive_info where drive_type='Fixed hard disk media' and logical=12 group by device_id  )T ) u left outer join node_user_info nui on nui.device_id = u.device_id where  nui.device_id='" + deviceid + "' and nui.device_timestamp between cast(date_format(now(),'%Y-%m-%d 00:00:00') as char) and now() group by DATE_FORMAT(nui.device_timestamp,'%H'),cpu_usage,(total_ram-free_ram)*100 div total_ram,hdddisk) t ");
                        strQuery.AppendFormat(" union all select DATE_FORMAT(device_timestamp,'%H') as hours1,0 as cpu,0 as ram ,0 as hdddisk, count(*) as 'al' from node_audit_trail where device_id='" + deviceid + "' and category_type in (13,14) and category_subtype in (111,112,122) and device_timestamp between cast(date_format(now(),'%Y-%m-%d 00:00:00') as char) and now()  group by DATE_FORMAT(device_timestamp,'%H') union all select 0 as hours1,0 as cpu,0 as ram ,0 as hdddisk ,0 as alert union all select 1 as hours1,0 as cpu,0 as ram ,0 as hdddisk,0 as alert union all select 2 as hours1,0 as cpu,0 as ram ,0 as hdddisk ,0 as alert union all select 3 as hours1,0 as cpu,0 as ram ,0 as hdddisk ,0 as alert union all select 4 as hours1,0 as cpu,0 as ram ,0 as hdddisk ,0 as alert union all select 5 as hours1,0 as cpu,0 as ram ,0 as hdddisk ,0 as alert union all select 6 as hours1,0 as cpu,0 as ram ,0 as hdddisk ,0 as alert union all select 7 as hours1,0 as cpu,0 as ram ,0 as hdddisk ,0 as alert  ");
                        strQuery.AppendFormat(" union all select 8 as hours1,0 as cpu,0 as ram ,0 as hdddisk ,0 as alert union all select 9 as hours1,0 as cpu,0 as ram ,0 as hdddisk ,0 as alert union all select 10 as hours1,0 as cpu,0 as ram ,0 as hdddisk ,0 as alert union all select 11 as hours1,0 as cpu,0 as ram ,0 as hdddisk ,0 as alert union all select 12 as hours1,0 as cpu,0 as ram ,0 as hdddisk ,0 as alert union all select 13 as hours1,0 as cpu,0 as ram ,0 as hdddisk ,0 as alert union all select 14 as hours1,0 as cpu,0 as ram ,0 as hdddisk ,0 as alert union all select 15 as hours1,0 as cpu,0 as ram ,0 as hdddisk ,0 as alert union all select 16 as hours1,0 as cpu,0 as ram ,0 as hdddisk ,0 as alert union all select 17 as hours1,0 as cpu,0 as ram ,0 as hdddisk ,0 as alert union all select 18 as hours1,0 as cpu,0 as ram ,0 as hdddisk ,0 as alert union all select 19 as hours1,0 as cpu,0 as ram ,0 as hdddisk ,0 as alert union all select 20 as hours1,0 as cpu,0 as ram ,0 as hdddisk ,0 as alert union all select 21 as hours1,0 as cpu,0 as ram ,0 as hdddisk ,0 as alert union all select 22 as hours1,0 as cpu,0 as ram ,0 as hdddisk ,0 as alert union all select 23 as hours1,0 as cpu,0 as ram ,0 as hdddisk ,0 as alert ) t group by hour1 )t order by cast(hour1 as signed) ");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_System_utilization_Chart Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_System_utilization_Chart Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_System_utilization_Chart_alert(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select cast(cast(hour1 as varchar)+':00' as varchar) as hours,cpu,ram,hdddisk from (select hour1,sum(cpu) as cpu,sum(ram) as ram,sum(hdddisk) as hdddisk from (select hour1,cpu,ram,hdddisk from (select datepart(hour, device_timestamp) as hour1,count(*) as cpu,0 as ram,0 as hdddisk from node_audit_trail where device_id='" + deviceid + "' and category_type = 13 and category_subtype = 111 and device_timestamp between convert(varchar(10),getdate(),120) + ' 00:00:00' and getdate() group by datepart(hour, device_timestamp) union all select datepart(hour, device_timestamp) as hour1,0 as cpu,count(*) as ram,0 as hdddisk from node_audit_trail where device_id='" + deviceid + "' and category_type = 13 and category_subtype = 112 and device_timestamp between convert(varchar(10),getdate(),120) + ' 00:00:00' and getdate() group by datepart(hour, device_timestamp) ");
                        strQuery.AppendFormat("union all select datepart(hour, device_timestamp) as hour1,0 as cpu,0 as ram,count(*) as hdddisk from node_audit_trail where device_id='" + deviceid + "' and category_type = 14 and category_subtype = 122 and device_timestamp between convert(varchar(10),getdate(),120) + ' 00:00:00' and getdate() group by datepart(hour, device_timestamp)) t union all select 0 as hout1,0 as cpu,0 as ram,0 as hdddisk union all select 1 as hout1,0 as cpu,0 as ram,0 as hdddisk union all select 2 as hout1,0 as cpu,0 as ram,0 as hdddisk union all select 3 as hout1,0 as cpu,0 as ram,0 as hdddisk union all select 4 as hout1,0 as cpu,0 as ram,0 as hdddisk union all select 5 as hout1,0 as cpu,0 as ram,0 as hdddisk union all select 6 as hout1,0 as cpu,0 as ram,0 as hdddisk union all select 7 as hout1,0 as cpu,0 as ram,0 as hdddisk ");
                        strQuery.AppendFormat("union all select 8 as hout1,0 as cpu,0 as ram,0 as hdddisk union all select 9 as hout1,0 as cpu,0 as ram,0 as hdddisk union all select 10 as hout1,0 as cpu,0 as ram,0 as hdddisk union all select 11 as hout1,0 as cpu,0 as ram,0 as hdddisk union all select 12 as hout1,0 as cpu,0 as ram,0 as hdddisk union all select 13 as hout1,0 as cpu,0 as ram,0 as hdddisk union all select 14 as hout1,0 as cpu,0 as ram,0 as hdddisk union all select 15 as hout1,0 as cpu,0 as ram,0 as hdddisk union all select 16 as hout1,0 as cpu,0 as ram,0 as hdddisk union all select 17 as hout1,0 as cpu,0 as ram,0 as hdddisk union all select 18 as hout1,0 as cpu,0 as ram,0 as hdddisk union all select 19 as hout1,0 as cpu,0 as ram,0 as hdddisk union all select 20 as hout1,0 as cpu,0 as ram,0 as hdddisk union all select 21 as hout1,0 as cpu,0 as ram,0 as hdddisk union all select 22 as hout1,0 as cpu,0 as ram,0 as hdddisk union all select 23 as hout1,0 as cpu,0 as ram,0 as hdddisk) t group by hour1) t ");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select cast(concat(hour1,':00') as char) as hours,cast(cpu as SIGNED) as cpu,cast(ram as SIGNED) as ram,cast(hdddisk as SIGNED) as hdddisk from (select hour1,sum(cpu) as cpu,sum(ram) as ram,sum(hdddisk) as hdddisk from (select hour1,cpu,ram,hdddisk from (select DATE_FORMAT(device_timestamp,'%H') as hour1,count(*) as cpu,0 as ram,0 as hdddisk from node_audit_trail where device_id='" + deviceid + "' and category_type = 13 and category_subtype = 111 and device_timestamp between cast(date_format(now(),'%Y-%m-%d 00:00:00') as char) and now() group by DATE_FORMAT(device_timestamp,'%H') union all select DATE_FORMAT(device_timestamp,'%H') as hour1,0 as cpu,count(*) as ram,0 as hdddisk from node_audit_trail where device_id='" + deviceid + "' and category_type = 13 and category_subtype = 112 and device_timestamp between cast(date_format(now(),'%Y-%m-%d 00:00:00') as char) and now() group by DATE_FORMAT(device_timestamp,'%H') ");
                        strQuery.AppendFormat("union all select DATE_FORMAT(device_timestamp,'%H') as hour1,0 as cpu,0 as ram,count(*) as hdddisk from node_audit_trail where device_id='" + deviceid + "' and category_type = 14 and category_subtype = 122 and device_timestamp between cast(date_format(now(),'%Y-%m-%d 00:00:00') as char) and now() group by DATE_FORMAT(device_timestamp,'%H')) t union all select 0 as hout1,0 as cpu,0 as ram ,0 as hdddisk union all select 1 as hout1,0 as cpu,0 as ram ,0 as hdddisk union all select 2 as hout1,0 as cpu,0 as ram ,0 as hdddisk union all select 3 as hout1,0 as cpu,0 as ram ,0 as hdddisk union all select 4 as hout1,0 as cpu,0 as ram ,0 as hdddisk union all select 5 as hout1,0 as cpu,0 as ram ,0 as hdddisk union all select 6 as hout1,0 as cpu,0 as ram ,0 as hdddisk union all select 7 as hout1,0 as cpu,0 as ram ,0 as hdddisk ");
                        strQuery.AppendFormat("union all select 8 as hout1,0 as cpu,0 as ram ,0 as hdddisk union all select 9 as hout1,0 as cpu,0 as ram ,0 as hdddisk union all select 10 as hout1,0 as cpu,0 as ram ,0 as hdddisk union all select 11 as hout1,0 as cpu,0 as ram ,0 as hdddisk union all select 12 as hout1,0 as cpu,0 as ram ,0 as hdddisk union all select 13 as hout1,0 as cpu,0 as ram ,0 as hdddisk union all select 14 as hout1,0 as cpu,0 as ram ,0 as hdddisk union all select 15 as hout1,0 as cpu,0 as ram ,0 as hdddisk union all select 16 as hout1,0 as cpu,0 as ram ,0 as hdddisk union all select 17 as hout1,0 as cpu,0 as ram ,0 as hdddisk union all select 18 as hout1,0 as cpu,0 as ram ,0 as hdddisk union all select 19 as hout1,0 as cpu,0 as ram ,0 as hdddisk union all select 20 as hout1,0 as cpu,0 as ram ,0 as hdddisk union all select 21 as hout1,0 as cpu,0 as ram ,0 as hdddisk union all select 22 as hout1,0 as cpu,0 as ram ,0 as hdddisk union all select 23 as hout1,0 as cpu,0 as ram ,0 as hdddisk) t group by hour1) t order by cast(hour1 as signed) ");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_System_utilization_Chart_alert Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_System_utilization_Chart_alert Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        //offline system info
        public DataTable Get_offlinesysteminfo(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select dm.ip,a.mac_address,dl.ou_longname,dm.device_name,dm.virtual_name,(select top 1 login_user from node_user_info where device_id=dm.device_id) as username, ");
                        strQuery.AppendFormat(" dl.departmentname,dm.device_type,dl.emailid,(select distinct details from node_hardware_info where hardware_class='Motherboard' and hardware_type=12 and device_id=dm.device_id) as mb from device_master dm inner join device_linkage dl on dm.device_id=dl.device_id,node_user_info a where dl.device_id=a.device_id and dl.status<>-1 {0} ", deviceid);
                        //strQuery.AppendFormat(" select dm.ip,dm.mac,dl.ou_longname,dm.device_name,dm.virtual_name,(select top 1 login_user from node_user_info where device_id=dm.device_id) as username, ");
                        ////strQuery.AppendFormat(" dl.departmentname,dm.device_type,dl.emailid from device_master dm inner join device_linkage dl on dm.device_id=dl.device_id where dm.device_id={0} ", deviceid);
                        //strQuery.AppendFormat(" dl.departmentname,dm.device_type,dl.emailid,(select distinct details from node_hardware_info where hardware_class='Motherboard' and hardware_type=12 and device_id=dm.device_id) as mb from device_master dm inner join device_linkage dl on dm.device_id=dl.device_id where dl.status<>-1 {0} ", deviceid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select dm.ip,dm.mac,dl.ou_longname,dm.device_name,dm.virtual_name,(select  login_user from node_user_info where device_id=dm.device_id limit 1) as username, ");
                        strQuery.AppendFormat(" dl.departmentname,dm.device_type,dl.emailid from device_master dm inner join device_linkage dl on dm.device_id=dl.device_id where dl.status<>-1 {0} ", deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_offlinesysteminfo Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_offlinesysteminfo Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public void update_offlinesysteminfo(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            StringBuilder strQuery1 = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" exec getassetinformationreport");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" call getassetinformationreport");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "update_offlinesysteminfo Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

                string str_update = "";
                foreach (DataRow dr in data_table.Select("device_id=" + deviceid))
                {
                    strQuery1.AppendFormat(" update new_asset_info set ");

                    if (dr["Motherboard"].ToString().ToUpper() != "")
                        str_update += ",motherboard = '" + dr["Motherboard"].ToString() + "'";
                    if (dr["Manufacture"].ToString().ToUpper() != "")
                        str_update += ",manufacturer = '" + dr["Manufacture"].ToString() + "'";
                    if (dr["os"].ToString().ToUpper() != "")
                        str_update += ",os_name = '" + dr["os"].ToString() + "'";
                    if (dr["hdd"].ToString().ToUpper() != "")
                        str_update += ",hard_disk_list = '" + dr["hdd"].ToString() + "'";
                    if (dr["hddsize"].ToString().ToUpper() != "")
                        str_update += ",hard_disk_capacity = '" + dr["hddsize"].ToString() + "'";
                    if (dr["Keyboard"].ToString().ToUpper() != "")
                        str_update += ",keyboard = '" + dr["Keyboard"].ToString() + "'";
                    if (dr["Floppy"].ToString().ToUpper() != "")
                        str_update += ",floppy_drive = '" + dr["Floppy"].ToString() + "'";
                    if (dr["NICCard"].ToString().ToUpper() != "")
                        str_update += ",nic = '" + dr["NICCard"].ToString() + "'";
                    if (dr["processor"].ToString().ToUpper() != "")
                        str_update += ",processor = '" + dr["processor"].ToString() + "'";
                    if (dr["Model"].ToString().ToUpper() != "")
                        str_update += ",model = '" + dr["Model"].ToString() + "'";
                    if (dr["osdate"].ToString().ToUpper() != "")
                        str_update += ",installation_date = '" + dr["osdate"].ToString() + "'";
                    if (dr["ram"].ToString().ToUpper() != "")
                        str_update += ",ram_type = '" + dr["ram"].ToString() + "'";
                    if (dr["slotcount"].ToString().ToUpper() != "")
                        str_update += ",total_sdram_slots = " + dr["slotcount"].ToString() + "";
                    if (dr["ramsize"].ToString().ToUpper() != "")
                        str_update += ",ram_size = '" + dr["ramsize"].ToString() + "'";
                    if (dr["Mouse"].ToString().ToUpper() != "")
                        str_update += ",mouse = '" + dr["Mouse"].ToString() + "'";
                    if (dr["CDROM"].ToString().ToUpper() != "")
                        str_update += ",cdrom = '" + dr["CDROM"].ToString() + "'";
                    if (dr["Monitor"].ToString().ToUpper() != "")
                        str_update += ",monitor = '" + dr["Monitor"].ToString() + "'";
                }
                if (str_update.Trim().Length > 0)
                    str_update = str_update.Substring(1);
                strQuery1.AppendFormat("{0} where device_id = '{1}'", str_update, deviceid);
                this.database.execute(strQuery1.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "update_offlinesysteminfo Exception : " + ex.Message.ToString());
            }
        }
        public void insert_offlinesysteminfo(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" exec getassetinformationreport");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" call getassetinformationreport");
                        //strQuery.AppendFormat(" select dm.ip,dm.mac,dl.ou_longname,dm.device_name,dm.virtual_name,(select  login_user from node_user_info where device_id=dm.device_id limit 1) as username, ");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "insert_offlinesysteminfo Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
                string strInsertQueryField = "";
                string strInsertQueryValue = "";
                foreach (DataRow dr in data_table.Select("device_id=" + deviceid))
                {
                    if (dr["Motherboard"].ToString().ToUpper() != "")
                    {
                        strInsertQueryField += ",motherboard";
                        strInsertQueryValue += ",'" + dr["Motherboard"].ToString() + "'";
                    }
                    if (dr["Manufacture"].ToString().ToUpper() != "")
                    {
                        strInsertQueryField += ",manufacturer";
                        strInsertQueryValue += ",'" + dr["Manufacture"].ToString() + "'";
                    }
                    if (dr["os"].ToString().ToUpper() != "")
                    {
                        strInsertQueryField += ",os_name";
                        strInsertQueryValue += ",'" + dr["os"].ToString() + "'";
                    }
                    if (dr["hdd"].ToString().ToUpper() != "")
                    {
                        strInsertQueryField += ",hard_disk_list";
                        strInsertQueryValue += ",'" + dr["hdd"].ToString() + "'";
                    }
                    if (dr["hddsize"].ToString().ToUpper() != "")
                    {
                        strInsertQueryField += ",hard_disk_capacity";
                        strInsertQueryValue += ",'" + dr["hddsize"].ToString() + "'";
                    }
                    //if (dr["hddsize"].ToString().ToUpper() != "")
                    //{
                    //    strInsertQueryField += ",hard_disk_type";
                    //    strInsertQueryValue += ",'" + dr["hddsize"].ToString() + "'";
                    //}
                    if (dr["Keyboard"].ToString().ToUpper() != "")
                    {
                        strInsertQueryField += ",keyboard";
                        strInsertQueryValue += ",'" + dr["Keyboard"].ToString() + "'";
                    }
                    if (dr["Floppy"].ToString().ToUpper() != "")
                    {
                        strInsertQueryField += ",floppy_drive";
                        strInsertQueryValue += ",'" + dr["Floppy"].ToString() + "'";
                    }
                    if (dr["NICCard"].ToString().ToUpper() != "")
                    {
                        strInsertQueryField += ",nic";
                        strInsertQueryValue += ",'" + dr["NICCard"].ToString() + "'";
                    }
                    if (dr["processor"].ToString().ToUpper() != "")
                    {
                        strInsertQueryField += ",processor";
                        strInsertQueryValue += ",'" + dr["processor"].ToString() + "'";
                    }
                    if (dr["Model"].ToString().ToUpper() != "")
                    {
                        strInsertQueryField += ",model";
                        strInsertQueryValue += ",'" + dr["Model"].ToString() + "'";
                    }
                    if (dr["osdate"].ToString().ToUpper() != "")
                    {
                        strInsertQueryField += ",installation_date";
                        strInsertQueryValue += ",'" + dr["osdate"].ToString() + "'";
                        //convert(varchar, DATEADD(ss, os_installation_date, '1970-01-01 00:00:00'), 120) as os_installation_date
                    }
                    if (dr["ram"].ToString().ToUpper() != "")
                    {
                        strInsertQueryField += ",ram_type";
                        strInsertQueryValue += ",'" + dr["ram"].ToString() + "'";
                    }
                    if (dr["slotcount"].ToString().ToUpper() != "")
                    {
                        strInsertQueryField += ",total_sdram_slots";
                        strInsertQueryValue += "," + dr["slotcount"].ToString() + "";
                    }
                    if (dr["ramsize"].ToString().ToUpper() != "")
                    {
                        strInsertQueryField += ",ram_size";
                        strInsertQueryValue += ",'" + dr["ramsize"].ToString() + "'";
                    }
                    if (dr["Mouse"].ToString().ToUpper() != "")
                    {
                        strInsertQueryField += ",mouse";
                        strInsertQueryValue += ",'" + dr["Mouse"].ToString() + "'";
                    }
                    if (dr["CDROM"].ToString().ToUpper() != "")
                    {
                        strInsertQueryField += ",cdrom";
                        strInsertQueryValue += ",'" + dr["CDROM"].ToString() + "'";
                    }
                    if (dr["Monitor"].ToString().ToUpper() != "")
                    {
                        strInsertQueryField += ",monitor";
                        strInsertQueryValue += ",'" + dr["Monitor"].ToString() + "'";
                    }
                }
                if (strInsertQueryField.Trim().Length > 2)
                {
                    strInsertQueryField = strInsertQueryField.Substring(1);
                    strInsertQueryValue = strInsertQueryValue.Substring(1);
                    string strQuery1 = "insert into new_asset_info(device_id," + strInsertQueryField + ") values(" + deviceid + "," + strInsertQueryValue + ")";
                    this.database.execute(strQuery1);
                }
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "insert_offlinesysteminfo Exception : " + ex.Message.ToString());
            }
        }
        public int check_offlinesysteminfo(string deviceid)
        {
            int cnt = 0;
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select count(*) from new_asset_info where device_id ='" + deviceid + "'");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select count(*) from new_asset_info where device_id ='" + deviceid + "'");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "check_offlinesysteminfo Query : " + strQuery.ToString());
                cnt = this.database.getIntValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "check_offlinesysteminfo Exception : " + ex.Message.ToString());
            }
            return cnt;
        }
        public int update_offlinesysteminfo(string deviceid, string virtualname, string departmentname, string emailid)
        {
            int result = 0;
            StringBuilder strQueryBuilder = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQueryBuilder.AppendFormat(" begin update device_master set  virtual_name='{1}' where device_id={0}; ", deviceid, virtualname);
                        strQueryBuilder.AppendFormat(" update device_linkage set emailid='{2}',departmentname='{1}' where device_id={0}; end ", deviceid, departmentname, emailid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" update device_master set  virtual_name='{1}' where device_id={0}; ", deviceid, virtualname);
                        strQueryBuilder.AppendFormat(" update device_linkage set emailid='{2}',departmentname='{1}' where device_id={0};  ", deviceid, departmentname, emailid);
                        break;
                }
                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "update_offlinesysteminfo Query : " + strQuery);
                result = this.database.execute(strQuery);
                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "update_offlinesysteminfo Exception : " + ex.Message.ToString());
            }
            return result;
        }

        // Get Asset Info
        public DataTable Get_assetinfo(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select distinct motherboard,processor,manufacturer,model,os_name,convert(varchar, installation_date, 105) as installation_date,hard_disk_list,hard_disk_type,hard_disk_capacity,ram_type,total_sdram_slots,ram_size,keyboard,mouse,monitor,floppy_drive,cdrom,nic from new_asset_info where device_id = '{0}' ", deviceid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select distinct motherboard,processor,manufacturer,model,os_name,installation_date,hard_disk_list,hard_disk_type,hard_disk_capacity,ram_type,total_sdram_slots,ram_size,keyboard,mouse,monitor,floppy_drive,cdrom,nic from new_asset_info where device_id = '{0}' ", deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_assetinfo Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_assetinfo Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        public string Get_OSName(string deviceid)
        {
            string os = "";
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        //strQuery.AppendFormat("select isnull((select top 1 data1 from node_system_info where data_type=8 and data_subtype=1 and device_id={0}),'') + ' ' + isnull((select top 1 data1 from node_system_info where data_type=8 and data_subtype=2 and  device_id={0}),'')  as os", deviceid);
                        strQuery.AppendFormat("select  isnull((select top 1 parameter_value from node_system_info_details where type_id=8 and parameter_name='Caption' and device_id={0}),'') + ' ' +  isnull((select top 1 parameter_value from node_system_info_details where type_id=8 and parameter_name='OSArchitecture' and  device_id={0}),'')  as os", deviceid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select concat(ifnull((select data1 from node_system_info where data_type=8 and data_subtype=1 and device_id={0} limit 1),'') , ' ' , ifnull((select data1 from node_system_info where data_type=8 and data_subtype=2 and  device_id={0} limit 1),''))  as os", deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_OSName Query : " + strQuery.ToString());
                os = this.database.getValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_OSName Exception : " + ex.Message.ToString());
            }
            return os;
        }

        public string Get_OSInstallationdate(string deviceid)
        {
            string osdate = "";
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select top 1 cast(left(cast(convert(bigint,floor(substring(data1,0,charindex('+',data1,0)))) as char(14)), 8) as datetime) + cast(stuff(stuff(right(cast(convert(bigint,floor(substring(data1,0,charindex('+',data1,0)))) as char(14)), 6), 5, 0, ':'), 3, 0, ':') as datetime) ");
                        strQuery.AppendFormat(" from node_system_info ns  where data_type=8 and data_subtype=3 ");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select cast(left(cast(cast(floor(substring(data1,0,locate('+',data1,0))) as UNSIGNED) as char(14)), 8) as datetime) + cast(insert(insert(right(cast(cast(floor(substring(data1,0,locate('+',data1,0))) as UNSIGNED) as char(14)), 6), 5, 0, ':'), 3, 0, ':') as datetime) ");
                        strQuery.AppendFormat(" from node_system_info ns  where data_type=8 and data_subtype=3 and device_id={0} limit 1;", deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_OSInstallationdate Query : " + strQuery.ToString());
                osdate = this.database.getValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_OSInstallationdate Exception : " + ex.Message.ToString());
            }
            return osdate;
        }

        public DataTable Get_moterboardinfo(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select distinct details as 'motherboard',manufacture,model_name from node_hardware_info where device_id={0} and hardware_class='Motherboard' and hardware_type=12 ", deviceid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select distinct details as 'motherboard',manufacture,model_name from node_hardware_info where device_id={0} and hardware_class='Motherboard' and hardware_type=12 ", deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_moterboardinfo Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_moterboardinfo Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        //public DataTable Get_os_date(string deviceid)
        //{
        //    StringBuilder strQuery = new StringBuilder();
        //    try
        //    {
        //        switch (dbtype)
        //        {
        //            case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
        //                strQuery.AppendFormat(" select os,convert(varchar,DATEADD(ss,os_installation_date,'1970-01-01 00:00:00'),120) as osdate from node_general_info where device_id={0} ", deviceid);
        //                break;
        //            case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
        //                strQuery.AppendFormat(" select os,DATE_ADD(DATE_ADD('1970-01-01 00:00:00', interval cast(os_installation_date as unsigned)*1000/1000 second), interval timestampdiff(minute,UTC_TIMESTAMP(), now()) minute) as  osdate from node_general_info where device_id={0} ", deviceid);
        //                break;
        //        }
        //        objcommon.WriteLog("DBQueryHandler", "Get_os_date Query : " + strQuery.ToString());
        //        data_table = this.database.getDataTable(strQuery.ToString());
        //    }
        //    catch (Exception ex)
        //    {
        //        objcommon.WriteLog("DBQueryHandler", "Get_os_date Exception : " + ex.Message.ToString());
        //    }
        //    return data_table;
        //}

        public DataTable Get_hdd_count_detail(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select count(*) 'hddcnt',sum(capacity) as hddsize,subtype_name from(select distinct details,isnull(cast(capacity as bigint)/1024/1024/1024,'0') as capacity,subtype_name from node_hardware_info where device_id={0} and hardware_class='Storage' )T group by subtype_name ", deviceid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select count(*) 'hddcnt',sum(capacity) as hddsize,subtype_name from(select distinct details,ifnull(cast(capacity as signed) div 1024 div 1024 div 1024,'0') as capacity,subtype_name from node_hardware_info where device_id={0} and hardware_class='Storage' )T group by subtype_name ", deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_hdd_count_detail Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_hdd_count_detail Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public string Get_Lancard_Data(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select top 1 details as   'Lancard' from node_hardware_info where hardware_class='Network'  and device_id={0}", deviceid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select  details as   'Lancard' from node_hardware_info where hardware_class='Network'  and device_id={0} limit 1", deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Lancard_Data Query : " + strQuery.ToString());
                result = this.database.getValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Lancard_Data Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public DataTable Get_ram_count_detail(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select subtype_name,sum(capacity) as ramsize,count(slot_connector) as slotcnt from( select  distinct subtype_name,isnull(cast(capacity as bigint)/1024/1024/1024,'0') as capacity,slot_connector from node_hardware_info ");
                        strQuery.AppendFormat(" where hardware_class='Motherboard' and details='Physical Memory' and device_id={0} )T group by subtype_name ", deviceid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select subtype_name,sum(capacity) as ramsize,count(slot_connector) as slotcnt from( select  distinct subtype_name,ifnull(cast(capacity as signed) div 1024 div 1024 div 1024,'0') as capacity,slot_connector from node_hardware_info ");
                        strQuery.AppendFormat(" where hardware_class='Motherboard' and details='Physical Memory' and device_id={0} )T group by subtype_name ", deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_ram_count_detail Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_ram_count_detail Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        public string Get_Keyboard_Detail(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select distinct details from node_hardware_info where  device_id={0} and hardware_class='Keyboard' ", deviceid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select distinct details from node_hardware_info where  device_id={0} and hardware_class='Keyboard' ", deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Keyboard_Detail Query : " + strQuery.ToString());
                result = this.database.getValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Keyboard_Detail Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int Get_Keyboard_count(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select count(*) from node_hardware_info where  device_id={0} and hardware_type=8 and hardware_class='Keyboard' ", deviceid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select count(*) from node_hardware_info where  device_id={0} and hardware_type=8 and hardware_class='Keyboard' ", deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Keyboard_count Query : " + strQuery.ToString());
                result = this.database.getIntValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Keyboard_count Exception : " + ex.Message.ToString());
            }
            return result;
        }
        //public int Get_os_count(string deviceid)
        //{
        //    StringBuilder strQuery = new StringBuilder();
        //    int result = 0;
        //    try
        //    {
        //        switch (dbtype)
        //        {
        //            case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
        //            case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
        //                strQuery.AppendFormat(" select count(*) from node_general_info where  device_id={0}  ", deviceid);
        //                break;
        //        }
        //        objcommon.WriteLog("DBQueryHandler", "Get_os_count Query : " + strQuery.ToString());
        //        result = this.database.getIntValue(strQuery.ToString());
        //    }
        //    catch (Exception ex)
        //    {
        //        objcommon.WriteLog("DBQueryHandler", "Get_os_count Exception : " + ex.Message.ToString());
        //    }
        //    return result;
        //}
        public int Insert_Keyboard(string deviceid, string value)
        {
            int result = 0;
            StringBuilder strQueryBuilder = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQueryBuilder.AppendFormat(" insert into node_hardware_info(device_id,details,hardware_type,hardware_class,device_timestamp) values({0},'{1}',8,'Keyboard',getdate()) ", deviceid, value);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" insert into node_hardware_info(device_id,details,hardware_type,hardware_class,device_timestamp) values({0},'{1}',8,'Keyboard',now()) ", deviceid, value);
                        break;
                }
                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "Insert_Keyboard Query : " + strQuery);
                result = this.database.execute(strQuery);
                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Insert_Keyboard Exception : " + ex.Message.ToString());
            }
            return result;
        }
        //public int Insert_os(string deviceid, string value, string idate)
        //{
        //    int result = 0;
        //    StringBuilder strQueryBuilder = new StringBuilder();
        //    try
        //    {
        //        switch (dbtype)
        //        {
        //            case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
        //                strQueryBuilder.AppendFormat(" insert into node_general_info(device_id,os,os_installation_date,cpu,freq) values({0},'{1}',cast(DATEDIFF(s, '1970-01-01 00:00:00.000', '{2}' ) as bigint),'','')", deviceid, value, idate);
        //                break;
        //            case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
        //                strQueryBuilder.AppendFormat(" insert into node_general_info(device_id,os,os_installation_date,cpu,freq) values({0},'{1}',cast(timestampdiff(second,'1970-01-01 00:00:00.000','{2}') as signed),'','')", deviceid, value, idate);
        //                break;
        //        }
        //        String strQuery = strQueryBuilder.ToString();
        //        objcommon.WriteLog("DBQueryHandler", "Insert_os Query : " + strQuery);
        //        result = this.database.execute(strQuery);
        //        strQuery = null;
        //        strQueryBuilder = null;
        //    }
        //    catch (Exception ex)
        //    {
        //        objcommon.WriteLog("DBQueryHandler", "Insert_os Exception : " + ex.Message.ToString());
        //    }
        //    return result;
        //}
        public int Insert_Processor(string deviceid, string value)
        {
            int result = 0;
            StringBuilder strQueryBuilder = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQueryBuilder.AppendFormat(" insert into node_hardware_info(device_id,details,hardware_type,hardware_class,device_timestamp) values({0},'{1}',3,'Processor',getdate()) ", deviceid, value);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" insert into node_hardware_info(device_id,details,hardware_type,hardware_class,device_timestamp) values({0},'{1}',3,'Processor',now()) ", deviceid, value);
                        break;
                }
                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "Insert_Processor Query : " + strQuery);
                result = this.database.execute(strQuery);
                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Insert_Processor Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int Get_Mouse_count(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select count(*) from node_hardware_info where  device_id={0} and hardware_type=7 and hardware_class='PointingDevice' ", deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Mouse_count Query : " + strQuery.ToString());
                result = this.database.getIntValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Mouse_count Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int Get_Motherboard_count(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select count(*) from node_hardware_info where  device_id={0} and hardware_type=12 and hardware_class='Motherboard' ", deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Motherboard_count Query : " + strQuery.ToString());
                result = this.database.getIntValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Motherboard_count Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int Get_RAM_count(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select count(*) from node_hardware_info where  device_id={0} and hardware_type=15 and hardware_class='Motherboard' and details='Physical Memory' ", deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_RAM_count Query : " + strQuery.ToString());
                result = this.database.getIntValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_RAM_count Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int Get_HDD_count(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select count(*) from node_hardware_info where  device_id={0} and hardware_type=9 and hardware_class='Storage' ", deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_HDD_count Query : " + strQuery.ToString());
                result = this.database.getIntValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_HDD_count Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int Get_Processor_count(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select count(*) from node_hardware_info where  device_id={0} and hardware_type=3 and hardware_class='Processor'  ", deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Processor_count Query : " + strQuery.ToString());
                result = this.database.getIntValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Processor_count Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int Insert_Mouse(string deviceid, string value)
        {
            int result = 0;
            StringBuilder strQueryBuilder = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQueryBuilder.AppendFormat(" insert into node_hardware_info(device_id,details,hardware_type,hardware_class,device_timestamp) values({0},'{1}',7,'PointingDevice',getdate()) ", deviceid, value);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" insert into node_hardware_info(device_id,details,hardware_type,hardware_class,device_timestamp) values({0},'{1}',7,'PointingDevice',now()) ", deviceid, value);
                        break;
                }
                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "Insert_Mouse Query : " + strQuery);
                result = this.database.execute(strQuery);
                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Insert_Mouse Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int Insert_Motherboard(string deviceid, string mothboard, string manafectural, string model)
        {
            int result = 0;
            StringBuilder strQueryBuilder = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQueryBuilder.AppendFormat(" insert into node_hardware_info(device_id,details,hardware_type,hardware_class,manufacture,model_name,device_timestamp) values({0},'{1}',12,'Motherboard','{2}','{3}',getdate()) ", deviceid, mothboard, manafectural, model);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" insert into node_hardware_info(device_id,details,hardware_type,hardware_class,manufacture,model_name,device_timestamp) values({0},'{1}',12,'Motherboard','{2}','{3}',now()) ", deviceid, mothboard, manafectural, model);
                        break;
                }
                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "Insert_Motherboard Query : " + strQuery);
                result = this.database.execute(strQuery);
                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Insert_Motherboard Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int Insert_RAM(string deviceid, string ramtype, string size, string slot)
        {
            int result = 0;
            StringBuilder strQueryBuilder = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQueryBuilder.AppendFormat(" insert into node_hardware_info(device_id,details,subtype_name,hardware_type,hardware_class,capacity,slot_connector,device_timestamp) values({0},'Physical Memory','{1}',15,'Motherboard','{2}','{3}',getdate()) ", deviceid, ramtype, size, slot);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" insert into node_hardware_info(device_id,details,subtype_name,hardware_type,hardware_class,capacity,slot_connector,device_timestamp) values({0},'Physical Memory','{1}',15,'Motherboard','{2}','{3}',now()) ", deviceid, ramtype, size, slot);
                        break;
                }
                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "Insert_RAM Query : " + strQuery);
                result = this.database.execute(strQuery);
                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Insert_RAM Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int Insert_HDD(string deviceid, string details, string size)
        {
            int result = 0;
            StringBuilder strQueryBuilder = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQueryBuilder.AppendFormat(" insert into node_hardware_info(device_id,hardware_type,hardware_class,details,capacity,device_timestamp) values({0},9,'Storage','{1}','{2}',getdate()) ", deviceid, details, size);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" insert into node_hardware_info(device_id,hardware_type,hardware_class,details,capacity,device_timestamp) values({0},9,'Storage','{1}','{2}',now()) ", deviceid, details, size);
                        break;
                }
                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "Insert_HDD Query : " + strQuery);
                result = this.database.execute(strQuery);
                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Insert_HDD Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int Get_Monitor_count(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select count(*) from node_hardware_info where  device_id={0} and hardware_type=12 and hardware_class='DesktopMonitor' ", deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Monitor_count Query : " + strQuery.ToString());
                result = this.database.getIntValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Monitor_count Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int Insert_Monitor(string deviceid, string value)
        {
            int result = 0;
            StringBuilder strQueryBuilder = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQueryBuilder.AppendFormat(" insert into node_hardware_info(device_id,details,hardware_type,hardware_class,device_timestamp) values({0},'{1}',12,'DesktopMonitor',getdate()) ", deviceid, value);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" insert into node_hardware_info(device_id,details,hardware_type,hardware_class,device_timestamp) values({0},'{1}',12,'DesktopMonitor',now()) ", deviceid, value);
                        break;
                }
                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "Insert_Monitor Query : " + strQuery);
                result = this.database.execute(strQuery);
                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Insert_Monitor Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int Get_NIC_count(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select count(*) from node_hardware_info where  device_id={0} and hardware_type=11 and hardware_class='Network' ", deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_NIC_count Query : " + strQuery.ToString());
                result = this.database.getIntValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_NIC_count Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int Insert_NIC(string deviceid, string value)
        {
            int result = 0;
            StringBuilder strQueryBuilder = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQueryBuilder.AppendFormat(" insert into node_hardware_info(device_id,details,hardware_type,hardware_class,device_timestamp) values({0},'{1}',11,'Network',getdate()) ", deviceid, value);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" insert into node_hardware_info(device_id,details,hardware_type,hardware_class,device_timestamp) values({0},'{1}',11,'Network',now()) ", deviceid, value);
                        break;
                }
                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "Insert_NIC Query : " + strQuery);
                result = this.database.execute(strQuery);
                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Insert_NIC Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int Get_Floppy_count(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select count(*) from node_hardware_info where  device_id={0} and hardware_type=51 and hardware_class='Floppydrive' ", deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Floppy_count Query : " + strQuery.ToString());
                result = this.database.getIntValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Floppy_count Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int Insert_Floppy(string deviceid, string value)
        {
            int result = 0;
            StringBuilder strQueryBuilder = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQueryBuilder.AppendFormat(" insert into node_hardware_info(device_id,details,hardware_type,hardware_class,device_timestamp) values({0},'{1}',51,'Floppydrive',getdate()) ", deviceid, value);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" insert into node_hardware_info(device_id,details,hardware_type,hardware_class,device_timestamp) values({0},'{1}',51,'Floppydrive',now()) ", deviceid, value);
                        break;
                }
                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "Insert_Floppy Query : " + strQuery);
                result = this.database.execute(strQuery);
                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Insert_Floppy Exception : " + ex.Message.ToString());
            }
            return result;
        }

        public int Get_CDROM_count(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select count(*) from node_hardware_info where  device_id={0} and hardware_type=52 and hardware_class='CDROM' ", deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_CDROM_count Query : " + strQuery.ToString());
                result = this.database.getIntValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_CDROM_count Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int Insert_CDROM(string deviceid, string value)
        {
            int result = 0;
            StringBuilder strQueryBuilder = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQueryBuilder.AppendFormat(" insert into node_hardware_info(device_id,details,hardware_type,hardware_class,device_timestamp) values({0},'{1}',52,'CDROM',getdate()) ", deviceid, value);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" insert into node_hardware_info(device_id,details,hardware_type,hardware_class,device_timestamp) values({0},'{1}',52,'CDROM',now()) ", deviceid, value);
                        break;
                }
                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "Insert_CDROM Query : " + strQuery);
                result = this.database.execute(strQuery);
                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Insert_CDROM Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public string Get_Monitor_Detail(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select distinct details from node_hardware_info where hardware_class='DesktopMonitor' and device_id={0} ", deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Monitor_Detail Query : " + strQuery.ToString());
                result = this.database.getValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Monitor_Detail Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public string Get_Mouse_Detail(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select distinct details from node_hardware_info where hardware_class='PointingDevice' and device_id={0} ", deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Mouse_Detail Query : " + strQuery.ToString());
                result = this.database.getValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Mouse_Detail Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public string Get_Floppy_Detail(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select distinct details from node_hardware_info where device_id={0} and hardware_type=51 and hardware_class='Floppydrive'", deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Floppy_Detail Query : " + strQuery.ToString());
                result = this.database.getValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Floppy_Detail Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public string Get_CD_Detail(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select distinct details from node_hardware_info where device_id={0} and hardware_type=52 and hardware_class='CDROM' ", deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_CD_Detail Query : " + strQuery.ToString());
                result = this.database.getValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_CD_Detail Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public string Update_motherboard(string deviceid, string value)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" update node_hardware_info set {1} , device_timestamp=getdate()  where device_id={0} and hardware_class='Motherboard' and hardware_type=12;  ", deviceid, value);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" update node_hardware_info set {1} , device_timestamp=now()  where device_id={0} and hardware_class='Motherboard' and hardware_type=12;  ", deviceid, value);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Update_motherboard Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Update_motherboard Exception : " + ex.Message.ToString());
            }
            return strQuery.ToString();
        }
        public string Update_RAM(string deviceid, string value)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" update node_hardware_info set {1} , device_timestamp=getdate()  where device_id={0} and hardware_type=15 and hardware_class='Motherboard' and details='Physical Memory';  ", deviceid, value);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" update node_hardware_info set {1} , device_timestamp=now()  where device_id={0} and hardware_type=15 and hardware_class='Motherboard' and details='Physical Memory';  ", deviceid, value);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Update_RAM Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Update_RAM Exception : " + ex.Message.ToString());
            }
            return strQuery.ToString();
        }
        public string Update_HDD(string deviceid, string value)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" update node_hardware_info set {1} ,device_timestamp=getdate()  where device_id={0} and hardware_type=9 and hardware_class='Storage';  ", deviceid, value);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" update node_hardware_info set {1} ,device_timestamp=now()  where device_id={0} and hardware_type=9 and hardware_class='Storage';  ", deviceid, value);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Update_HDD Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Update_HDD Exception : " + ex.Message.ToString());
            }
            return strQuery.ToString();
        }
        public string Update_processor(string deviceid, string value)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" update node_hardware_info set details='{1}',device_timestamp=getdate()  where device_id = {0} and UPPER(hardware_class) = 'PROCESSOR' and(slot_connector not Like '%USB%' or slot_connector is null);  ", deviceid, value);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" update node_hardware_info set details='{1}',device_timestamp=now()  where device_id = {0} and UPPER(hardware_class) = 'PROCESSOR' and(slot_connector not Like '%USB%' or slot_connector is null);  ", deviceid, value);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Update_processor Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Update_processor Exception : " + ex.Message.ToString());
            }
            return strQuery.ToString();
        }
        public string os_date(string value)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" os_installation_date=cast(DATEDIFF(s, '1970-01-01 00:00:00.000','{0}') as bigint)  ", value);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" os_installation_date=cast(timestampdiff(second,'1970-01-01 00:00:00.000','{0}') as signed)  ", value);
                        break;
                }
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "os_date Exception : " + ex.Message.ToString());
            }
            return strQuery.ToString();
        }
        //public string Update_os(string deviceid, string value)
        //{
        //    StringBuilder strQuery = new StringBuilder();
        //    try
        //    {
        //        switch (dbtype)
        //        {
        //            case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
        //            case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
        //                strQuery.AppendFormat(" update node_general_info set {1} where device_id={0};  ", deviceid, value);
        //                break;
        //        }
        //        objcommon.WriteLog("DBQueryHandler", "Update_os Query : " + strQuery.ToString());
        //    }
        //    catch (Exception ex)
        //    {
        //        objcommon.WriteLog("DBQueryHandler", "Update_os Exception : " + ex.Message.ToString());
        //    }
        //    return strQuery.ToString();
        //}
        public string Update_keyboard(string deviceid, string value)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" update node_hardware_info set details='{1}' ,device_timestamp=getdate()  where device_id={0} and hardware_class='Keyboard' and hardware_type=8;  ", deviceid, value);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" update node_hardware_info set details='{1}' ,device_timestamp=now()  where device_id={0} and hardware_class='Keyboard' and hardware_type=8;  ", deviceid, value);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Update_keyboard Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Update_keyboard Exception : " + ex.Message.ToString());
            }
            return strQuery.ToString();
        }
        public string Update_Mouse(string deviceid, string value)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" update node_hardware_info set details='{1}',device_timestamp=getdate()  where device_id={0} and hardware_class='PointingDevice' and hardware_type=7;  ", deviceid, value);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" update node_hardware_info set details='{1}',device_timestamp=now()  where device_id={0} and hardware_class='PointingDevice' and hardware_type=7;  ", deviceid, value);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Update_Mouse Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Update_Mouse Exception : " + ex.Message.ToString());
            }
            return strQuery.ToString();
        }
        public string Update_Monitor(string deviceid, string value)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" update node_hardware_info set details='{1}',device_timestamp=getdate()  where device_id={0} and hardware_class='DesktopMonitor' and hardware_type=12;  ", deviceid, value);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" update node_hardware_info set details='{1}',device_timestamp=now()  where device_id={0} and hardware_class='DesktopMonitor' and hardware_type=12;  ", deviceid, value);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Update_Monitor Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Update_Monitor Exception : " + ex.Message.ToString());
            }
            return strQuery.ToString();
        }
        public string Update_NIC(string deviceid, string value)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" update node_hardware_info set details='{1}',device_timestamp=getdate()  where device_id={0} and hardware_class='Network' and hardware_type=11;  ", deviceid, value);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" update node_hardware_info set details='{1}',device_timestamp=now()  where device_id={0} and hardware_class='Network' and hardware_type=11;  ", deviceid, value);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Update_NIC Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Update_NIC Exception : " + ex.Message.ToString());
            }
            return strQuery.ToString();
        }
        public string Update_Floppy(string deviceid, string value)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" update node_hardware_info set details='{1}',device_timestamp=getdate()  where device_id={0} and hardware_class='Floppydrive' and hardware_type=51;  ", deviceid, value);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" update node_hardware_info set details='{1}',device_timestamp=now()  where device_id={0} and hardware_class='Floppydrive' and hardware_type=51;  ", deviceid, value);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Update_Floppy Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Update_Floppy Exception : " + ex.Message.ToString());
            }
            return strQuery.ToString();
        }
        public string Update_CDROM(string deviceid, string value)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" update node_hardware_info set details='{1}',device_timestamp=getdate()  where device_id={0} and hardware_class='CDROM' and hardware_type=52;  ", deviceid, value);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" update node_hardware_info set details='{1}',device_timestamp=now()  where device_id={0} and hardware_class='CDROM' and hardware_type=52;  ", deviceid, value);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Update_CDROM Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Update_CDROM Exception : " + ex.Message.ToString());
            }
            return strQuery.ToString();
        }
        public int Update_Hardwaredata(string Query)
        {
            StringBuilder strQueryBuilder = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQueryBuilder.AppendFormat(" begin {0} end ", Query);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat("  {0} ", Query);
                        break;
                }
                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "Update_Hardwaredata Query : " + strQuery);
                result = this.database.execute(strQuery);
                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Update_Hardwaredata Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public string get_serverip()
        {
            StringBuilder strQuery = new StringBuilder();
            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select propertyvalue from configuration_setting where   sectionname='GUISetting' and propertyname='ServerIP' ");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "get_serverip Query : " + strQuery.ToString());
                result = this.database.getValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "get_serverip Exception : " + ex.Message.ToString());
            }
            return result;
        }

        public int purchaseinfo_exist(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            int returncnt = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select count(*) from purchase_master where device_id='{0}'", deviceid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select count(*) from purchase_master where device_id='{0}'", deviceid);
                        break;
                }
                returncnt = this.database.getIntValue(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "purchaseinfo_exist Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "purchaseinfo_exist Exception : " + ex.Message.ToString());
            }
            return returncnt;
        }
        public int Insert_Purchasedata(string deviceid, string cost, string orderno, string ino, string attchment, string file, string remark)
        {
            StringBuilder strQueryBuilder = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" insert into purchase_master(device_id,cost,order_no,invoice_no,attachment,filename,remark) values('{0}','{1}','{2}','{3}','{4}','{5}','{6}') ", deviceid, cost, orderno, ino, attchment, file, remark);
                        break;
                }
                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "Insert_Purchasedata Query : " + strQuery);
                result = this.database.execute(strQuery);
                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Insert_Purchasedata Exception : " + ex.Message.ToString());
            }
            return result;
        }

        public int Update_Purchasedata(string deviceid, string cost, string orderno, string ino, string attchment, string file, string remark)
        {
            StringBuilder strQueryBuilder = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" Update purchase_master set cost = '{1}', order_no = '{2}', invoice_no = '{3}', attachment = '{4}', filename = '{5}', remark = '{6}' where device_id = '{0}' ", deviceid, cost, orderno, ino, attchment, file, remark);
                        break;
                }
                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "Update_Purchasedata Query : " + strQuery.ToString());
                result = this.database.execute(strQuery);
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Update_Purchasedata Exception : " + ex.Message.ToString());
            }
            return result;
        }

        public int AMCinfo_exist(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            int returncnt = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select count(*) from amc_master where device_id ='{0}'", deviceid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select count(*) from amc_master where device_id ='{0}'", deviceid);
                        break;
                }
                returncnt = this.database.getIntValue(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "AMCinfo_exist Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "AMCinfo_exist Exception : " + ex.Message.ToString());
            }
            return returncnt;
        }

        public int Insert_AMCdata(string deviceid, string warrent_from, string warrent_to, string amc_from, string amc_to, string vendorname, string cost, string location)
        {
            StringBuilder strQueryBuilder = new StringBuilder();
            //String strQuery = "";
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" insert into amc_master(device_id,warranty_from_date,warranty_to_date,amc_from_date,amc_to_date,amc_vendor_name,amc_cost,vendor_location) ");
                        strQueryBuilder.AppendFormat(" values('{0}','{1}','{2}','{3}','{4}','{5}','{6}','{7}') ", deviceid, warrent_from, warrent_to, amc_from, amc_to, vendorname, cost, location);
                        break;
                }
                // strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "Insert_AMCdata Query : " + strQueryBuilder.ToString());
                result = this.database.execute(strQueryBuilder.ToString());
                strQueryBuilder.Clear();

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" insert into vendor_master(vendor_name) values('{0}')", vendorname);
                        break;
                }
                // strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "Insert Vendorname Query : " + strQueryBuilder.ToString());
                result = this.database.execute(strQueryBuilder.ToString());
                //   strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Insert_AMCdata/vendorname Exception : " + ex.Message.ToString());
            }
            return result;
        }

        public int Update_AMCdata(string deviceid, string warrent_from, string warrent_to, string amc_from, string amc_to, string vendorname, string cost, string location)
        {
            StringBuilder strQueryBuilder = new StringBuilder();
            //String strQuery = "";
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" Update amc_master set warranty_from_date = '{1}',warranty_to_date = '{2}',amc_from_date = '{3}',amc_to_date = '{4}',amc_vendor_name = '{5}',amc_cost = '{6}',vendor_location = '{7}'  where device_id = '{0}' ", deviceid, warrent_from, warrent_to, amc_from, amc_to, vendorname, cost, location);
                        //strQueryBuilder.AppendFormat(" where device_id = '{0}' ", deviceid, warrent_from, warrent_to, amc_from, amc_to, vendorname, cost, location);
                        break;
                }
                // strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "Update_AMCdata Query : " + strQueryBuilder.ToString());
                result = this.database.execute(strQueryBuilder.ToString());
                strQueryBuilder.Clear();

                //switch (dbtype)
                //{
                //    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                //    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                //        strQueryBuilder.AppendFormat(" Update vendor_master set vendor_name = '{0}'", vendorname);
                //        break;
                //}
                //// strQuery = strQueryBuilder.ToString();
                //objcommon.WriteLog("DBQueryHandler", "Update_AMCdata Query : " + strQueryBuilder.ToString());
                //result = this.database.execute(strQueryBuilder.ToString());
                ////   strQuery = null;
                //strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Update_AMCdata Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public DataTable Get_vendor_name()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        //strQuery.AppendFormat(" select distinct amc_vendor_name from amc_master ");
                        strQuery.AppendFormat(" select distinct vendor_name from vendor_master ");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_vendor_name Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_vendor_name Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        public DataTable Get_AMCInsuranceDates(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select  convert(varchar,datetime,103) as date,convert(varchar,DATEADD(day, 1,datetime),103) as date1 from device_linkage where device_id={0}", deviceid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:

                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_AMCInsuranceDates Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_AMCInsuranceDates Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        public int Insuranceinfo_exist(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            int returncnt = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select count(*) from insurance_master where device_id ='{0}'", deviceid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select count(*) from insurance_master where device_id ='{0}'", deviceid);
                        break;
                }
                returncnt = this.database.getIntValue(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "Insuranceinfo_exist Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Insuranceinfo_exist Exception : " + ex.Message.ToString());
            }
            return returncnt;
        }

        public int Insert_Insurance_data(string deviceid, string party, string partyname, string insfrom, string insto, string amount)
        {
            StringBuilder strQueryBuilder = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" insert into insurance_master(device_id,insurance_party,insurance_party_name,insurance_from_date,insurance_to_date,insurance_amount) ");
                        strQueryBuilder.AppendFormat(" values({0},'{1}','{2}','{3}','{4}','{5}') ", deviceid, party, partyname, insfrom, insto, amount);
                        break;
                }
                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "Insert_Insurance_data Query : " + strQuery);
                result = this.database.execute(strQuery);
                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Insert_Insurance_data Exception : " + ex.Message.ToString());
            }
            return result;
        }

        public int Update_Insurance_data(string deviceid, string party, string partyname, string insfrom, string insto, string amount)
        {
            StringBuilder strQueryBuilder = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" Update insurance_master set insurance_party = '{1}',insurance_party_name = '{2}',insurance_from_date = '{3}',insurance_to_date = '{4}',insurance_amount = '{5}' where device_id = '{0}' ", deviceid, party, partyname, insfrom, insto, amount);
                        break;
                }
                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "Update_Insurance_data Query : " + strQuery);
                result = this.database.execute(strQuery);
                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Update_Insurance_data Exception : " + ex.Message.ToString());
            }
            return result;
        }
        #region Reports
        //public DataTable Get_AgentInstaledData()
        //{
        //    StringBuilder strQuery = new StringBuilder();
        //    try
        //    {
        //        switch (dbtype)
        //        {
        //            case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
        //                strQuery.AppendFormat("select top 10 '' as ' ' ,virtual_name[Virtual Name],device_name[Actual Name],ip[IP Address], ");
        //                strQuery.AppendFormat("ou_nodelinkage_longname as 'Branch/Unit',convert(varchar, node_user_info.device_timestamp, 104) + ' ' + convert(varchar, node_user_info.device_timestamp, 108) as[Performance Counter], ");
        //                strQuery.AppendFormat(" client_version as 'Client Version' ");
        //                strQuery.AppendFormat(" from device_master,ou_device  left outer join node_user_info on node_user_info.device_id=ou_device.device_id Inner Join ou_nodelinkage on ou_device.ou_id=ou_nodelinkage.ou_nodelinkage_ouid");
        //                strQuery.AppendFormat(" where device_mode = 1 and agent_enabled = 1 and active=1 and device_master.device_id=ou_device.device_id ");
        //                strQuery.AppendFormat(" and device_master.status not in (-1,90) and ou_device.status=1  ");
        //                strQuery.AppendFormat(" Order By device_name asc ");

        //                break;
        //            case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:

        //                break;
        //        }
        //        objcommon.WriteLog("DBQueryHandler", "Get_AgentInstaledData Query : " + strQuery.ToString());
        //        data_table = this.database.getDataTable(strQuery.ToString());

        //    }
        //    catch (Exception ex)
        //    {
        //        objcommon.WriteLog("DBQueryHandler", "Get_AgentInstaledData Exception : " + ex.Message.ToString());
        //    }
        //    return data_table;
        //}

        #endregion

        #region DashBoard

        // Total Policy Violation
        public DataTable BindPolicyAlert(string STime)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select case category_subtype when 112 then 'RAM' when 111 then 'CPU' when 122 then 'HDD' end  as Label,sum(alertcount) as Value, ");
                        strQuery.AppendFormat("case category_subtype  when 112 then '#a02c5a'  when 111 then '#009900' when 122 then '#FFCC00' end as Bgcolor, ");
                        strQuery.AppendFormat("case category_subtype  when 112 then 'rgba(160,44,90,0.5)'  when 111 then 'rgba(140,205,159,0.5)' when 122 then 'rgba(255,243,214,0.5)' end as Bgcolor1 ");
                        strQuery.AppendFormat("from audit_trail_summary where category_id in (13,14) and category_subtype in (111,112,122) and alert_display_status=1" + STime);
                        strQuery.AppendFormat(" group by category_subtype order by sum(alertcount) desc ");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "BindPolicyAlert Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "BindPolicyAlert Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        // NSG Compliance Chart
        public DataTable BindComplianceChart()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select 'No Login Password' as Label, count(win_password) as Value,'#FFC300' as Bgcolor,'rgb(255,195,0)' as Bgcolor1  from compliance_management_summary where win_password='NO'");
                        strQuery.AppendFormat(" union all ");
                        strQuery.AppendFormat(" select 'No Screen Saver Password' as Label, count(screen_saver_psw) as Value,'#FF5733' as Bgcolor,'rgb(255,87,51)' as Bgcolor1 from compliance_management_summary where screen_saver_psw='NO'");
                        strQuery.AppendFormat(" union all ");
                        strQuery.AppendFormat(" select 'No AV Installed' as Label, count(av_installed) as Value,'#C70039' as Bgcolor,'rgb(199,0,57)' as Bgcolor1 from compliance_management_summary where av_installed not like 'YES%'");
                        strQuery.AppendFormat(" union all ");
                        strQuery.AppendFormat(" select 'Pirated OS' as Label, count(pirated_unactivated_os) as Value,'#33B5FF' as Bgcolor,'rgb(51,181,255)' as Bgcolor1 from compliance_management_summary where pirated_unactivated_os ='YES'");
                        strQuery.AppendFormat(" union all ");
                        strQuery.AppendFormat(" select 'USB Port Enabled' as Label, count(usb_port_enabled) as Value,'#C28049' as Bgcolor,'rgb(194,128,73)' as Bgcolor1 from compliance_management_summary where usb_port_enabled ='YES'");
                        strQuery.AppendFormat(" union all ");
                        strQuery.AppendFormat(" select 'Firewall Disabled' as Label, count(firewall_installed_enabled) as Value,'#4DC786' as Bgcolor,'rgb(77,199,134)' as Bgcolor1 from compliance_management_summary where firewall_installed_enabled <> 'Enabled'");
                        strQuery.AppendFormat(" union all ");
                        strQuery.AppendFormat(" select 'No Encryption Software' as Label,count(*) as Value,'#C74D81' as Bgcolor,'rgb(199,77,129)' as Bgcolor1 from compliance_management_summary where encryption_tool_installed_sdesk = 'NO' and encryption_tool_installed_vcrypt='NO'");
                        strQuery.AppendFormat(" union all ");
                        strQuery.AppendFormat(" select 'Not In Domain' as Label, count(distinct dl.device_id) as Value,'#FF9933' as Bgcolor,'rgb(255,153,51)' as Bgcolor1 from node_system_info ns,device_linkage dl  where ns.device_id=dl.device_id   and dl.status <>-1  and  data_type=1  and data_subtype=2  and data1 not like 'NSG%'");
                        strQuery.AppendFormat(" union all ");
                        strQuery.AppendFormat(" select 'Share Folder Exist' as Label,count(distinct dl.device_id) as Value,'#B266FF' as Bgcolor,'rgb(178, 102, 255)' as Bgcolor1 from device_linkage dl, node_share_info nsi where dl.device_id=nsi.device_id and dl.status <> -1");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "BindComplianceChart Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "BindPolicyAlert Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        // Total Audit Trail
        public DataTable BindAssetAlert(string STime)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select case  category_id when 11 then 'Hardware' ");
                        strQuery.AppendFormat(" when 12 then 'Software' when 14 then 'Storage' when 15 then 'User' when 18 then 'Process' when 19 then 'Service' ");
                        strQuery.AppendFormat(" when 20 then 'Share' when 1 then 'IP Change' when 10 then 'Remote' when 13 then 'Performance Monitoring' end  as Label,sum(alertcount) as Value ,");
                        strQuery.AppendFormat(" case category_id  when 11 then '#FFCC00'  when 12 then '#FF6384' when 14 then '#FF9900' when 15 then '#009900'  when 18 then '#003399' when 19 then '#a02c5a' when 20 then '#2cc2c2' when 1 then '#002060' when 10 then '#A055BC' when 13 then '#de3e46' end as Bgcolor ,");
                        strQuery.AppendFormat(" case category_id  when 11 then 'rgba(255,243,214,0.5)'  when 12 then 'rgba(255,216,224,0.5)' when 14 then 'rgba(255,233,211,0.5)' when 15 then 'rgba(140,205,159,0.5)' when 18 then 'rgba(81,131,148,0.5)' when 19 then 'rgba(160,44,90,0.5)' when 20 then 'rgba(191,226,226,0.5)' when 1 then 'rgba(0,85,205,0.5)' when 10 then 'rgba(160,85,188,0.5)' when 13 then 'rgba(148,103,102,0.5)' end as Bgcolor1 ");
                        strQuery.AppendFormat(" from  audit_trail_summary where category_id in(1,10,11,12,13,14,15,18,19,20) and ( category_subtype in(0,101,111,112,113,134,136) or  category_status in (1,-1,12,0) ) and alert_display_status=1" + STime);
                        strQuery.AppendFormat(" group by category_id order by sum(alertcount) desc ");
                        //strQuery.AppendFormat("select case  category_id when 11 then 'Hardware' ");
                        //strQuery.AppendFormat(" when 12 then 'Software' when 14 then 'Storage' when 15 then 'User' when 18 then 'Process' when 19 then 'Service' ");
                        //strQuery.AppendFormat(" when 20 then 'Share' when 1 then 'IP Change' when 10 then 'Remote'  end  as Label,sum(alertcount) as Value ,");
                        //strQuery.AppendFormat(" case category_id  when 11 then '#FFCC00'  when 12 then '#FF6384' when 14 then '#FF9900' when 15 then '#009900'  when 18 then '#FF7491' when 19 then '#002060' when 20 then '#2cc2c2' when 1 then 'rgb(231,233,237)' when 10 then 'rgb(153, 102, 255)' end as Bgcolor ,");
                        //strQuery.AppendFormat(" case category_id  when 11 then 'rgba(255,243,214,0.5)'  when 12 then 'rgba(255,216,224,0.5)' when 14 then 'rgba(255,233,211,0.5)' when 15 then 'rgba(140,205,159,0.5)' when 18 then 'rgba(255,216,224,0.5)' when 19 then 'rgba(170,215,252,0.5)' when 20 then 'rgba(191,226,226,0.5)' when 1 then 'rgb(239,240,242,0.5)' when 10 then 'rgba(230,217,255,0.5)'  end as Bgcolor1 ");
                        //strQuery.AppendFormat(" from  audit_trail_summary where category_id in(1,10,11,12,14,15,18,19,20) and ( category_subtype in(0,101,134,136) or  category_status in (1,-1,12,0) ) and alert_display_status=1" + STime);
                        //strQuery.AppendFormat(" group by category_id order by sum(alertcount) desc ");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "BindAssetAlert Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "BindAssetAlert Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable GroupBindAssetAlert(string groupid)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select mm.menu_name from menu_master mm, group_rights_master grm where mm.menu_id = grm.menu_id and mm.menu_parent_id = 8 and grm.group_id = {0} ", groupid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select mm.menu_name from menu_master mm, group_rights_master grm where mm.menu_id = grm.menu_id and mm.menu_parent_id = 8 and grm.group_id = {0} ", groupid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "GroupBindAssetAlert Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "GroupBindAssetAlert Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable GroupBindpolicyAlert(string groupid)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select mm.menu_name from menu_master mm, group_rights_master grm where mm.menu_id = grm.menu_id and mm.menu_parent_id = 102 and grm.group_id = {0} ", groupid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select mm.menu_name from menu_master mm, group_rights_master grm where mm.menu_id = grm.menu_id and mm.menu_parent_id = 102 and grm.group_id = {0} ", groupid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "GroupBindpolicyAlert Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "GroupBindpolicyAlert Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        // Most affected Domain
        public DataTable BindMostAffectedDomain(string Startdate, string Enddate)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" exec getmostaffecteddomain '" + Startdate + "','" + Enddate + "' ");
                        // strQuery.AppendFormat(" exec getmostaffecteddomain '2018-11-17 00:00:00','2018-12-18 15:17:21 ' ");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:

                        strQuery.AppendFormat(" call getmostaffecteddomain ('" + Startdate + "','" + Enddate + "')  ");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "BindMostAffectedDomain Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "BindMostAffectedDomain Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable GroupBindMostAffectedDomain(string groupid)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select mm.menu_name from menu_master mm, group_rights_master grm where mm.menu_id = grm.menu_id and mm.menu_parent_id = 9 and grm.group_id = {0} ", groupid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select mm.menu_name from menu_master mm, group_rights_master grm where mm.menu_id = grm.menu_id and mm.menu_parent_id = 9 and grm.group_id = {0} ", groupid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "GroupBindMostAffectedDomain Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "GroupBindMostAffectedDomain Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        // Last Poll time
        public DataTable Get_LastUserLogin()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("exec getlastpolltimedata ");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" call getlastpolltimedata();");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_LastUserLogin Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_LastUserLogin Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        // PC Connectivity
        public DataTable Get_DeviceStatus()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select Label,sum(Value) as 'Value', case Label when 'Details of system not linked' then '#C00000' when 'Linked Equipment' then '#009900' when 'Not Monitoring Device' then '#FFCC00' when 'Today Connected Device' then '#0000FF' end as Bgcolor , case Label when 'Details of system not linked' then 'rgba(255,196,196,0.5)' when 'Linked Equipment' then 'rgba(140,205,159,0.5)' when 'Not Monitoring Device' then 'rgba(255,243,214,0.5)' when 'Today Connected Device' then 'rgba(0,0,255,0.5)' end as Bgcolor1  from ( ");
                        strQuery.AppendFormat("select case  dm.status  when 0 then 'Details of system not linked' when 2 then 'Details of system not linked' when 1 then 'Linked Equipment' ");
                        strQuery.AppendFormat("when 3 then 'Details of system not linked' end as 'Label',count(*) as Value ");
                        strQuery.AppendFormat(" from device_master dm inner join device_linkage dl on dm.device_id=dl.device_id inner join ou_userroll ur on dl.ou_id=ur.ou_userroll_ou_id ");
                        strQuery.AppendFormat(" where dl.status<> -1 and ur.ou_userroll_active = 1 and dm.device_typeint = '1' ");
                        strQuery.AppendFormat(" and ur.ou_userroll_user_id=1  and dm.active = 1 ");
                        strQuery.AppendFormat(" and dl.device_mode in (1,2,3)   and dm.status not in (-1,90) and dm.device_id not in (select dm.device_id from device_master dm left outer join node_user_info nui on dm.device_id=nui.device_id where device_mode in (1,2,3)   and status not in (-1,90) and status = 0 and device_timestamp > CONVERT(date, getdate(),103)) group by dm.status ");
                        strQuery.AppendFormat(" union all 	select 'Today Connected Device' as 'statustype', count(*) as 'Total'  from device_master dm left outer join node_user_info nui on dm.device_id=nui.device_id where device_mode in (1,2,3)   and status not in (-1,90) and status = 0 and device_timestamp > CONVERT(date, getdate(),103) having count(*)>0  ");
                        strQuery.AppendFormat("union all select 'Not Monitoring Device' as 'statustype', count(*) as 'Total' from new_device_details where mac not in (select distinct mac from device_master where device_mode <> 0) and activedevice=1 and len(device_name) > 0 and status<> -1 having count(*)>0 )T group by Label");

                        //strQuery.AppendFormat(" select Label,sum(Value) as 'Value', case Label when 'Details of system not linked' then '#C00000' when 'Linked Equipment' then '#009900' when 'Not Monitoring Device' then '#FFCC00' end as Bgcolor , case Label when 'Details of system not linked' then 'rgba(255,196,196,0.5)' when 'Linked Equipment' then 'rgba(140,205,159,0.5)' when 'Not Monitoring Device' then 'rgba(255,243,214,0.5)' end as Bgcolor1  from ( ");
                        //strQuery.AppendFormat("select case  dm.status  when 0 then 'Details of system not linked' when 2 then 'Details of system not linked' when 1 then 'Linked Equipment' ");
                        //strQuery.AppendFormat("when 3 then 'Details of system not linked' end as 'Label',count(*) as Value ");
                        //strQuery.AppendFormat(" from device_master dm inner join device_linkage dl on dm.device_id=dl.device_id inner join ou_userroll ur on dl.ou_id=ur.ou_userroll_ou_id ");
                        //strQuery.AppendFormat(" where dl.status<> -1 and ur.ou_userroll_active = 1 and dm.device_typeint = '1' ");
                        //strQuery.AppendFormat(" and ur.ou_userroll_user_id=1  and dm.active = 1 ");
                        //strQuery.AppendFormat(" and dl.device_mode in (1,2,3)   and dm.status not in (-1,90) group by dm.status ");
                        //strQuery.AppendFormat("union all select 'Not Monitoring Device' as 'statustype', count(*) as 'Total' from new_device_details where mac not in (select distinct mac from device_master where device_mode <> 0) and activedevice=1 and len(device_name) > 0 and status<> -1 having count(*)>0 )T group by Label");


                        //strQuery.AppendFormat(" select Label,sum(Value) as 'Value' from ( ");
                        //strQuery.AppendFormat("select case  dm.status  when 0 then 'Presently Not Linked' when 2 then 'Presently Not Linked' when 1 then 'Presently Linked' ");
                        //strQuery.AppendFormat("when 3 then 'Presently Not Linked' end as 'Label',count(*) as Value ");
                        //strQuery.AppendFormat(" from device_master dm inner join device_linkage dl on dm.device_id=dl.device_id inner join ou_userroll ur on dl.ou_id=ur.ou_userroll_ou_id ");
                        //strQuery.AppendFormat(" where dl.status<> -1 and ur.ou_userroll_active = 1 and dm.device_typeint = '1' ");
                        //strQuery.AppendFormat(" and ur.ou_userroll_user_id=1  and dm.active = 1 ");
                        //strQuery.AppendFormat(" and dl.device_mode in (1,2,3)   and dm.status not in (-1,90) group by dm.status ");
                        //strQuery.AppendFormat("union all select 'Not Monitoring Device' as 'statustype', count(*) as 'Total' from new_device_details where mac not in (select distinct mac from device_master) and activedevice=1 and len(device_name) > 0 having count(*)>0 )T group by Label");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select Label,cast(sum(value) as SIGNED) as Value, case Label when 'Details of system not linked' then '#C00000' when 'Linked Equipment' then '#009900' when 'Not Monitoring Device' then '#FFCC00' end as Bgcolor , case Label when 'Details of system not linked' then 'rgba(255,196,196,0.5)' when 'Linked Equipment' then 'rgba(140,205,159,0.5)' when 'Not Monitoring Device' then 'rgba(255,243,214,0.5)' end as Bgcolor1  from ( ");
                        strQuery.AppendFormat("select case  dm.status  when 0 then 'Details of system not linked' when 2 then 'Details of system not linked' when 1 then 'Linked Equipment' ");
                        strQuery.AppendFormat("when 3 then 'Details of system not linked' end as 'Label',count(*) as Value ");
                        strQuery.AppendFormat(" from device_master dm inner join device_linkage dl on dm.device_id=dl.device_id inner join ou_userroll ur on dl.ou_id=ur.ou_userroll_ou_id ");
                        strQuery.AppendFormat(" where dl.status<> -1 and ur.ou_userroll_active = 1 and dm.device_typeint = '1' ");
                        strQuery.AppendFormat(" and ur.ou_userroll_user_id=1  and dm.active = 1 ");
                        strQuery.AppendFormat(" and dl.device_mode in (1,2,3)   and dm.status not in (-1,90) group by dm.status ");
                        strQuery.AppendFormat("union all select 'Not Monitoring Device' as 'statustype', count(*) as 'Total' from new_device_details where mac not in (select distinct mac from device_master where device_mode <> 0) and activedevice=1 and length(device_name) > 0 and status<> -1 having count(*)>0 )T group by Label");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_DeviceStatus Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_DeviceStatus Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable BindCSATAuditTrail(string Startdate, string Enddate)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" exec getcsataudittrail '" + Startdate + "','" + Enddate + "' ");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:

                        strQuery.AppendFormat(" call getcsataudittrail ('" + Startdate + "','" + Enddate + "'); ");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "BindCSATAuditTrail Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "BindCSATAuditTrail Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable GroupBindCSATAuditTrail(string groupid)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select mm.menu_name from menu_master mm, group_rights_master grm where mm.menu_id = grm.menu_id and mm.menu_parent_id = 12 and grm.group_id = {0} ", groupid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select mm.menu_name from menu_master mm, group_rights_master grm where mm.menu_id = grm.menu_id and mm.menu_parent_id = 12 and grm.group_id = {0} ", groupid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "GroupBindCSATAuditTrail Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "GroupBindCSATAuditTrail Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        #endregion
        #region System Details
        public DataTable Get_TopAlert_Sysetm(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select convert(varchar,device_timestamp,105) + ' ' + convert(varchar,device_timestamp,108) as 'TimeStamp'  ,case category_type  when 11 then 'Hardware' when 12 then 'Software'  when 15 then 'User' when 18 then 'Process' when 19 then 'Service' when 20 then 'Share' end as 'Category', ");
                        strQuery.AppendFormat(" case category_status when -2 then 'Failed' when -1 then 'Removed' when 0 then 'Down' when 1 then 'Added' when 2 then 'Running' when 3 then 'Warning'  when 4 then 'Error' when 5 then 'Violation' when 6 then 'Time Difference' when 7 then 'Enabled' ");
                        strQuery.AppendFormat(" when 8 then 'Disabled' when 9 then 'Implement' when 10 then 'Access' when 11 then 'Attempt' when 12 then 'Changed' when 13 then 'Detect' when 14 then 'Activation Code Already Exists' when 15 then 'Invalid Activation Code' when 16 then 'Client Limit Exceeded' when 17 then 'Updated' when 99 then 'General' end as Status,details as 'Details' from( ");
                        strQuery.AppendFormat(" select top 10 device_timestamp,category_type  ,category_status ,NA.details as 'Details'  from device_master DM, node_audit_trail NA where  dm.device_id={0} and NA.device_id = DM.device_id and  dm.status not in (-1,90)  ", deviceid);
                        strQuery.AppendFormat(" and dm.active=1  and dm.device_mode in(1,2,3) and category_type in(11,12,15,18,19,20) and na.details not like 'pnp entity%' order by device_timestamp desc )t ");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select cast(date_format(device_timestamp,'%d-%m-%Y %H:%i:%s') as char) as 'TimeStamp'  ,case category_type  when 11 then 'Hardware' when 12 then 'Software'  when 15 then 'User' when 18 then 'Process' when 19 then 'Service' when 20 then 'Share' end as 'Category', ");
                        strQuery.AppendFormat(" case category_status when -2 then 'Failed' when -1 then 'Removed' when 0 then 'Down' when 1 then 'Added' when 2 then 'Running' when 3 then 'Warning'  when 4 then 'Error' when 5 then 'Violation' when 6 then 'Time Difference' when 7 then 'Enabled' ");
                        strQuery.AppendFormat(" when 8 then 'Disabled' when 9 then 'Implement' when 10 then 'Access' when 11 then 'Attempt' when 12 then 'Changed' when 13 then 'Detect' when 14 then 'Activation Code Already Exists' when 15 then 'Invalid Activation Code' when 16 then 'Client Limit Exceeded' when 17 then 'Updated' when 99 then 'General' end as Status,details as 'Details' from( ");
                        strQuery.AppendFormat(" select  device_timestamp,category_type  ,category_status ,na.details as 'Details'  from device_master dm, node_audit_trail na where  dm.device_id={0} and na.device_id = dm.device_id and  dm.status not in (-1,90)  ", deviceid);
                        strQuery.AppendFormat(" and dm.active=1  and dm.device_mode in(1,2,3) and category_type in(11,12,15,18,19,20) and na.details not like 'pnp entity%' order by device_timestamp desc limit 10 )t ");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_TopAlert_Sysetm Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_TopAlert_Sysetm Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public string Get_Firewall_ON_OFF(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select case data1 when 0 then 'OFF' when 1 then 'ON' end as e103firewall from node_system_info where data_type=3 and data_subtype=1 and device_id = {0} ", deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Firewall_ON_OFF Query : " + strQuery.ToString());
                result = this.database.getValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Firewall_ON_OFF Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public string Get_ScreenSaver(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select case data1 when 1 then 'ON' when 0 then 'OFF' end as E103ScreenSaver from node_system_info where data_type = 3 and data_subtype = 2 and device_id = {0} ", deviceid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select case data1 when 1 then 'ON' when 0 then 'OFF' end as E103ScreenSaver from node_system_info where data_type = 3 and data_subtype = 2 and device_id = {0} ", deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_ScreenSaver Query : " + strQuery.ToString());
                result = this.database.getValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_ScreenSaver Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public DataTable Get_Lancard(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select  count(*) as 'Count' from node_networkcard_info where device_id={0} ", deviceid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select  count(*) as 'Count' from node_networkcard_info where device_id={0} ", deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Lancard Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Lancard Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_Services(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select count(*) as 'Count' from node_service_info where device_id={0} ", deviceid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select count(*) as 'Count' from node_service_info where device_id={0} ", deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Services Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Services Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_System_Utilization(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select 'Share Resources' as 'systeutilization',count(*) as 'counts' from node_share_info where device_id={0} ", deviceid);
                        strQuery.AppendFormat(" union all  select 'Unauthorised Process' as 'systeutilization',count(distinct process_name) as 'counts' from node_process_info where  device_id={0} and process_name in (select typename from authorizedata where datatype=2 and authorizetype=0) ", deviceid);
                        strQuery.AppendFormat(" union all  select 'Services' as 'systeutilization',count(*) as 'counts' from node_service_info where device_id={0} ", deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_System_Utilization Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_System_Utilization Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_systeminfo(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select distinct nsr.report_display_name,nsr.report_priority,nsd.parameter_value from node_system_report_list nsr,node_system_info_details nsd where nsd.type_id = 8  and nsr.report_field_name=nsd.parameter_name  and nsd.device_id = {0}  and nsr.report_subtype= 8 and nsr.report_priority != 10.0 order by report_priority  ", deviceid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select distinct nsr.report_display_name,nsr.report_priority,nsd.parameter_value from node_system_report_list nsr,node_system_info_details nsd where nsd.type_id = 8  and nsr.report_field_name=nsd.parameter_name  and nsd.device_id = {0}   and nsr.report_subtype= 8 and nsr.report_priority != 10.0 order by report_priority ", deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_systeminfo Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_systeminfo Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable GetSoftwareData(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select deviceid,ltrim(rtrim(software)) as software,publisher,case date when 'NA' then '' when null then '' else convert(varchar,convert(varchar,date,120),105) end as date,software_guid,version,location,source,uninstallstring ,case when authorizetype = 0 then 'Unauth' when authorizetype = 1 then 'Auth' else 'Unknown' end as authorizetype ");
                        strQuery.AppendFormat(" from  nodesoftwaredetails nsd left outer join authorizedata ad on nsd.software=ad.typename where deviceid= {0} and software<>'0' order by 2 asc ", deviceid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select deviceid,ltrim(rtrim(software)) as software,publisher,case date when 'NA' then '' when null then '' else convert(varchar,convert(varchar,date,120),105) end as date,software_guid,version,location,source,uninstallstring ,case when authorizetype = 0 then 'Unauth' when authorizetype = 1 then 'Auth' else 'Unknown' end as authorizetype ");
                        strQuery.AppendFormat(" from  nodesoftwaredetails nsd left outer join authorizedata ad on nsd.software=ad.typename where deviceid= {0} and software<>'0' order by 2 asc ", deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "GetSoftwareData Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "GetSoftwareData Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public int getdeploymentId()
        {
            int result = 0;
            try
            {
                StringBuilder strQueryBuilder = new StringBuilder();
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" select max(deployment_id) from node_software_deploy ");
                        break;
                }
                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "getdeploymentId Query : " + strQuery);
                result = this.database.getIntValue(strQuery);
                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "getdeploymentId Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int insertdeploymentId(string deviceid, string software, int depolymentid)
        {
            int result = 0;
            try
            {
                StringBuilder strQueryBuilder = new StringBuilder();
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" insert into node_software_deploy(device_id,patch_name,installation_path,action_performed,status,action_date,deployment_id) ");
                        strQueryBuilder.AppendFormat(" Values ({0},'{1}','',0,3,getdate(),{2})", deviceid, software, depolymentid);
                        break;
                }
                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "insertdeploymentId Query : " + strQuery);
                result = this.database.execute(strQuery);
                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "insertdeploymentId Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public string Get_Location_ID(string strDeviceId)
        {
            StringBuilder strQueryBuilder = new StringBuilder();
            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat("select location_id from device_master where device_id=" + strDeviceId + " and status<>-1");
                        break;
                }
                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "Get_Location_ID Query : " + strQuery);
                result = this.database.getValue(strQuery);
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Location_ID Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int Set_GUILog(string DeviceID, string ActionName, string ActionDescription, string LoginName)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("insert into gui_log(device_id,action_date,pc_name,action_name,action_desc,action_performby,gui_ip)");
                        strQuery.AppendFormat("values('" + DeviceID + "',getdate(),'" + Get_DeviceName(DeviceID) + "','" + ActionName + "','" + ActionDescription + "','" + LoginName + "','" + objcommon.Get_GUIIP() + "')");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("insert into gui_log(device_id,action_date,pc_name,action_name,action_desc,action_performby,gui_ip)");
                        strQuery.AppendFormat("values('" + DeviceID + "',now(),'" + Get_DeviceName(DeviceID) + "','" + ActionName + "','" + ActionDescription + "','" + LoginName + "','" + objcommon.Get_GUIIP() + "')");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Set_GUILog Query : " + strQuery);
                result = this.database.execute(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Set_GUILog Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int Set_GUILoginMultipleDevice(string DeviceID, string ActionName, string ActionDescription, string LoginName)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("insert into gui_log(device_id,action_date,pc_name,action_name,action_desc,action_performby,gui_ip)");
                        strQuery.AppendFormat(" select distinct device_id,getdate(),device_name,'{1}','{2}','{3}','" + objcommon.Get_GUIIP() + "' from  device_master where device_id in({0})", DeviceID, ActionName, ActionDescription, LoginName);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("insert into gui_log(device_id,action_date,pc_name,action_name,action_desc,action_performby,gui_ip)");
                        strQuery.AppendFormat(" select distinct device_id,now(),device_name,'{1}','{2}','{3}','" + objcommon.Get_GUIIP() + "' from  device_master where device_id in({0})", DeviceID, ActionName, ActionDescription, LoginName);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Set_GUILoginMultipleDevice Query : " + strQuery);
                result = this.database.execute(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Set_GUILoginMultipleDevice Exception : " + ex.Message.ToString());
            }
            return result;
        }
        // Get Device Name
        public string Get_DeviceName(string DeviceID)
        {
            StringBuilder strQueryBuilder = new StringBuilder();
            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat("select device_name from device_master where device_id= '" + DeviceID + "'");
                        break;
                }
                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "Get_DeviceName Query : " + strQuery);
                result = this.database.getValue(strQuery);
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_DeviceName Exception : " + ex.Message.ToString());
            }
            return result;
        }
        //Get System IP
        public string Get_SystemIP(string DeviceID)
        {
            StringBuilder strQueryBuilder = new StringBuilder();
            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat("select ip from device_master where device_id= '" + DeviceID + "'");
                        break;
                }
                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "Get_SystemIP Query : " + strQuery);
                result = this.database.getValue(strQuery);
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_SystemIP Exception : " + ex.Message.ToString());
            }
            return result;
        }
        //Get Process Name
        //public string Get_ProcessName(string DeviceID, string strPrcID)
        //{
        //    StringBuilder strQueryBuilder = new StringBuilder();
        //    string result = "";
        //    try
        //    {
        //        switch (dbtype)
        //        {
        //            case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
        //                strQueryBuilder.AppendFormat("select top 1 process_name from node_process_info where device_id = " + DeviceID + " and process_id = " + strPrcID);
        //                break;
        //            case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
        //                strQueryBuilder.AppendFormat("select  process_name from node_process_info where device_id = " + DeviceID + " and process_id = " + strPrcID + " limit 1");
        //                break;
        //        }

        //        String strQuery = strQueryBuilder.ToString();
        //        objcommon.WriteLog("DBQueryHandler", "Get_ProcessName Query : " + strQuery);
        //        result = this.database.getValue(strQuery);
        //    }
        //    catch (Exception ex)
        //    {
        //        objcommon.WriteLog("DBQueryHandler", "Get_ProcessName Exception : " + ex.Message.ToString());
        //    }
        //    return result;
        //}
        public string Get_ProcessName(string strPrcID)
        {
            StringBuilder strQueryBuilder = new StringBuilder();
            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQueryBuilder.AppendFormat("select top 1 process_name from node_process_info where process_id = " + strPrcID);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat("select  process_name from node_process_info where  process_id = " + strPrcID + " limit 1");
                        break;
                }
                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "Get_ProcessName Query : " + strQuery);
                result = this.database.getValue(strQuery);
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_ProcessName Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public string Get_ProcessID(string strprocessname)
        {
            StringBuilder strQueryBuilder = new StringBuilder();
            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQueryBuilder.AppendFormat("select top 1 process_id from node_process_info where process_name = '" + strprocessname + "'");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat("select  process_id from node_process_info where  process_name = '" + strprocessname + "' limit 1");
                        break;
                }
                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "Get_ProcessID Query : " + strQuery);
                result = this.database.getValue(strQuery);
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_ProcessID Exception : " + ex.Message.ToString());
            }
            return result;
        }

        public int InsertQueryLog(string deviceid, string strmsg, string getLocationId)
        {
            int result = 0;
            try
            {
                StringBuilder strQueryBuilder = new StringBuilder();
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" insert into query_log (device_id,query_msg,location_id,message_priority) ");
                        strQueryBuilder.AppendFormat(" Values({0},'{1}','{2}','-1')", deviceid, strmsg, getLocationId);
                        break;
                }
                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "InsertQueryLog Query : " + strQuery);
                result = this.database.execute(strQuery);
                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "InsertQueryLog Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int InsertQueryLogMultipleDevice(string deviceid, string strmsg, string priority)
        {
            int result = 0;
            try
            {
                StringBuilder strQueryBuilder = new StringBuilder();
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" insert into query_log (device_id,query_msg,location_id,message_priority) ");
                        strQueryBuilder.AppendFormat("select distinct device_id,'{1}',location_id,'{2}' from device_master where device_id in({0}) ", deviceid, strmsg, priority);
                        break;
                }
                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "InsertQueryLogMultipleDevice Query : " + strQuery);
                result = this.database.execute(strQuery);
                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "InsertQueryLogMultipleDevice Exception : " + ex.Message.ToString());
            }
            return result;
        }
        //public string Check_Software_Type(string software)
        //{
        //    StringBuilder strQueryBuilder = new StringBuilder();
        //    string result = "";
        //    try
        //    {
        //        switch (dbtype)
        //        {
        //            case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
        //            case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
        //                strQueryBuilder.AppendFormat("select top 1 authorize from softwareauthorize where softwarename='{0}' ", software);
        //                break;
        //        }
        //        String strQuery = strQueryBuilder.ToString();
        //        objcommon.WriteLog("DBQueryHandler", "Check_Software_Type Query : " + strQuery);
        //        result = this.database.getValue(strQuery);
        //    }
        //    catch (Exception ex)
        //    {
        //        objcommon.WriteLog("DBQueryHandler", "Check_Software_Type Exception : " + ex.Message.ToString());
        //    }
        //    return result;
        //}
        //public int get_Un_Authorized_Software_cnt(string software, int type)
        //{
        //    int result = 0;
        //    try
        //    {
        //        StringBuilder strQueryBuilder = new StringBuilder();
        //        switch (dbtype)
        //        {
        //            case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
        //            case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
        //                strQueryBuilder.AppendFormat(" select count(*) from softwareauthorize where softwarename='{1}' and authorize={0} ", software, type);
        //                break;
        //        }
        //        String strQuery = strQueryBuilder.ToString();
        //        objcommon.WriteLog("DBQueryHandler", "get_Un_Authorized_Software_cnt Query : " + strQuery);
        //        result = this.database.getIntValue(strQuery);
        //        strQuery = null;
        //        strQueryBuilder = null;
        //    }
        //    catch (Exception ex)
        //    {
        //        objcommon.WriteLog("DBQueryHandler", "get_Un_Authorized_Software_cnt Exception : " + ex.Message.ToString());
        //    }
        //    return result;
        //}
        //public int Insert_Un_Authorized_Software(string software, int type)
        //{
        //    StringBuilder strQuery = new StringBuilder();
        //    int result = 0;
        //    try
        //    {
        //        switch (dbtype)
        //        {
        //            case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
        //            case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
        //                strQuery.AppendFormat(" insert into softwareauthorize(softwarename,authorize) values('{0}',{1})", software, type);
        //                break;
        //        }
        //        objcommon.WriteLog("DBQueryHandler", "Insert_Un_Authorized_Software Query : " + strQuery);
        //        result = this.database.execute(strQuery.ToString());
        //    }
        //    catch (Exception ex)
        //    {
        //        objcommon.WriteLog("DBQueryHandler", "Insert_Un_Authorized_Software Exception : " + ex.Message.ToString());
        //    }
        //    return result;
        //}
        //public int Update_Un_Authorized_Software(string software, int type)
        //{
        //    StringBuilder strQuery = new StringBuilder();
        //    int result = 0;
        //    try
        //    {
        //        switch (dbtype)
        //        {
        //            case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
        //            case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
        //                strQuery.AppendFormat(" update softwareauthorize set authorize={0}  where softwarename='{1}'", type, software);
        //                break;
        //        }
        //        objcommon.WriteLog("DBQueryHandler", "Update_Un_Authorized_Software Query : " + strQuery);
        //        result = this.database.execute(strQuery.ToString());
        //    }
        //    catch (Exception ex)
        //    {
        //        objcommon.WriteLog("DBQueryHandler", "Update_Un_Authorized_Software Exception : " + ex.Message.ToString());
        //    }
        //    return result;
        //}
        public DataTable GetServiceData(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();

            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select device_id,service_name,display_name,state,startmode,startname from node_service_info where device_id={0} order by 1 asc ", deviceid);
                        //strQuery.AppendFormat(" select distinct device_id,service_name,display_name,state,startmode,startname from node_service_info where device_id={0} order by 1 asc ", deviceid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select device_id,service_name,display_name,state,startmode,startname from node_service_info where device_id={0} order by 1 asc ", deviceid);
                        //strQuery.AppendFormat(" select distinct device_id,service_name,display_name,state,startmode,startname from node_service_info where device_id={0} order by 1 asc ", deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "GetServiceData Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "GetServiceData Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable GetProcessData(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();

            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select device_id,process_name, process_id ,process_parentid_id,process_desc,process_exec_path,time,case  authorizetype when 0 then 'Unauth' else 'Auth'  end as authorizetype from ( ");
                        strQuery.AppendFormat(" select device_id,process_name, process_id ,process_parentid_id,process_desc,process_exec_path,time,(select cast(authorizetype as varchar) from authorizedata where datatype=2 and t.process_name=typename ) as authorizetype from  ", deviceid);
                        strQuery.AppendFormat(" (select device_id,process_name,cast (process_id as varchar) as process_id ,cast (process_id as varchar) as process_parentid_id,process_desc,cast (process_exec_path as varchar) as process_exec_path,CONVERT(VARCHAR,DATEADD(SECOND,CAST(time as BIGINT)/1000, '1970-01-01 00:00:00'),120 ) as time from node_process_info where device_id={0} )T  )T1 order by 1 asc", deviceid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select device_id,process_name, process_id ,process_parentid_id,process_desc,process_exec_path,time,case  authorizetype when 0 then 'Unauth' else 'Auth'  end as authorizetype from ( ");
                        strQuery.AppendFormat(" select device_id,process_name, process_id ,process_parentid_id,process_desc,process_exec_path,time,(select cast(authorizetype as char) from authorizedata where datatype=2 and t.process_name=typename) as authorizetype from  ", deviceid);
                        strQuery.AppendFormat(" (select device_id,process_name,cast(process_id as char) as process_id ,cast(process_id as char) as process_parentid_id,process_desc,cast(process_exec_path as char) as process_exec_path,DATE_ADD(DATE_ADD('1970-01-01 00:00:00', interval cast(time as unsigned)/1000 second), interval timestampdiff(minute,UTC_TIMESTAMP(), now()) minute) as time from node_process_info where device_id={0} )t  )t1 order by 1 asc", deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "GetProcessData Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "GetProcessData Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public string Check_Authorized_Type(int type, string name)
        {
            StringBuilder strQueryBuilder = new StringBuilder();
            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQueryBuilder.AppendFormat("select top 1  authorizetype from authorizedata where datatype={0} and typename='{1}' ", type, name);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat("select authorizetype from authorizedata where datatype={0} and typename='{1}' limit 1  ", type, name);
                        break;
                }

                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "Check_Authorized_Type Query : " + strQuery);
                result = this.database.getValue(strQuery);
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Check_Authorized_Type Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int Insert_Un_Authorized(int datatype, string typename, string id, int authorizetype)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" insert into authorizedata(datatype,typename,guid,authorizetype) values({0},'{1}','{2}',{3})", datatype, typename, id, authorizetype);

                        break;
                }

                objcommon.WriteLog("DBQueryHandler", "Insert_Un_Authorized Query : " + strQuery);
                result = this.database.execute(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Insert_Un_Authorized Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int Update_Un_Authorized(int authorizetype, int datatype, string typename)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" update authorizedata set authorizetype={0},datetime=getdate() where typename='{1}' and datatype={2}", authorizetype, typename, datatype);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" update authorizedata set authorizetype={0},datetime=now() where typename='{1}' and datatype={2}", authorizetype, typename, datatype);

                        break;
                }

                objcommon.WriteLog("DBQueryHandler", "Update_Un_Authorized Query : " + strQuery);
                result = this.database.execute(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Update_Un_Authorized Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public DataTable Get_SystemShareData(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        //strQuery.AppendFormat(" select distinct device_id,share_name as 'ShareName', Path as 'Path' ,description as 'Description',caption as 'Caption',installeddate as 'InstalledDate',status from node_share_info ");
                        //strQuery.AppendFormat(" select distinct device_id,caption as 'ShareName', path as 'Path' ,description as 'Description',caption as 'Caption',installeddate as 'InstalledDate',status from node_share_info ");
                        strQuery.AppendFormat(" select distinct device_id,share_name,case path when 'NA' then '' else path end as path,case description when 'NA' then '' else description end as description from node_share_info where device_id={0} ", deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_SystemShareData Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_SystemShareData Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_SystemUserData(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        //strQuery.AppendFormat(" select distinct device_id,username as 'UserName','admin' as groupname,case disabled when -1 then 'Disabled' else 'Enabled' end as status,caption as 'Caption',description as 'Description',install_date as 'Installed Date' ");
                        //strQuery.AppendFormat(" from user_table where device_id={0} and local_account='-1' order by username ", deviceid);

                        //strQuery.AppendFormat(" select distinct device_id,username as 'UserName','admin' as groupname,case disabled when -1 then 'Disabled' else 'Enabled' end as status,caption as 'Caption',description as 'Description' ");
                        //strQuery.AppendFormat(" from user_table where device_id={0} and local_account='-1' order by username ", deviceid);

                        strQuery.AppendFormat(" select distinct device_id,username as 'UserName','admin' as groupname,case disabled when -1 then 'Disabled' else 'Enabled' end as status,description as 'Description' ");
                        strQuery.AppendFormat(" from user_table where device_id={0} and local_account='-1' order by username ", deviceid);

                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_SystemUserData Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_SystemUserData Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public int Check_UserAction(string DeviceID, string UserName)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select count(*) from e122appliedpolicymaster where deviceid={0} and param1='Age' and ruletype=5 and param2=0", DeviceID);
                        strQuery.AppendFormat(" and username='{0}'", UserName);
                        break;
                }

                objcommon.WriteLog("DBQueryHandler", "Check_UserAction Query : " + strQuery);
                result = this.database.getIntValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Check_UserAction Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int Set_UserAction(string DeviceID, string UserName, int Action)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("insert into e122appliedpolicymaster (deviceid,username,ruletype,param1,param2,param3,applytime)");
                        strQuery.AppendFormat("values ({0},'{1}',5,'Age',0,{2},getdate())", DeviceID, UserName, Action);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("insert into e122appliedpolicymaster (deviceid,username,ruletype,param1,param2,param3,applytime)");
                        strQuery.AppendFormat("values ({0},'{1}',5,'Age',0,{2},now())", DeviceID, UserName, Action);
                        break;
                }

                objcommon.WriteLog("DBQueryHandler", "Set_UserAction Query : " + strQuery);
                result = this.database.execute(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Set_UserAction Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int Update_UserAction(string DeviceID, string UserName, int Action)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("update e122appliedpolicymaster set param3 ={2}, applytime=getdate(),ack=null,status=null,epochtime =null,removaltime=null where ruletype=5 and deviceid={0} and username='{1}' and param1='Age'", DeviceID, UserName, Action);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("update e122appliedpolicymaster set param3 ={2}, applytime=now(),ack=null,status=null,epochtime =null,removaltime=null where ruletype=5 and deviceid={0} and username='{1}' and param1='Age'", DeviceID, UserName, Action);
                        break;
                }

                objcommon.WriteLog("DBQueryHandler", "Update_UserAction Query : " + strQuery);
                result = this.database.execute(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Update_UserAction Exception : " + ex.Message.ToString());
            }
            return result;
        }

        #endregion
        #region Datalekage Report and Charts
        public DataTable Get_Mediawise_Datalekage(string Startdate, string Enddate)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        //strQuery.AppendFormat(" select type1 as 'Label',count(*) as 'Value' from (select case type when 1 then 'HDD To USB' when 2 then 'USB To HDD' when 5 then 'HDD To CD-Drive'");
                        //strQuery.AppendFormat(" when 8 then 'Share To HDD' else 'Share To HDD' end as type1 from node_data_leakage,device_linkage where device_linkage.device_id=node_data_leakage.device_id and size!=0  and server_time between '{0}' and '{1}' and type in(1,2,5,8) and device_linkage.status<>-1 )T group by type1", Startdate, Enddate);

                        strQuery.AppendFormat(" select type1 as 'Label',count(*) as 'Value' from (select case type when 1 then 'Create' when 2 then 'Change' when 3 then 'Rename' when 4 then 'Delete' end as type1");
                        strQuery.AppendFormat("  from node_data_leakage,device_linkage where device_linkage.device_id=node_data_leakage.device_id  and server_time between '{0}' and '{1}' and type in(1,2,3,4) and device_linkage.status<>-1 )T group by type1", Startdate, Enddate);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Mediawise_Datalekage Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Mediawise_Datalekage Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_BranchOUWise_Datalekage(string Startdate, string Enddate)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        //strQuery.AppendFormat(" select top 10 dl.ou_node_name as 'Label',count(dl.device_id) as 'Value'  from (select device_id from node_data_leakage where server_time between '{0}' and '{1}' and size!=0 ", Startdate, Enddate);
                        //strQuery.AppendFormat(" )T,device_linkage dl where dl.device_id=t.device_id  and dl.status<>-1 group by dl.ou_node_name order by 2 desc");

                        strQuery.AppendFormat(" select top 10 dl.ou_node_name as 'Label',count(dl.device_id) as 'Value'  from (select device_id from node_data_leakage where server_time between '{0}' and '{1}' and type in (1,2,3,4) ", Startdate, Enddate);
                        strQuery.AppendFormat(" )T,device_linkage dl where dl.device_id=t.device_id  and dl.status<>-1 group by dl.ou_node_name order by 2 desc");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select dl.ou_node_name as 'Label',count(dl.device_id) as 'Value'  from (select device_id from node_data_leakage where server_time between '{0}' and '{1}' and size!=0  ", Startdate, Enddate);
                        strQuery.AppendFormat(" )T,device_linkage dl where dl.device_id=t.device_id  and dl.status<>-1 group by dl.ou_node_name order by 2 desc limit 10");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_BranchOUWise_Datalekage Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_BranchOUWise_Datalekage Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_IPwise_Datalekage(string Startdate, string Enddate)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        //strQuery.AppendFormat(" select top 10 dl.ip as 'Label',count(dl.device_id) as 'Value'  from (select device_id from node_data_leakage where server_time between '{0}' and '{1}' and size!=0  ", Startdate, Enddate);
                        //strQuery.AppendFormat(" )T,device_linkage dl where dl.device_id=t.device_id  and dl.status<>-1 group by dl.ip order by 2 desc");
                        strQuery.AppendFormat(" select top 10 dl.ip as 'Label',count(dl.device_id) as 'Value'  from (select device_id from node_data_leakage where server_time between '{0}' and '{1}' and type in (1,2,3,4)  ", Startdate, Enddate);
                        strQuery.AppendFormat(" )T,device_linkage dl where dl.device_id=t.device_id  and dl.status<>-1 group by dl.ip order by 2 desc");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select dl.ip as 'Label',count(dl.device_id) as 'Value'  from (select device_id from node_data_leakage where server_time between '{0}' and '{1}' and size!=0  ", Startdate, Enddate);
                        strQuery.AppendFormat(" )T,device_linkage dl where dl.device_id=t.device_id  and dl.status<>-1 group by dl.ip order by 2 desc limit 10 ");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_IPwise_Datalekage Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_IPwise_Datalekage Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_FileTypeWise_Datalekage(string Startdate, string Enddate)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        //strQuery.AppendFormat(" select 'Audio/Video' as 'Label',count(*) as  'Value' from node_data_leakage e,device_linkage d where d.device_id=e.device_id and size!=0 and server_time between '{0}' and '{1}' and (destination_path like '%.mp3' or destination_path like '%.mp4' or destination_path like '%.wav' or destination_path like '%.mkv') and d.status<>-1 union all ", Startdate, Enddate);
                        //strQuery.AppendFormat(" select 'MS-Office' as 'Label',count(*) as  'Value' from node_data_leakage e,device_linkage d where d.device_id=e.device_id and size!=0 and size!=0 and server_time between '{0}' and '{1}' and (destination_path like '%.doc' or destination_path like '%.docx' or destination_path like '%.xlsx' or destination_path like '%.xls' or destination_path like '%.ppt' or destination_path like '%.xps' or destination_path like '%.mdb' or destination_path like '%.accdb' ) and d.status<>-1 union all ", Startdate, Enddate);
                        //strQuery.AppendFormat(" select 'PDF' as 'Label',count(*) as  'Value' from node_data_leakage e,device_linkage d where d.device_id=e.device_id and size!=0 and server_time between '{0}' and '{1}' and (destination_path like '%.pdf' ) and d.status<>-1 union all select 'EXE/Msi' as 'Label',count(*) as  'Value'  from node_data_leakage e,device_linkage d where d.device_id=e.device_id and size!=0 and server_time between '{0}' and '{1}' and (destination_path like '%.exe' or destination_path like '%.msi') and d.status<>-1 union all", Startdate, Enddate);
                        //strQuery.AppendFormat(" select 'Rar/Zip' as 'Label',count(*) as  'Value' from node_data_leakage e,device_linkage d where d.device_id=e.device_id and size!=0  and server_time between '{0}' and '{1}' and (destination_path like '%.rar' or destination_path like '%.zip' )  union all  select 'other' as 'Label',count(*) as  'Value' from node_data_leakage  e,device_linkage d where d.device_id=e.device_id and size!=0 and server_time between '{0}' and '{1}' and (destination_path not like '%.rar' and destination_path not like '%.zip') and ", Startdate, Enddate);
                        //strQuery.AppendFormat(" ( destination_path not like '%.exe' and destination_path not like '%.msi') and (destination_path not like '%.pdf' ) and (destination_path not like '%.doc' and destination_path not like '%.docx' and destination_path not like '%.xlsx' and destination_path not like '%.xls'  and destination_path not like '%.ppt' and destination_path not like '%.xps' and destination_path not like '%.mdb' and destination_path not like '%.accdb' )  and (destination_path not like '%.mp3' and destination_path not like '%.mp4' and destination_path not like '%.wav') and d.status<>-1 ");

                        strQuery.AppendFormat(" select 'Audio/Video' as 'Label',count(*) as  'Value' from node_data_leakage e,device_linkage d where d.device_id=e.device_id and type in (1,2,3,4) and server_time between '{0}' and '{1}' and (source_path like '%.mp3' or source_path like '%.mp4' or source_path like '%.wav' or source_path like '%.mkv') and d.status<>-1 union all ", Startdate, Enddate);
                        strQuery.AppendFormat(" select 'MS-Office' as 'Label',count(*) as  'Value' from node_data_leakage e,device_linkage d where d.device_id=e.device_id and type in (1,2,3,4) and server_time between '{0}' and '{1}' and (source_path like '%.doc' or source_path like '%.docx' or source_path like '%.xlsx' or source_path like '%.xls' or source_path like '%.ppt' or source_path like '%.xps' or source_path like '%.mdb' or source_path like '%.accdb' ) and d.status<>-1 union all ", Startdate, Enddate);
                        strQuery.AppendFormat(" select 'PDF' as 'Label',count(*) as  'Value' from node_data_leakage e,device_linkage d where d.device_id=e.device_id and type in (1,2,3,4) and server_time between '{0}' and '{1}' and (source_path like '%.pdf' ) and d.status<>-1 union all select 'EXE/Msi' as 'Label',count(*) as  'Value'  from node_data_leakage e,device_linkage d where d.device_id=e.device_id and type in (1,2,3,4) and server_time between '{0}' and '{1}' and (source_path like '%.exe' or source_path like '%.msi') and d.status<>-1 union all", Startdate, Enddate);
                        strQuery.AppendFormat(" select 'Rar/Zip' as 'Label',count(*) as  'Value' from node_data_leakage e,device_linkage d where d.device_id=e.device_id and type in (1,2,3,4)  and server_time between '{0}' and '{1}' and (source_path like '%.rar' or source_path like '%.zip' )  union all  select 'other' as 'Label',count(*) as  'Value' from node_data_leakage  e,device_linkage d where d.device_id=e.device_id and type in (1,2,3,4) and server_time between '{0}' and '{1}' and (source_path not like '%.rar' and source_path not like '%.zip') and ", Startdate, Enddate);
                        strQuery.AppendFormat(" ( source_path not like '%.exe' and source_path not like '%.msi') and (source_path not like '%.pdf' ) and (source_path not like '%.doc' and source_path not like '%.docx' and source_path not like '%.xlsx' and source_path not like '%.xls'  and source_path not like '%.ppt' and source_path not like '%.xps' and source_path not like '%.mdb' and source_path not like '%.accdb' )  and (source_path not like '%.mp3' and source_path not like '%.mp4' and source_path not like '%.wav') and d.status<>-1 ");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select 'Audio/Video' as 'Label',count(*) as  'Value' from node_data_leakage e,device_linkage d where d.device_id=e.device_id and size!=0 and server_time between '{0}' and '{1}' and (destination_path like '%.mp3' or destination_path like '%.mp4' or destination_path like '%.wav' or destination_path like '%.mkv') and d.status<>-1   union all ", Startdate, Enddate);
                        strQuery.AppendFormat(" select 'MS-Office' as 'Label',count(*) as  'Value' from node_data_leakage e,device_linkage d where d.device_id=e.device_id and size!=0  and server_time between '{0}' and '{1}' and (destination_path like '%.doc' or destination_path like '%.docx' or destination_path like '%.xlsx' or destination_path like '%.xls' or destination_path like '%.ppt' or destination_path like '%.xps' or destination_path like '%.mdb' or destination_path like '%.accdb' ) and d.status<>-1   union all ", Startdate, Enddate);
                        strQuery.AppendFormat(" select 'PDF' as 'Label',count(*) as  'Value' from node_data_leakage e,device_linkage d where d.device_id=e.device_id and size!=0 and server_time between '{0}' and '{1}' and (destination_path like '%.pdf' ) and d.status<>-1  union all   select 'EXE/Msi' as 'Label',count(*) as  'Value'  from node_data_leakage e,device_linkage d where d.device_id=e.device_id and size!=0 and server_time between '{0}' and '{1}' and (destination_path like '%.exe' or destination_path like '%.msi')  and d.status<>-1  union all", Startdate, Enddate);
                        strQuery.AppendFormat(" select 'Rar/Zip' as 'Label',count(*) as  'Value' from node_data_leakage e,device_linkage d where d.device_id=e.device_id and size!=0  and server_time between '{0}' and '{1}' and (destination_path like '%.rar' or destination_path like '%.zip' ) and d.status<>-1   union all  select 'other' as 'Label',count(*) as  'Value' from node_data_leakage  e,device_linkage d where d.device_id=e.device_id and size!=0 and server_time between '{0}' and '{1}' and (destination_path not like '%.rar' and destination_path not like '%.zip') and ", Startdate, Enddate);
                        strQuery.AppendFormat(" ( destination_path not like '%.exe' and destination_path not like '%.msi') and (destination_path not like '%.pdf' ) and (destination_path not like '%.doc' and destination_path not like '%.docx' and destination_path not like '%.xlsx' and destination_path not like '%.xls' and destination_path not like '%.ppt' and destination_path not like '%.xps' and destination_path not like '%.mdb' and destination_path not like '%.accdb' )  and (destination_path not like '%.mp3' and destination_path not like '%.mp4' and destination_path not like '%.wav') and d.status<>-1 ");
                        break;

                }
                objcommon.WriteLog("DBQueryHandler", "Get_FileTypeWise_Datalekage Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_FileTypeWise_Datalekage Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_TopDataLeakageAlert(string Startdate, string Enddate)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        //strQuery.AppendFormat(" select 'Audio/Video' as 'Label',count(*) as  'Value' from node_data_leakage e,device_linkage d where d.device_id=e.device_id and server_time between '{0}' and '{1}' and (destination_path like '%.mp3' or destination_path like '%.mp4' or destination_path like '%.wav' or destination_path like '%.mkv') and d.status<>-1 and e.size != 0 union all ", Startdate, Enddate);
                        //strQuery.AppendFormat(" select 'MS-Office' as 'Label',count(*) as  'Value' from node_data_leakage e,device_linkage d where d.device_id=e.device_id and server_time between '{0}' and '{1}' and (destination_path like '%.doc' or destination_path like '%.docx' or destination_path like '%.xlsx' or destination_path like '%.ppt' or destination_path like '%.xps' or destination_path like '%.mdb' or destination_path like '%.accdb' ) and d.status<>-1 and e.size != 0 union all ", Startdate, Enddate);
                        //strQuery.AppendFormat(" select 'PDF' as 'Label',count(*) as  'Value' from node_data_leakage e,device_linkage d where d.device_id=e.device_id and server_time between '{0}' and '{1}' and (destination_path like '%.pdf' )  and d.status<>-1 and e.size != 0 union all select 'EXE/Msi' as 'Label',count(*) as  'Value'  from node_data_leakage e,device_linkage d where d.device_id=e.device_id and server_time between '{0}' and '{1}' and (destination_path like '%.exe' or destination_path like '%.msi') and d.status<>-1 and e.size != 0 union all", Startdate, Enddate);
                        //strQuery.AppendFormat(" select 'Rar/Zip' as 'Label',count(*) as  'Value' from node_data_leakage e,device_linkage d where d.device_id=e.device_id and server_time between '{0}' and '{1}' and (destination_path like '%.rar' or destination_path like '%.zip' ) and e.size != 0 union all  select 'other' as 'Label',count(*) as  'Value' from node_data_leakage  e,device_linkage d where d.device_id=e.device_id and server_time between '{0}' and '{1}' and (destination_path not like '%.rar' and destination_path not like '%.zip') and ", Startdate, Enddate);
                        //strQuery.AppendFormat(" ( destination_path not like '%.exe' and destination_path not like '%.msi') and (destination_path not like '%.pdf' ) and (destination_path not like '%.doc' and destination_path not like '%.docx' and destination_path not like '%.xlsx' and destination_path not like '%.ppt' and destination_path not like '%.xps' and destination_path not like '%.mdb' and destination_path not like '%.accdb' )  and (destination_path not like '%.mp3' and destination_path not like '%.mp4' and destination_path not like '%.wav') and d.status<>-1 and e.size != 0 ");

                        strQuery.AppendFormat(" select 'Audio/Video' as 'Label',count(*) as  'Value' from node_data_leakage e,device_linkage d where d.device_id=e.device_id and server_time between '{0}' and '{1}' and (source_path like '%.mp3' or source_path like '%.mp4' or source_path like '%.wav' or source_path like '%.mkv') and d.status<>-1 and type in (1,2,3,4) union all ", Startdate, Enddate);
                        strQuery.AppendFormat(" select 'MS-Office' as 'Label',count(*) as  'Value' from node_data_leakage e,device_linkage d where d.device_id=e.device_id and server_time between '{0}' and '{1}' and (source_path like '%.doc' or source_path like '%.docx' or source_path like '%.xlsx' or source_path like '%.ppt' or source_path like '%.xps' or source_path like '%.mdb' or source_path like '%.accdb' ) and d.status<>-1 and type in (1,2,3,4) union all ", Startdate, Enddate);
                        strQuery.AppendFormat(" select 'PDF' as 'Label',count(*) as  'Value' from node_data_leakage e,device_linkage d where d.device_id=e.device_id and server_time between '{0}' and '{1}' and (source_path like '%.pdf' )  and d.status<>-1 and type in (1,2,3,4) union all select 'EXE/Msi' as 'Label',count(*) as  'Value'  from node_data_leakage e,device_linkage d where d.device_id=e.device_id and server_time between '{0}' and '{1}' and (source_path like '%.exe' or source_path like '%.msi') and d.status<>-1 and type in (1,2,3,4) union all", Startdate, Enddate);
                        strQuery.AppendFormat(" select 'Rar/Zip' as 'Label',count(*) as  'Value' from node_data_leakage e,device_linkage d where d.device_id=e.device_id and server_time between '{0}' and '{1}' and (source_path like '%.rar' or source_path like '%.zip' ) and type in (1,2,3,4) union all  select 'other' as 'Label',count(*) as  'Value' from node_data_leakage  e,device_linkage d where d.device_id=e.device_id and server_time between '{0}' and '{1}' and (source_path not like '%.rar' and source_path not like '%.zip') and ", Startdate, Enddate);
                        strQuery.AppendFormat(" ( source_path not like '%.exe' and source_path not like '%.msi') and (source_path not like '%.pdf' ) and (source_path not like '%.doc' and source_path not like '%.docx' and source_path not like '%.xlsx' and source_path not like '%.ppt' and source_path not like '%.xps' and source_path not like '%.mdb' and source_path not like '%.accdb' )  and (source_path not like '%.mp3' and source_path not like '%.mp4' and source_path not like '%.wav') and d.status<>-1 and type in (1,2,3,4) ");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select 'Audio/Video' as 'Label',count(*) as  'Value' from node_data_leakage e,device_linkage d where d.device_id=e.device_id and server_time between '{0}' and '{1}' and (destination_path like '%.mp3' or destination_path like '%.mp4' or destination_path like '%.wav' or destination_path like '%.mkv') and d.status<>-1 and e.size != 0 union all ", Startdate, Enddate);
                        strQuery.AppendFormat(" select 'MS-Office' as 'Label',count(*) as  'Value' from node_data_leakage e,device_linkage d where d.device_id=e.device_id and server_time between '{0}' and '{1}' and (destination_path like '%.doc' or destination_path like '%.docx' or destination_path like '%.xlsx' or destination_path like '%.xls' or destination_path like '%.ppt' or destination_path like '%.xps' or destination_path like '%.mdb' or destination_path like '%.accdb' ) and d.status<>-1 and e.size != 0 union all ", Startdate, Enddate);
                        strQuery.AppendFormat(" select 'PDF' as 'Label',count(*) as  'Value' from node_data_leakage e,device_linkage d where d.device_id=e.device_id and server_time between '{0}' and '{1}' and (destination_path like '%.pdf' ) and d.status<>-1 and e.size != 0 union all select 'EXE/Msi' as 'Label',count(*) as  'Value'  from node_data_leakage e,device_linkage d where d.device_id=e.device_id and server_time between '{0}' and '{1}' and (destination_path like '%.exe' or destination_path like '%.msi')  and d.status<>-1 and e.size != 0 union all", Startdate, Enddate);
                        strQuery.AppendFormat(" select 'Rar/Zip' as 'Label',count(*) as  'Value' from node_data_leakage e,device_linkage d where d.device_id=e.device_id and server_time between '{0}' and '{1}' and (destination_path like '%.rar' or destination_path like '%.zip' ) and d.status<>-1 and e.size != 0 union all  select 'other' as 'Label',count(*) as  'Value' from node_data_leakage  e,device_linkage d where d.device_id=e.device_id and server_time between '{0}' and '{1}' and (destination_path not like '%.rar' and destination_path not like '%.zip') and ", Startdate, Enddate);
                        strQuery.AppendFormat(" ( destination_path not like '%.exe' and destination_path not like '%.msi') and (destination_path not like '%.pdf' ) and (destination_path not like '%.doc' and destination_path not like '%.docx' and destination_path not like '%.xlsx' and destination_path not like '%.xls' and destination_path not like '%.ppt' and destination_path not like '%.xps' and destination_path not like '%.mdb' and destination_path not like '%.accdb' )  and (destination_path not like '%.mp3' and destination_path not like '%.mp4' and destination_path not like '%.wav') and d.status<>-1 and e.size != 0 ");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_TopDataLeakageAlert Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_TopDataLeakageAlert Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        public DataTable Get_syatemname_ip(string strouid)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select device_id,device_name,ip,ou_longname from device_linkage dl where dl.status<>-1 and device_mode in (1,2,3) and ou_id in ({0})", strouid);
                        //strQuery.AppendFormat(" select dl.device_id,dl.device_name,dl.ip,dl.ou_longname from device_linkage dl inner join device_master dm on dl.device_id = dm.device_id where dl.status <> -1 and dm.device_mode in (1,2,3) and dl.ou_id in ({0})", strouid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_syatemname_ip Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_syatemname_ip Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_syatemname_ip(string strouid, string strCond)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select device_id,device_name,ip,ou_longname from device_linkage dl where dl.status<>-1 and device_mode in (1,2,3) and ou_id in ({0}) {1}", strouid, strCond);
                        //strQuery.AppendFormat(" select dl.device_id,dl.device_name,dl.ip,dl.ou_longname from device_linkage dl inner join device_master dm on dl.device_id = dm.device_id where dl.status <> -1 and dm.device_mode in (1,2,3) and dl.ou_id in ({0})", strouid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_syatemname_ip Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_syatemname_ip Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_syatemname_ip_PresentlyLinked(string strouid)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select dl.device_id,dl.device_name,dl.ip,dl.ou_longname from device_linkage dl inner join device_master dm on dm.device_id = dl.device_id ");
                        strQuery.AppendFormat(" where dl.status <> -1 and dm.active = 1  and dl.device_mode in (1, 2, 3) and dm.status not in (-1, 90, 0) and dl.ou_id in ({0})", strouid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_syatemname_ip_PresentlyLinked Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_syatemname_ip_PresentlyLinked Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        public DataTable Get_syatemname_ip_PresentlyNotLinked(string strouid)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select dl.device_id,dl.device_name,dl.ip,dl.ou_longname from device_linkage dl inner join device_master dm on dm.device_id = dl.device_id ");
                        strQuery.AppendFormat(" where dl.status <> -1 and dm.active = 1  and dl.device_mode in (1, 2, 3) and dm.status not in (-1, 90, 1) and dl.ou_id in ({0})", strouid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_syatemname_ip_PresentlyNotLinked Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_syatemname_ip_PresentlyNotLinked Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        public DataTable Get_systemname_ip_NotMonitoring()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select distinct dl.device_name,dl.ip from new_device_details dl where dl.status = 1 and mac not in (select distinct mac from device_master where device_mode <> 0) and activedevice = 1 and len(dl.device_name) > 0 and dl.status<> -1");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_systemname_ip_NotMonitoring Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_systemname_ip_NotMonitoring Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        //public DataTable Get_syatemname_ip1()
        //{
        //    StringBuilder strQuery = new StringBuilder();
        //    try
        //    {
        //        switch (dbtype)
        //        {
        //            case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
        //            case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
        //                //strQuery.AppendFormat(" select dl.device_id,dl.device_name,dl.ip,dl.ou_longname from device_linkage dl,device_master dm where dm.device_id=dl.device_id and dm.status<>-1 and ou_id in ({0})", strouid);
        //                strQuery.AppendFormat(" select device_id,device_name,ip,ou_longname from device_linkage dl where dl.status<>-1");
        //                break;
        //        }
        //        objcommon.WriteLog("DBQueryHandler", "Get_syatemname_ip1 Query : " + strQuery.ToString());
        //        data_table = this.database.getDataTable(strQuery.ToString());

        //    }
        //    catch (Exception ex)
        //    {
        //        objcommon.WriteLog("DBQueryHandler", "Get_syatemname_ip1 Exception : " + ex.Message.ToString());
        //    }
        //    return data_table;
        //}


        //public DataTable Get_syatemname_ip(string strouid)
        //{
        //    StringBuilder strQuery = new StringBuilder();
        //    try
        //    {
        //        switch (dbtype)
        //        {
        //            case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
        //            case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
        //                strQuery.AppendFormat("  select dl.device_id,dl.device_name,dl.ip from device_linkage dl,device_master dm where dm.device_id=dl.device_id and dm.status<>-1 and ou_id in ({0})", strouid);
        //                break;
        //        }
        //        objcommon.WriteLog("DBQueryHandler", "Get_syatemname_ip Query : " + strQuery.ToString());
        //        data_table = this.database.getDataTable(strQuery.ToString());

        //    }
        //    catch (Exception ex)
        //    {
        //        objcommon.WriteLog("DBQueryHandler", "Get_syatemname_ip Exception : " + ex.Message.ToString());
        //    }
        //    return data_table;
        //}
        public DataTable Get_syatem_Data(string Startdate, string Enddate, string search)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        //strQuery.AppendFormat(" select d.device_id,d.device_name,d.ip,d.ou_longname,count(*) as count from node_data_leakage e,device_linkage d where d.device_id=e.device_id and d.status <> -1 and e.size != 0 and server_time between '{0}' and '{1}' {2} group by  d.device_id,d.device_name,d.ip,d.ou_longname order by  d.device_name desc", Startdate, Enddate, search);
                        strQuery.AppendFormat(" select d.device_id,d.device_name,d.ip,d.ou_longname,count(*) as count from node_data_leakage e,device_linkage d where d.device_id=e.device_id and d.status <> -1 and e.type in (1,2,3,4) and server_time between '{0}' and '{1}' {2} group by  d.device_id,d.device_name,d.ip,d.ou_longname order by  d.device_name desc", Startdate, Enddate, search);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_syatem_Data Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_syatem_Data Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public string datalekage_Serching(string searchtype, string search)
        {
            string searching = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        if (searchtype == "size1")
                        {
                            searching = " and isnull(cast(size as bigint)/1024,'0')  >= " + search;
                        }
                        else if (searchtype == "size2")
                        {
                            searching = " and isnull(cast(size as bigint)/1024,'0') <= " + search;
                        }
                        else
                        {
                            searching = " and " + searchtype + " like '%" + search + "%'";
                        }
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        if (searchtype == "size1")
                        {
                            searching = " and ifnull(cast(size as char) div 1024,'0')  >= " + search;
                        }
                        else if (searchtype == "size2")
                        {
                            searching = " and ifnull(cast(size as char) div 1024,'0') <= " + search;
                        }
                        //else if (searchtype == "parsename(destination_path,1)")
                        //{
                        //    searching = " and SUBSTRING_INDEX(destination_path,'.',-1) like '%" + search + "%'";
                        //}
                        else if (searchtype == "convert(varchar,server_time,120)")
                        {
                            searching = " and cast(date_format(server_time,'%Y-%m-%d %H:%i:%s') as char) like '%" + search + "%'";
                        }
                        //else
                        //{
                        //    searching = " and SUBSTRING_INDEX(destination_path,'.',-1) like '%" + search + "%'";
                        //}
                        break;
                }

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "datalekage_Serching Exception : " + ex.Message.ToString());
            }
            return searching;
        }
        public DataTable Get_syatem_datalekage_Data(string Startdate, string Enddate, string deviceid, string media, string serch)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        //strQuery.AppendFormat(" select convert(varchar,server_time,105) + ' ' + convert(varchar,server_time,108) as servertime, case type when 1 then 'HDD To USB' when 2 then 'USB To HDD' when 3 then 'NetworkDrive To Local HDD' when 4 then 'NetworkDrive To USB' when 5 then 'HDD To CD-Drive' ");
                        //strQuery.AppendFormat(" when 6 then 'USB To CD' when 7 then 'NetworkDrive to CD' when 8 then 'Share To HDD' end as type1,case destination_path when 'NA' then '' when 'NULL' then '' else parsename(destination_path,1) end as filetype,'Sandisk' as deviceused,");
                        //strQuery.AppendFormat(" case source_path when 'NA' then '' when 'NULL' then '' else source_path end as source_path,case destination_path when 'NA' then '' when 'NULL' then '' else destination_path end as destination_path,cast(isnull(cast(size as decimal)/1024,'0') as decimal(18,3)) as size from node_data_leakage where device_id={2} and size != 0 and server_time between '{0}' and '{1}' {3} {4}", Startdate, Enddate, deviceid, media, serch);

                        //strQuery.AppendFormat(" select convert(varchar,server_time,105) + ' ' + convert(varchar,server_time,108) as servertime, case type when 1 then 'Create' when 2 then 'Change' when 3 then 'Rename' when 4 then 'Delete' end as type1 ");
                        //strQuery.AppendFormat(" ,case type when 3 then source_path + ' to ' + destination_path else source_path end as filepath,case source_path when 'NA' then '' when 'NULL' then '' else parsename(source_path,1) end as filetype,'Sandisk' as deviceused,");
                        //strQuery.AppendFormat(" case source_path when 'NA' then '' when 'NULL' then '' else source_path end as source_path,case destination_path when 'NA' then '' when 'NULL' then '' else destination_path end as destination_path,cast(isnull(cast(size as decimal)/1024,'0') as decimal(18,3)) as size from node_data_leakage where device_id={2} and size != 0 and server_time between '{0}' and '{1}' {3} {4}", Startdate, Enddate, deviceid, media, serch);

                        strQuery.AppendFormat(" select convert(varchar,server_time,105) + ' ' + convert(varchar,server_time,108) as servertime, case type when 1 then 'Create' when 2 then 'Change' when 3 then 'Rename' when 4 then 'Delete' end as type1 ");
                        strQuery.AppendFormat(" ,case type when 3 then source_path + ' to ' + destination_path else source_path end as filepath,case source_path when 'NA' then '' when 'NULL' then '' else parsename(source_path,1) end as filetype,'Sandisk' as deviceused,");
                        strQuery.AppendFormat(" case source_path when 'NA' then '' when 'NULL' then '' else source_path end as source_path,case destination_path when 'NA' then '' when 'NULL' then '' else destination_path end as destination_path,cast(isnull(cast(size as decimal)/1024,'0') as decimal(18,3)) as size from node_data_leakage where device_id={2} and type in (1,2,3,4) and server_time between '{0}' and '{1}' {3} {4}", Startdate, Enddate, deviceid, media, serch);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select cast(date_format(server_time,'%d-%m-%Y %H:%i:%s') as char) as servertime, case type when 1 then 'HDD To USB' when 2 then 'USB To HDD' when 3 then 'NetworkDrive To Local HDD' when 4 then 'NetworkDrive To USB' when 5 then 'HDD To CD-Drive' ");
                        strQuery.AppendFormat(" when 6 then 'USB To CD' when 7 then 'NetworkDrive to CD' when 8 then 'Share To HDD' end as type1, case destination_path when 'NA' then '' when 'NULL' then '' else SUBSTRING_INDEX(destination_path,'.',-1) end as filetype,'Sandisk' as deviceused,");
                        strQuery.AppendFormat(" case source_path when 'NA' then '' when 'NULL' then '' else source_path end as source_path,case destination_path when 'NA' then '' when 'NULL' then '' else destination_path end as destination_path,cast(ifnull(cast(size as decimal)/1024,'0') as decimal(18,3)) as size from node_data_leakage where device_id={2} and size != 0 and server_time between '{0}' and '{1}' {3} {4}", Startdate, Enddate, deviceid, media, serch);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_syatem_datalekage_Data Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_syatem_datalekage_Data Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable GetRawDataLeakage(string Startdate, string Enddate, string search, string FieldSerach)
        {
            StringBuilder strQuery = new StringBuilder();

            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        //strQuery.AppendFormat(" select convert(varchar,server_time,105) + ' ' + convert(varchar,server_time,108) as 'TimeStamp',dl.device_name as 'SystemName', dl.ip as IP, case destination_path when 'NA' then '' when 'NULL' then '' else parsename(destination_path,1) end as 'Filetype',case type when 1 then 'HDD to USB' when 2 then 'USB to HDD' when 3 then 'Share to HDD' when 4 then 'Share to Removable' when 5 then 'HDD to CDDrive' end as Media,case source_path when 'NA' then '' when 'NULL' then '' else source_path end as source_path,case destination_path when 'NA' then '' when 'NULL' then '' else destination_path end as destination_path, ");
                        //strQuery.AppendFormat(" cast(isnull(cast(size as decimal)/1024,'0') as decimal(18,3)) as size ,dl.ou_longname from node_data_leakage e, device_linkage dl where dl.device_id = e.device_id  and dl.status <>-1 and size != 0 and server_time between '{0}' and '{1}'{2} {3}", Startdate, Enddate, search, FieldSerach);

                        //strQuery.AppendFormat(" select convert(varchar,server_time,105) + ' ' + convert(varchar,server_time,108) as 'TimeStamp',dl.device_name as 'SystemName', dl.ip as IP, case source_path when 'NA' then '' when 'NULL' then '' else parsename(source_path,1) end as 'Filetype',case type when 1 then 'Create' when 2 then 'Change' when 3 then 'Rename' when 4 then 'Delete' end as type1,case type when 3 then source_path + ' to ' + destination_path else source_path end as filepath, case source_path when 'NA' then '' when 'NULL' then '' else source_path end as source_path,case destination_path when 'NA' then '' when 'NULL' then '' else destination_path end as destination_path, ");
                        //strQuery.AppendFormat(" cast(isnull(cast(size as decimal)/1024,'0') as decimal(18,3)) as size ,dl.ou_longname from node_data_leakage e, device_linkage dl where dl.device_id = e.device_id  and dl.status <>-1 and size != 0 and server_time between '{0}' and '{1}'{2} {3}", Startdate, Enddate, search, FieldSerach);

                        strQuery.AppendFormat(" select convert(varchar,server_time,105) + ' ' + convert(varchar,server_time,108) as 'TimeStamp',dl.device_name as 'SystemName', dl.ip as IP, case source_path when 'NA' then '' when 'NULL' then '' else parsename(source_path,1) end as 'Filetype',case type when 1 then 'Create' when 2 then 'Change' when 3 then 'Rename' when 4 then 'Delete' end as type1,case type when 3 then source_path + ' to ' + destination_path else source_path end as filepath, case source_path when 'NA' then '' when 'NULL' then '' else source_path end as source_path,case destination_path when 'NA' then '' when 'NULL' then '' else destination_path end as destination_path, ");
                        strQuery.AppendFormat(" cast(isnull(cast(size as decimal)/1024,'0') as decimal(18,3)) as size ,dl.ou_longname from node_data_leakage e, device_linkage dl where dl.device_id = e.device_id  and dl.status <>-1 and type in (1,2,3,4) and server_time between '{0}' and '{1}'{2} {3}", Startdate, Enddate, search, FieldSerach);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select cast(date_format(server_time,'%d-%m-%Y %H:%i:%s') as char) as 'TimeStamp',dl.device_name as 'SystemName', dl.ip as IP, case destination_path when 'NA' then '' when 'NULL' then '' else SUBSTRING_INDEX(destination_path,'.',-1) end as 'Filetype',case type when 1 then 'HDD to USB' when 2 then 'USB to HDD' when 3 then 'Share to HDD' when 4 then 'Share to Removable' when 5 then 'HDD to CDDrive' end as Media,case source_path when 'NA' then '' when 'NULL' then '' else source_path end as source_path,case destination_path when 'NA' then '' when 'NULL' then '' else destination_path end as destination_path, ");
                        strQuery.AppendFormat(" cast(ifnull(cast(size as decimal)/1024,'0') as decimal(18,3)) as size ,dl.ou_longname from node_data_leakage e, device_linkage dl where dl.device_id = e.device_id  and dl.status <>-1 and size != 0 and server_time between '{0}' and '{1}'{2} {3}", Startdate, Enddate, search, FieldSerach);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "GetRawDataLeakage Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "GetRawDataLeakage Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable GetDataLeakageChartDetails(string Startdate, string Enddate, string Condition)
        {
            StringBuilder strQuery = new StringBuilder();

            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select convert(varchar,server_time,105) + ' ' + convert(varchar,server_time,108) as 'TimeStamp',dl.device_name as 'SystemName', dl.ip as IP, case source_path when 'NA' then '' when 'NULL' then '' else parsename(source_path,1) end as 'Filetype',case type when 1 then 'Create' when 2 then 'Change' when 3 then 'Rename' when 4 then 'Delete' end as type1,case type when 3 then source_path + ' to ' + destination_path else source_path end as filepath, case source_path when 'NA' then '' when 'NULL' then '' else source_path end as source_path,case destination_path when 'NA' then '' when 'NULL' then '' else destination_path end as destination_path, ");
                        strQuery.AppendFormat(" cast(isnull(cast(size as decimal)/1024,'0') as decimal(18,3)) as size ,dl.ou_longname from node_data_leakage e, device_linkage dl where dl.device_id = e.device_id  and dl.status <>-1 and type in (1,2,3,4) and server_time between '{0}' and '{1}' {2}", Startdate, Enddate, Condition);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select convert(varchar,server_time,105) + ' ' + convert(varchar,server_time,108) as 'TimeStamp',dl.device_name as 'SystemName', dl.ip as IP, case source_path when 'NA' then '' when 'NULL' then '' else parsename(source_path,1) end as 'Filetype',case type when 1 then 'Create' when 2 then 'Change' when 3 then 'Rename' when 4 then 'Delete' end as type1,case type when 3 then source_path + ' to ' + destination_path else source_path end as filepath, case source_path when 'NA' then '' when 'NULL' then '' else source_path end as source_path,case destination_path when 'NA' then '' when 'NULL' then '' else destination_path end as destination_path, ");
                        strQuery.AppendFormat(" cast(isnull(cast(size as decimal)/1024,'0') as decimal(18,3)) as size ,dl.ou_longname from node_data_leakage e, device_linkage dl where dl.device_id = e.device_id  and dl.status <>-1 and type in (1,2,3,4) and server_time between '{0}' and '{1}' {2}", Startdate, Enddate, Condition);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "GetDataLeakageChartDetails Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "GetDataLeakageChartDetails Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable GetRemovablemedia(string Startdate, string Enddate, string search, string FieldSerach)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select device_name,ip,case login_user when 'NA' then '' when 'NULL' then '' else login_user end as login_user,e110deviceused,cast(diff/3600 as varchar) + ':' + cast((diff%3600)/60 as varchar) + ':' + cast(diff%60 as varchar) as 'duration' ,e110activity,diff,ou_longname, ");
                        strQuery.AppendFormat(" e110starttime,case e110endtime when 'NA' then '' when 'NULL' then '' else e110endtime end as e110endtime from ( select dl.device_name,dl.ip,nui.login_user,e110deviceused,convert(varchar,e110starttime,105) + ' ' + convert(varchar,e110starttime,108)as e110starttime, ");
                        strQuery.AppendFormat(" convert(varchar,e110endtime,105) + ' ' + convert(varchar,e110endtime,108) as e110endtime,datediff(ss,isnull(e110starttime,'{0}'),isnull(e110endtime,case when ('{1}' > convert(varchar, getdate(),120)) then getdate() end )) as diff,e110activity,ou_longname  ", Startdate, Enddate);
                        strQuery.AppendFormat(" from e110userremovable r,device_linkage dl, node_user_info nui where r.e110deviceid=dl.device_id and nui.device_id = e110deviceid and dl.status<>-1 and e110deviceused <> 'modem' {2} {3} and ((e110starttime > '{0}' and e110starttime < '{1}') or (e110endtime > '{0}' and e110endtime < '{1}')) )t1", Startdate, Enddate, search, FieldSerach);
                        //strQuery.AppendFormat(" select device_name,ip,e110loginby,e110deviceused,cast(diff/3600 as varchar) + ':' + cast((diff%3600)/60 as varchar) + ':' + cast(diff%60 as varchar) as 'duration' ,e110activity,diff,ou_longname ");
                        //strQuery.AppendFormat(" ,convert(varchar,e110serverstarttime,120) as e110serverstarttime,convert(varchar,e110serverendtime,120) as e110serverendtime from (  ");
                        //strQuery.AppendFormat(" select dl.device_name,dl.ip,e110loginby,e110deviceused,e110serverstarttime,e110serverendtime,datediff(ss,isnull(e110serverstarttime,'{0}'),isnull(e110serverendtime,case when ('{1}' > convert(varchar, getdate(),120)) then getdate() end )) as diff,e110activity,ou_longname  ", Startdate, Enddate);
                        //strQuery.AppendFormat(" from e110userremovable r,device_linkage dl where r.e110deviceid=dl.device_id and dl.status<>-1  and e110deviceused <> 'modem' {2} {3} and ((e110serverstarttime > '{0}' and e110serverstarttime < '{1}') or (e110serverendtime > '{0}' and e110serverendtime < '{1}')) )t1", Startdate, Enddate, search, FieldSerach);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select device_name,ip,case login_user when 'NA' then '' when 'NULL' then '' else login_user end as login_user,e110deviceused,e110activity,e110starttime,case e110endtime when 'NA' then '' when 'NULL' then '' else e110endtime end as e110endtime, ");
                        strQuery.AppendFormat(" case when diff < 0 then '-' else concat(floor(diff/3600) , ':' , floor((diff%3600)/60) , ':' , floor(diff%60)) end as 'duration', ");
                        strQuery.AppendFormat(" ou_longname from ( select device_name,ip,nui.login_user,e110deviceused,cast(date_format(e110starttime,concat('%d-%m-%y %H:%i:%s')) as char) as e110starttime,cast(date_format(e110endtime,concat('%d-%m-%y %H:%i:%s')) as char) as e110endtime, timestampdiff(second,ifnull(e110starttime,'{0}'),ifnull(e110endtime,case when ('{1}' > date_format(now(),'%d-%m-%y %H:%i:%s')) then now() end )) as diff, ", Startdate, Enddate);
                        strQuery.AppendFormat(" e110activity,ou_longname from e110userremovable ur,device_linkage dl, node_user_info nui where dl.device_id=ur.e110deviceid and nui.device_id = e110deviceid and dl.status<>-1 and e110deviceused <> 'modem' {2} {3} and ((e110starttime > '{0}' and e110starttime < '{1}') or (e110endtime > '{0}' and e110endtime < '{1}')) ) t1", Startdate, Enddate, search, FieldSerach);
                        //strQuery.AppendFormat(" select device_name,ip,e110loginby,e110deviceused,e110activity,cast(date_format(e110serverstarttime,concat('%d-%m-%y %H:%i:%s')) as char)  as e110serverstarttime, ");
                        //strQuery.AppendFormat(" cast(date_format(e110serverendtime,concat('%d-%m-%y %H:%i:%s')) as char) as e110serverendtime,case when diff < 0 then '-' else concat(floor(diff/3600) , ':' , floor((diff%3600)/60) , ':' , floor(diff%60)) end as 'duration', ");
                        //strQuery.AppendFormat(" ou_longname from ( select device_name,ip,e110loginby,e110deviceused,e110serverstarttime,e110serverendtime, timestampdiff(second,ifnull(e110serverstarttime,'{0}'),ifnull(e110serverendtime,case when ('{1}' > date_format(now(),'%d-%m-%y %H:%i:%s')) then now() end )) as diff, ", Startdate, Enddate);
                        //strQuery.AppendFormat(" e110activity,ou_longname from e110userremovable ur,device_linkage dl where dl.device_id=ur.e110deviceid and dl.status<>-1 and e110deviceused <> 'modem' {2} {3} and ((e110serverstarttime > '{0}' and e110serverstarttime < '{1}') or (e110serverendtime > '{0}' and e110serverendtime < '{1}')) ) t1", Startdate, Enddate, search, FieldSerach);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "GetRemovablemedia Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "GetRemovablemedia Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        public string Printer_Searching(string searchtype, string search)
        {
            string searching = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        if (searchtype == "device_timestamp")
                            searchtype = "convert(varchar,device_timestamp,120)";
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        if (searchtype == "device_timestamp")
                            searchtype = "cast(date_format(device_timestamp,'%m-%d-%Y %H:%i:%s') as char) ";
                        break;
                }
                searching = " and " + searchtype + " like '%" + search + "%'";
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Printer_Searching Exception : " + ex.Message.ToString());
            }
            return searching;
        }
        public DataTable GetPrinterUsage(string Startdate, string Enddate, string search, string FieldSerach)
        {
            StringBuilder strQuery = new StringBuilder();

            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select convert(varchar,device_timestamp,105) + ' ' + convert(varchar,device_timestamp,108) as device_timestamp,dl.device_name,ip,user_name,printer_name,doc,ou_longname,total_pages,location_name from node_printer_info p, device_linkage dl where p.device_id = dl.device_id and dl.status<>-1 ");
                        strQuery.AppendFormat(" and device_timestamp between '{0}' and '{1}' {2} {3}", Startdate, Enddate, search, FieldSerach);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select cast(date_format(device_timestamp,'%d-%m-%Y %H:%i:%s') as char) as device_timestamp,dl.device_name,ip,user_name,printer_name,doc,ou_longname,total_pages,location_name from node_printer_info p, device_linkage dl where p.device_id = dl.device_id and dl.status<>-1 ");
                        strQuery.AppendFormat(" and device_timestamp between '{0}' and '{1}' {2} {3}", Startdate, Enddate, search, FieldSerach);
                        break;

                }

                objcommon.WriteLog("DBQueryHandler", "GetPrinterUsage Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "GetPrinterUsage Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable GetPrinterUsageNew(string Startdate, string Enddate, string search, string FieldSerach)
        {
            StringBuilder strQuery = new StringBuilder();

            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select convert(varchar,device_timestamp,105) + ' ' + convert(varchar,device_timestamp,108) as device_timestamp,device_name,ip_address as ip,user_name,printer_name,document_name as doc,ou_long_name as ou_longname,total_pages,print_device from assertyitprinter.dbo.final_print_data ");
                        strQuery.AppendFormat(" where device_timestamp between '{0}' and '{1}' {2} {3}", Startdate, Enddate, search, FieldSerach);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select convert(varchar,device_timestamp,105) + ' ' + convert(varchar,device_timestamp,108) as device_timestamp,device_name,ip_address as ip,user_name,printer_name,document_name as doc,ou_long_name as ou_longname,total_pages,print_device from assertyitprinter.dbo.final_print_data ");
                        strQuery.AppendFormat(" where device_timestamp between '{0}' and '{1}' {2} {3}", Startdate, Enddate, search, FieldSerach);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "GetPrinterUsageNew Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "GetPrinterUsageNew Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_Printer()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select distinct printer_name as Printer  from node_printer_info order by printer_name");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Printer Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Printer Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_Printer_Name()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select distinct printer_name from assertyitprinter.dbo.final_print_data order by printer_name");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Printer_Name Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Printer_Name Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        public string Get_ParentOu_id(string ouid)
        {
            StringBuilder strQuery = new StringBuilder();
            string result = "";
            try
            {
                string strCond = "";
                if (ouid != null && ouid != "-1")
                    strCond = "where ou_nodelinkage_ouid=" + ouid;
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select ou_nodelinkage_allchild from ou_nodelinkage  {0} order by ou_nodelinkage_levelid", strCond);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_ParentOu_id Query : " + strQuery.ToString());
                result = this.database.getValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_ParentOu_id Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public string Get_device_id(string ip)
        {
            StringBuilder strQuery = new StringBuilder();
            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select device_id from device_master where {0} ", ip);
                        break;

                }
                objcommon.WriteLog("DBQueryHandler", "Get_device_id Query : " + strQuery.ToString());
                result = this.database.getValue(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_device_id Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public string Get_device_idby_systemname(string systemname)
        {
            StringBuilder strQuery = new StringBuilder();
            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select device_id from device_master where isnull(device_name,virtual_name)='{0}' ", systemname);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select device_id from device_master where ifnull(device_name,virtual_name)='{0}' ", systemname);
                        break;

                }
                objcommon.WriteLog("DBQueryHandler", "Get_device_idby_systemname Query : " + strQuery.ToString());
                result = this.database.getValue(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_device_idby_systemname Exception : " + ex.Message.ToString());
            }
            return result;
        }
        #endregion
        #region audit_report
        public DataTable get_audit_report_data(string search)
        {
            StringBuilder strQuery = new StringBuilder();

            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select top 1 device_id,ou_id,ou_longname,device_name,ip_address, mac_address,role_of_pc,machine_serial_no,pc_model,user_name,convert(varchar,getdate() ,105)+' '+ convert(varchar,getdate() ,108) as report_date,audited_by,bios_password,card_reader_disabled, wireless_nw_adapter_disabled, multiple_nw_card_disabled,multiple_booting_disabled,wake_on_lan_disabled,chassis_intrusion_enabled,bios_updated,win_password,screen_saver_psw,welcome_screen_available,no_lan_cards,ipv6_disabled,os_installed_on_date,os_with_services_pack,no_of_patches,os_last_updated_on,pirated_unactivated_os,av_installed,av_last_updated_on,malwarev_found,non_ip_address_connection_established,unwanted_sw_installed,actine_directory_domain_controller_impl,sccm_installed,firewall_installed_enabled,firewall_configured,encryption_tool_installed_sdesk,encryption_tool_sdesk_name,encryption_tool_installed_vcrypt,encryption_tool_vcrypt_name,encryption_tool_used,folder_sharing_exists,default_sharing_exists,password_policy_implemented,account_lockout_policy_implemented,audit_policy_implemented,no_of_user_account_present,guest_account_enabled,administrator_renamed,ctrl_alt_del_disabled,display_last_username_enabled,clear_virtual_memory_enabled,usage_of_admin_acct_for_daily_week,bluetooth_support_services,computer_browser,distributed_link_tracking_client,fax,ftp_publishing,ip_helper,iis_admin,net_metting_remote_desktop_sharing,remote_auto_connection_mgr,remote_desktop,remote_registry,routing_remote_access,ssdp,snmp_service,snmp_trap,telnet,wireless,remote_assistance,usb_port_enabled,wireless_enabled,wireless_enabled_wifi,wireless_enabled_bluetooth,usb_based_mass_storage_device_used_name,usb_based_mass_storage_device_used_date,internet_donagle_broadband_used_name,internet_donagle_broadband_used_date,mobile_phone_installed_name,mobile_phone_installed_date,air_gap_violation,adn_lan_standalone_pc_used_over_internet,cl_data_exist_on_pc,two_factor_authentication_impl_pc_handling_cl_data ,attempt_todelete_log_reg,unwanted_data_exists,unwanted_data_exists_videos,unwanted_data_exists_photos,unwanted_data_exists_songs,official_data_internet_pc,cmptr_name_appt_rank_based,unwanted_sites_accessed,making_labeling_pc_nw_cable,system_date_time_wrong,pc_logged_off_user_info_login_again,evidence_collected_pages,evidence_collected ");
                        strQuery.AppendFormat(" from compliance_management_summary {0} ", search);
                        //strQuery.AppendFormat("select * from compliance_management_summary {0} ", search);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select device_id,ou_id,ou_longname,device_name,ip_address, mac_address,role_of_pc,machine_serial_no,pc_model,user_name,convert(varchar,now() ,105)+' '+ convert(varchar,now() ,108) as report_date,audited_by,bios_password,card_reader_disabled, wireless_nw_adapter_disabled, multiple_nw_card_disabled,multiple_booting_disabled,wake_on_lan_disabled,chassis_intrusion_enabled,bios_updated,win_password,screen_saver_psw,welcome_screen_available,no_lan_cards,ipv6_disabled,os_installed_on_date,os_with_services_pack,no_of_patches,os_last_updated_on,pirated_unactivated_os,av_installed,av_last_updated_on,malwarev_found,non_ip_address_connection_established,unwanted_sw_installed,actine_directory_domain_controller_impl,sccm_installed,firewall_installed_enabled,firewall_configured,encryption_tool_installed_sdesk,encryption_tool_sdesk_name,encryption_tool_installed_vcrypt,encryption_tool_vcrypt_name,encryption_tool_used,folder_sharing_exists,default_sharing_exists,password_policy_implemented,account_lockout_policy_implemented,audit_policy_implemented,no_of_user_account_present,guest_account_enabled,administrator_renamed,ctrl_alt_del_disabled,display_last_username_enabled,clear_virtual_memory_enabled,usage_of_admin_acct_for_daily_week,bluetooth_support_services,computer_browser,distributed_link_tracking_client,fax,ftp_publishing,ip_helper,iis_admin,net_metting_remote_desktop_sharing,remote_auto_connection_mgr,remote_desktop,remote_registry,routing_remote_access,ssdp,snmp_service,snmp_trap,telnet,wireless,remote_assistance,usb_port_enabled,wireless_enabled,wireless_enabled_wifi,wireless_enabled_bluetooth,usb_based_mass_storage_device_used_name,usb_based_mass_storage_device_used_date,internet_donagle_broadband_used_name,internet_donagle_broadband_used_date,mobile_phone_installed_name,mobile_phone_installed_date,air_gap_violation,adn_lan_standalone_pc_used_over_internet,cl_data_exist_on_pc,two_factor_authentication_impl_pc_handling_cl_data ,attempt_todelete_log_reg,unwanted_data_exists,unwanted_data_exists_videos,unwanted_data_exists_photos,unwanted_data_exists_songs,official_data_internet_pc,cmptr_name_appt_rank_based,unwanted_sites_accessed,making_labeling_pc_nw_cable,system_date_time_wrong,pc_logged_off_user_info_login_again,evidence_collected_pages,evidence_collected ");
                        strQuery.AppendFormat(" from compliance_management_summary {0} limit 1", search);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "get_audit_report_data Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "get_audit_report_data Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_Audit_System_details(string search)
        {
            StringBuilder strQuery = new StringBuilder();

            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select ou_longname,devicename,ip,mac,date,nd.login_user from (select dm.device_id,dl.ou_node_name as ou_longname,isnull(dm.device_name,dm.virtual_name) as devicename,dm.ip,dm.mac,convert(varchar,getdate() ,105)+' '+ convert(varchar,getdate() ,108) as date from device_master dm,device_linkage dl  ");
                        strQuery.AppendFormat(" where dm.device_id=dl.device_id and dm.status<>-1 {0}   )T inner join node_user_info nd on T.device_id=nd.device_id  ", search);

                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select ou_longname,devicename,ip,mac,date,nd.login_user from (select dm.device_id,dl.ou_node_name as ou_longname,ifnull(dm.device_name,dm.virtual_name) as devicename,dm.ip,dm.mac,cast(date_format(now(),concat('%d-%m-%Y %h:%i:%s')) as char) as date from device_master dm,device_linkage dl  ");
                        strQuery.AppendFormat(" where dm.device_id=dl.device_id {0}  )T inner join node_user_info nd on T.device_id=nd.device_id  ", search);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Audit_System_details Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Audit_System_details Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public string Get_ScreenSaver_Password(string device_id)
        {
            StringBuilder strQueryBuilder = new StringBuilder();
            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQueryBuilder.AppendFormat("select case data1 when 1 then 'YES' when 0 then 'NO' end as e103screensaver from node_system_info where data_type = 3 and data_subtype = 2 and device_id = {0}", device_id);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat("select case data1 when 1 then 'YES' when 0 then 'NO' end as e103screensaver from node_system_info where data_type = 3 and data_subtype = 2 and device_id = {0}", device_id);
                        break;
                }

                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "Get_ScreenSaver_Password Query : " + strQuery);
                result = this.database.getValue(strQuery);
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_ScreenSaver_Password Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int Get_NoOf_Lancard(string device_id)
        {
            int result = 0;


            try
            {
                StringBuilder strQueryBuilder = new StringBuilder();

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" select  count(*) as 'Count' from node_networkcard_info where connection_status = '2' and device_id={0}", device_id);
                        break;
                }

                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "Get_NoOf_Lancard Query : " + strQuery);
                result = this.database.getIntValue(strQuery);


                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_NoOf_Lancard Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public DataTable Get_Os_Details(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();

            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select os,convert(varchar,os_installation_date,105) + ' ' +  convert(varchar,os_installation_date,108) as os_installation_date, os_license from (select dm.device_id,(select top 1 parameter_value from node_system_info_details nsd where type_id= 8 and parameter_name = 'caption' and device_id =nsd.device_id and device_id={0}) as os,(select top 1 cast(left(cast(convert(bigint,floor(substring(parameter_value,0,charindex('+',parameter_value,0)))) as char(14)), 8) as datetime) + cast(stuff(stuff(right(cast(convert(bigint,floor(substring(parameter_value,0,charindex('+',parameter_value,0)))) as char(14)), 6), 5, 0, ':'), 3, 0, ':') as datetime) from node_system_info_details nsd  where type_id= 8 and parameter_name = 'InstallDate' and device_id=nsd.device_id and device_id={0} ) as os_installation_date, (select distinct top 1 nsd.parameter_value from node_system_report_list nsr,node_system_info_details nsd where nsr.report_field_name=nsd.parameter_name and nsd.device_id = {0} and nsr.report_priority = 11) as os_license from device_master dm where dm.device_id={0} and dm.status not in (-1,99)  ) t where t.device_id ={0}", deviceid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select os,cast(date_format(os_installation_date, '%d-%m-%Y %H:%i:%s') as char) as os_installation_date, os_license from (select dm.device_id,(select top 1 parameter_value from node_system_info_details nsd type_id= 8 and parameter_name = 'caption' and  device_id = nsd.device_id and device_id = {0} limit 1) as os, (select concat( cast( substring(cast(left(cast(cast(floor(substring(parameter_value,1,locate('+',parameter_value))) as SIGNED) as char(14)), 8) as datetime),1,10) as char), ' ' , cast(insert(insert(right(cast(cast(floor(substring(parameter_value,1,locate('+',parameter_value))) as SIGNED) as char(14)), 6), 5, 0, ':'), 3, 0, ':') as char))  from node_system_info_details nsd  where type_id= 8 and parameter_name = 'InstallDate' and device_id = nsd.device_id and device_id = {0} limit 1) as os_installation_date, (select distinct nsd.parameter_value from node_system_report_list nsr,node_system_info_details nsd where nsr.report_field_name=nsd.parameter_name  and nsd.device_id = {0} and nsr.report_priority = 11 limit 1) as os_license from device_master dm where dm.device_id = {0} and dm.status not in (-1, 99)) t where t.device_id = {0} ", deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Os_Details Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Os_Details Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public string Get_AV_Details(string device_id)
        {
            StringBuilder strQueryBuilder = new StringBuilder();
            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        //strQueryBuilder.AppendFormat(" select case when count(*)>0 then 'YES' else 'NO' end as total from device_antivirus_updates where device_id={0}", device_id);
                        break;
                }

                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "Get_AV_Details Query : " + strQuery);
                result = this.database.getValue(strQuery);
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_AV_Details Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public string Get_Unwanted_Software(string device_id)
        {
            StringBuilder strQueryBuilder = new StringBuilder();
            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" select case when count(*)> 0 then 'YES' else 'NO' end as total from nodesoftwaredetails a where a.deviceid={0} and a.software in(select typename from authorizedata where datatype=1 and authorizetype=0) ", device_id);
                        break;
                }

                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "Get_Unwanted_Software Query : " + strQuery);
                result = this.database.getValue(strQuery);
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Unwanted_Software Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public string Get_ActiveDirectory_Domain(string device_id)
        {
            StringBuilder strQueryBuilder = new StringBuilder();
            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" select case when count(*)> 0 then 'YES' else 'NO' end as total from node_system_info where data_type=1 and data_subtype=2 and device_id={0} and data1 !='WORKGROUP'", device_id);
                        break;
                }
                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "Get_ActiveDirectory_Domain Query : " + strQuery);
                result = this.database.getValue(strQuery);
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_ActiveDirectory_Domain Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public string Get_SCCM_Details(string device_id)
        {
            StringBuilder strQueryBuilder = new StringBuilder();
            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" select case when count(*)> 0 then 'YES' else 'NO' end as total from node_service_info where device_id={0} and (service_name like '%SCCM%' or display_name like '%SCCM%')", device_id);
                        break;
                }

                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "Get_SCCM_Details Query : " + strQuery);
                result = this.database.getValue(strQuery);
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_SCCM_Details Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public string Get_Firewall_Status(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select case data1 when 0 then 'Disable' when 1 then 'Enabled' end as e103firewall from node_system_info where data_type=3 and data_subtype=1  and device_id= {0} ", deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Firewall_Status Query : " + strQuery.ToString());
                result = this.database.getValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Firewall_Status Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public DataTable Get_Encyption_Sdesk(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            DataTable dt = new DataTable();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select software,case when count(*)> 0 then 'YES' else 'NO' end as total from nodesoftwaredetails where deviceid={0} and software like '%SecureDesk%' group by software ", deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Encyption_Sdesk Query : " + strQuery.ToString());
                dt = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Encyption_Sdesk Exception : " + ex.Message.ToString());
            }
            return dt;
        }
        public DataTable Get_Encyption_VCrypt(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            DataTable dt = new DataTable();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select software,case when count(*)> 0 then 'YES' else 'NO' end as total from nodesoftwaredetails where deviceid={0} and software='VeraCrypt' group by software ", deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Encyption_VCrypt Query : " + strQuery.ToString());
                dt = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Encyption_VCrypt Exception : " + ex.Message.ToString());
            }
            return dt;
        }
        public string Get_Sharing_Folder(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select case when count(*) > 0 then 'YES' else 'NO' end as 'FolderSharing'  from node_share_info where device_id={0} and  share_type='0' ", deviceid);
                        break;

                }
                objcommon.WriteLog("DBQueryHandler", "Get_Sharing_Folder Query : " + strQuery.ToString());
                result = this.database.getValue(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Sharing_Folder Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public string Get_Sharing_Default(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select case when count(*) > 0 then 'YES' else 'NO' end as 'FolderSharing'  from node_share_info where device_id={0} and  caption='Default share' ", deviceid);
                        break;

                }
                objcommon.WriteLog("DBQueryHandler", "Get_Sharing_Default Query : " + strQuery.ToString());
                result = this.database.getValue(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Sharing_Default Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public DataTable Get_Audit_Service_Details(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();

            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select 'Bluetooth' as type,case state when 'Running' then 'Start' when 'Stopped' then 'Stop' end as state from node_service_info where (service_name = 'bthserv' or display_name = 'Bluetooth Support Service') and device_id={0} union all ", deviceid);
                        strQuery.AppendFormat(" select 'Computerbrowser' as type,case state when 'Running' then 'Start' when 'Stopped' then 'Stop' end as state from node_service_info where (service_name = 'Browser' or display_name = 'Computer Browser') and device_id={0} union all ", deviceid);
                        strQuery.AppendFormat(" select 'Distributedlink' as type,case state when 'Running' then 'Start' when 'Stopped' then 'Stop' end as state from node_service_info where (service_name = 'TrkWks' or display_name = 'Distributed Link Tracking Client') and device_id={0} union all ", deviceid);
                        strQuery.AppendFormat(" select 'Fax' as type,case state when 'Running' then 'Start' when 'Stopped' then 'Stop' end as state from node_service_info where (service_name = 'Fax' or display_name = 'Fax') and device_id={0} union all ", deviceid);
                        strQuery.AppendFormat(" select 'FTPpublishing' as type,case state when 'Running' then 'Start' when 'Stopped' then 'Stop' end as state from node_service_info where (service_name = 'MSFtpsvc' or display_name = 'FTP Publishing') and device_id={0} union all ", deviceid);
                        strQuery.AppendFormat(" select 'IPhelper' as type,case state when 'Running' then 'Start' when 'Stopped' then 'Stop' end as state from node_service_info where (service_name = 'iphlpsvc' or display_name = 'IP Helper') and device_id={0} union all ", deviceid);
                        strQuery.AppendFormat(" select 'IISadmin' as type, case state when 'Running' then 'Start' when 'Stopped' then 'Stop' end as state from node_service_info where (service_name = 'IISADMIN' or display_name = 'IIS Admin') and device_id={0} union all ", deviceid);
                        strQuery.AppendFormat(" select 'Netmeeting' as type,case state when 'Running' then 'Start' when 'Stopped' then 'Stop' end as state from node_service_info where (service_name = 'mnmsrvc' or display_name = 'NetMeeting Remote Desktop Sharing') and device_id={0} union all ", deviceid);
                        strQuery.AppendFormat(" select 'Remoteauto' as type, case state when 'Running' then 'Start' when 'Stopped' then 'Stop' end as state from node_service_info where (service_name = 'RasAuto' or display_name = 'Remote Access Auto Connection Manager') and device_id={0} union all ", deviceid);
                        strQuery.AppendFormat(" select 'Remotedesktop' as type, case state when 'Running' then 'Start' when 'Stopped' then 'Stop' end as state from node_service_info where (service_name = 'TermService' or display_name = 'Remote Desktop Services') and device_id={0} union all ", deviceid);
                        strQuery.AppendFormat(" select 'Remoteregistry' as type,case state when 'Running' then 'Start' when 'Stopped' then 'Stop' end as state from node_service_info where (service_name = 'RemoteRegistry' or display_name = 'Remote Registry') and device_id={0} union all ", deviceid);
                        strQuery.AppendFormat(" select 'Routingandremote' as type, case state when 'Running' then 'Start' when 'Stopped' then 'Stop' end as state from node_service_info where (service_name = 'RemoteAccess' or display_name = 'Routing and Remote Access') and device_id={0} union all ", deviceid);
                        strQuery.AppendFormat(" select 'Ssdp' as type,case state when 'Running' then 'Start' when 'Stopped' then 'Stop' end as state from node_service_info where (service_name = 'SSDPSRV' or display_name = 'SSDP Discovery') and device_id={0} union all ", deviceid);
                        strQuery.AppendFormat(" select 'SNMPservice' as type,case state when 'Running' then 'Start' when 'Stopped' then 'Stop' end as state from node_service_info where (service_name = 'SNMP' or display_name = 'SNMP Service') and device_id={0} union all ", deviceid);
                        strQuery.AppendFormat(" select 'SNMPtrap' as type,case state when 'Running' then 'Start' when 'Stopped' then 'Stop' end as state from node_service_info where (service_name = 'SNMPTRAP' or display_name = 'SNMP Trap') and device_id={0} union all ", deviceid);
                        strQuery.AppendFormat(" select 'Telnet' as type,case state when 'Running' then 'Start' when 'Stopped' then 'Stop' end as state from node_service_info where (service_name = 'TlntSvr' or display_name = 'Telnet') and device_id={0} union all ", deviceid);
                        strQuery.AppendFormat(" select 'Wireless' as type,case state when 'Running' then 'Start' when 'Stopped' then 'Stop' end as state from node_service_info where (service_name = 'WZCSVC' or display_name = 'Wireless Zero Configuration') and device_id={0} union all ", deviceid);
                        strQuery.AppendFormat(" select 'Remoteassistance' as type,case state when 'Running' then 'Start' when 'Stopped' then 'Stop' end as state from node_service_info where display_name like '%Remote Assistance%' and device_id={0} ", deviceid);

                        break;

                }
                objcommon.WriteLog("DBQueryHandler", "Get_Audit_Service_Details Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Audit_Service_Details Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public string Get_Password_Policy(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select case rm.param1 when 0 then 'NO' else 'YES' end as param1 from rules_master rm , deployment_linkage_master dlm where device_id={0} and rm.rules_id = dlm.rules_id  and rm.type = 4 and rm.subtype = 4 ", deviceid);
                        break;

                }
                objcommon.WriteLog("DBQueryHandler", "Get_Password_Policy Query : " + strQuery.ToString());
                result = this.database.getValue(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Password_Policy Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int Get_NoOf_UserAc(string device_id)
        {
            int result = 0;


            try
            {
                StringBuilder strQueryBuilder = new StringBuilder();

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" select count(*) as useraccount  from user_table where device_id={0} and local_account='-1'", device_id);
                        break;
                }

                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "Get_NoOf_UserAc Query : " + strQuery);
                result = this.database.getIntValue(strQuery);


                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_NoOf_UserAc Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public string Get_Guest_User_Status(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select case when count(*)> 0 then 'YES' else 'NO' end as total from user_table where device_id={0}  and disabled=0 and username='Guest' and local_account='-1'  ", deviceid);
                        break;

                }
                objcommon.WriteLog("DBQueryHandler", "Get_Guest_User_Status Query : " + strQuery.ToString());
                result = this.database.getValue(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Guest_User_Status Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public string Get_Administarator_renamed(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select case when count(*)> 0 then 'NO' else 'YES' end as total  from user_table  where device_id={0}  and username='Administrator' and local_account='-1'", deviceid);
                        break;

                }
                objcommon.WriteLog("DBQueryHandler", "Get_Administarator_renamed Query : " + strQuery.ToString());
                result = this.database.getValue(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Administarator_renamed Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public string Get_ctrl_alt_delete(string device_id)
        {
            StringBuilder strQueryBuilder = new StringBuilder();
            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQueryBuilder.AppendFormat("select case data1 when 1 then 'NO' when 0 then 'YES' end as e103screensaver from node_system_info where data_type = 3 and data_subtype = 3 and device_id = {0}", device_id);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat("select case data1 when 1 then 'NO' when 0 then 'YES' end as e103screensaver from node_system_info where data_type = 3 and data_subtype = 3 and device_id = {0}", device_id);
                        break;
                }
                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "Get_ScreenSaver_Password Query : " + strQuery);
                result = this.database.getValue(strQuery);
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_ctrl_alt_delete Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public string Get_Usage_of_Admin(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select case when count(*)> 0 then 'YES' else 'NO' end as total from node_pcoperations where username not like '3%' and device_id={0} ", deviceid);
                        break;

                }
                objcommon.WriteLog("DBQueryHandler", "Get_Usage_of_Admin Query : " + strQuery.ToString());
                result = this.database.getValue(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Usage_of_Admin Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public string Get_USBPort_Status(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select case when data1 = 1 then 'Yes' when data1 = 2 then 'Yes' when data1 = 3 then 'Yes' else 'No' end from node_system_info where device_id={0} and data_type=15 and  subtype_name='USBPORT'", deviceid);
                        //strQuery.AppendFormat(" select case rm.param1 when 0 then 'NO' else 'YES' end as param2 from rules_master rm , deployment_linkage_master dlm where device_id={0} and rm.rules_id = dlm.rules_id  and rm.type = 1 and rm.subtype = 6", deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_USBPort_Status Query : " + strQuery.ToString());
                result = this.database.getValue(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_USBPort_Status Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public string Get_Wireless_Status(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select case when count(*)> 0 then 'NO' else 'YES' end as param2 FROM e122appliedpolicymaster WHERE deviceid ={0} And  ruletype=1  AND  param1 in (10,12) and param2=0 ", deviceid);
                        break;

                }
                objcommon.WriteLog("DBQueryHandler", "Get_Wireless_Status Query : " + strQuery.ToString());
                result = this.database.getValue(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Wireless_Status Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public string Get_USBmass_Status(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select case when count(*)> 0 then 'YES' else 'NO' end as total from node_audit_trail where category_type=11 and  ( details like '%USB%' or details like 'HardDisk%' or details like '%USB%' ) and details not like 'CDDRIVE%' and device_id={0} ", deviceid);
                        break;

                }
                objcommon.WriteLog("DBQueryHandler", "Get_USBmass_Status Query : " + strQuery.ToString());
                result = this.database.getValue(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_USBmass_Status Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public string Get_USBmass_UsedDate(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select top 1 convert(varchar,servertime,120) as servertime from node_audit_trail where category_type=11 and  ( details like '%USB%' or details like 'HardDisk%' or details like '%USB%' ) and details not like 'CDDRIVE%' and device_id={0} order by servertime desc ", deviceid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select cast(date_format(servertime,'%Y-%d-%m %H:%i:%s') as char) as servertime from node_audit_trail where category_type=11 and  ( details like '%USB%' or details like 'HardDisk%' or details like '%USB%' ) and details not like 'CDDRIVE%' and device_id={0} order by servertime desc limit 1 ", deviceid);
                        break;

                }
                objcommon.WriteLog("DBQueryHandler", "Get_USBmass_UsedDate Query : " + strQuery.ToString());
                result = this.database.getValue(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_USBmass_UsedDate Exception : " + ex.Message.ToString());
            }
            return result;
        }

        public string Get_InternetDongal_Status(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select  case when count(*)> 0 then 'YES' else 'NO' end as total from node_internet_usage where device_id={0} ", deviceid);
                        break;

                }
                objcommon.WriteLog("DBQueryHandler", "Get_InternetDongal_Status Query : " + strQuery.ToString());
                result = this.database.getValue(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_InternetDongal_Status Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public string Get_InternetDongal_Useddate(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select  top 1 convert(varchar,starttime,120) as starttime from node_internet_usage where device_id={0} ", deviceid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select  cast(date_format(starttime,'%Y-%d-%m %H:%i:%s') as char) as starttime from node_internet_usage where device_id={0} limit 1 ", deviceid);
                        break;

                }
                objcommon.WriteLog("DBQueryHandler", "Get_InternetDongal_Useddate Query : " + strQuery.ToString());
                result = this.database.getValue(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_InternetDongal_Useddate Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public string Get_Unwanted_Data(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select case when count(*)> 0 then 'YES' else 'NO' end as total from e111filehistory where e111extension in('jpg','png','gif','mp3','mp4','mkv','mp4') and e111deviceid={0} ", deviceid);
                        break;

                }
                objcommon.WriteLog("DBQueryHandler", "Get_Unwanted_Data Query : " + strQuery.ToString());
                result = this.database.getValue(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Unwanted_Data Exception : " + ex.Message.ToString());
            }
            return result;
        }

        public int Get_PrinterData(string device_id)
        {
            int result = 0;


            try
            {
                StringBuilder strQueryBuilder = new StringBuilder();

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQueryBuilder.AppendFormat(" select sum(cast(total_pages as int)) as total  from node_printer_info where device_id={0} group by device_id", device_id);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" select sum(cast(total_pages as char)) as total  from node_printer_info where device_id={0} group by device_id", device_id);
                        break;
                }

                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "Get_PrinterData Query : " + strQuery);
                result = this.database.getIntValue(strQuery);


                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_PrinterData Exception : " + ex.Message.ToString());
            }
            return result;
        }

        public string Get_USB_Status(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select case when count(*)> 0 then 'NO' else 'YES' end as param2 from e122appliedpolicymaster where deviceid ={0} And  ruletype=1  AND  param1 = 7 and param2=0 ", deviceid);
                        break;

                }
                objcommon.WriteLog("DBQueryHandler", "Get_USB_Status Query : " + strQuery.ToString());
                result = this.database.getValue(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_USB_Status Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public string Get_CDRom_Writer(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select case when count(*)> 0 then 'NO' else 'YES' end as param2 from e122appliedpolicymaster where deviceid ={0} and  ruletype=1  and  param1 =1 and param2=0 ", deviceid);
                        break;

                }
                objcommon.WriteLog("DBQueryHandler", "Get_CDRom_Writer Query : " + strQuery.ToString());
                result = this.database.getValue(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_CDRom_Writer Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public string Get_Printerstatus(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select case when count(*)> 0 then 'NO' else 'YES' end as param2 from e122appliedpolicymaster where deviceid ={0} and  ruletype=1  and  param1 = 6 and param2=0 ", deviceid);
                        break;

                }
                objcommon.WriteLog("DBQueryHandler", "Get_Printerstatus Query : " + strQuery.ToString());
                result = this.database.getValue(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Printerstatus Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public string Get_SystemDateTime(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select case when t.total between -5 and 5 then 'No' else 'Yes' end from (select top 1 datediff(mi, servertime, device_timestamp) as total from node_audit_trail where device_id = {0} order by device_timestamp desc)t ", deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_SystemDateTime Query : " + strQuery.ToString());
                result = this.database.getValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_SystemDateTime Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public string Get_MotherBoard_Serialno(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select distinct serial_no from node_hardware_info where device_id = {0} and hardware_class='BaseBoard' ", deviceid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select distinct serial_no from node_hardware_info where device_id = {0} and hardware_class='BaseBoard' ", deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_MotherBoard_Serialno Query : " + strQuery.ToString());
                result = this.database.getValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_MotherBoard_Serialno Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public string Get_Computer_Model(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select distinct model_name from node_hardware_info where device_id = {0} and hardware_class='ComputerSystem' ", deviceid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select distinct model_name from node_hardware_info where device_id = {0} and hardware_class='ComputerSystem' ", deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Computer_Model Query : " + strQuery.ToString());
                result = this.database.getValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Computer_Model Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public string Get_IPV6_Disabled(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select case when data1 = 1 then 'No' else 'Yes' end  from node_system_info where device_id={0} and data_type=15 and  subtype_name='IPV6' ", deviceid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select case when data1 = 1 then 'No' else 'Yes' end  from node_system_info where device_id={0} and data_type=15 and  subtype_name='IPV6' ", deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_IPV6_Disabled Query : " + strQuery.ToString());
                result = this.database.getValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_IPV6_Disabled Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public string Get_OS_LastUpdated(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select top 1 param_value from csat_file_parse_data where device_id={0} and param_name='InstalledOn' order by convert(date, param_value,101) desc ", deviceid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select top 1 param_value from csat_file_parse_data where device_id={0} and param_name='InstalledOn' order by convert(date, param_value,101) desc ", deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_OS_LastUpdated Query : " + strQuery.ToString());
                result = this.database.getValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_OS_LastUpdated Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public string Get_Pirated_OS(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select case when count(*) > 0 then 'Yes' else 'No' end from node_system_info where device_id={0} and data_type=8 and json like '%License Status%Licensed%' ", deviceid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select case when count(*) > 0 then 'Yes' else 'No' end from node_system_info where device_id={0} and data_type=8 and json like '%License Status%Licensed%' ", deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Pirated_OS Query : " + strQuery.ToString());
                result = this.database.getValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Pirated_OS Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public string Get_NSG_IP(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select case when count(*) > 0 then 'Yes' else 'No' end from node_audit_trail where device_id={0} and category_type=1 and category_subtype=101 and category_status=12 ", deviceid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select case when count(*) > 0 then 'Yes' else 'No' end from node_audit_trail where device_id={0} and category_type=1 and category_subtype=101 and category_status=12 ", deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_NSG_IP Query : " + strQuery.ToString());
                result = this.database.getValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_NSG_IP Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public string Get_Win_PSW(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select case when param_value = '0' then 'No' else 'Yes' end from csat_file_parse_data where device_id={0} and data_type='AuditPolicy' and data_sub_type='System Access' and param_name='MinimumPasswordLength' ", deviceid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select case when param_value = '0' then 'No' else 'Yes' end from csat_file_parse_data where device_id={0} and data_type='AuditPolicy' and data_sub_type='System Access' and param_name='MinimumPasswordLength' ", deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Win_PSW Query : " + strQuery.ToString());
                result = this.database.getValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Win_PSW Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public string Get_Acconut_lockout_policy(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select case when cast( param_value as int) >= 3 then 'Yes' else 'No' end from csat_file_parse_data where device_id={0} and data_type='AuditPolicy' and data_sub_type='System Access' and param_name='LockoutBadCount'", deviceid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select case when cast( param_value as int) >= 3 then 'Yes' else 'No' end from csat_file_parse_data where device_id={0} and data_type='AuditPolicy' and data_sub_type='System Access' and param_name='LockoutBadCount'", deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Acconut_lockout_policy Query : " + strQuery.ToString());
                result = this.database.getValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Acconut_lockout_policy Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public string Get_Audit_Policy(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select case when count(*) > 0 then 'No' else 'Yes' end  from csat_file_parse_data where device_id={0} and data_type='AuditPolicy' and data_sub_type='Event Audit' and cast(param_value as int) < 3 ", deviceid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select case when count(*) > 0 then 'No' else 'Yes' end  from csat_file_parse_data where device_id={0} and data_type='AuditPolicy' and data_sub_type='Event Audit' and cast(param_value as int) < 3 ", deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Audit_Policy Query : " + strQuery.ToString());
                result = this.database.getValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Audit_Policy Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public string Get_Display_last_UserName(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select case when param_value = '4,0' then 'No' when param_value = '4,1' then 'Yes' end from csat_file_parse_data where device_id={0} and data_type='AuditPolicy' and data_sub_type='Registry Values' and param_name like '%DontDisplayLastUserName%' ", deviceid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select case when param_value = '4,0' then 'No' when param_value = '4,1' then 'Yes' end from csat_file_parse_data where device_id={0} and data_type='AuditPolicy' and data_sub_type='Registry Values' and param_name like '%DontDisplayLastUserName%' ", deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Display_last_UserName Query : " + strQuery.ToString());
                result = this.database.getValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Display_last_UserName Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public string Get_Mobile_Phone(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select case when count(*) > 0 then 'Yes' else 'No' end from node_audit_trail where device_id={0} and details like '%mobile%' ", deviceid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select case when count(*) > 0 then 'Yes' else 'No' end from node_audit_trail where device_id={0} and details like '%mobile%' ", deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Mobile_Phone Query : " + strQuery.ToString());
                result = this.database.getValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Mobile_Phone Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public string Get_Mobile_Date(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select top 1 convert(varchar, device_timestamp,103) + ' '+ convert(varchar, device_timestamp,108) as LastUsedDate from node_audit_trail where device_id={0} and details like '%mobile%' order by device_timestamp desc ", deviceid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select top 1 convert(varchar, device_timestamp,103) + ' '+ convert(varchar, device_timestamp,108) as LastUsedDate from node_audit_trail where device_id={0} and details like '%mobile%' order by device_timestamp desc ", deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Mobile_Date Query : " + strQuery.ToString());
                result = this.database.getValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Mobile_Date Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public string Get_PC_Internet(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select case when count(*) > 0 then 'Yes' else 'No' end from node_audit_trail where device_id={0} and category_type=1 and category_subtype=101 and category_status=12 ", deviceid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select case when count(*) > 0 then 'Yes' else 'No' end from node_audit_trail where device_id={0} and category_type=1 and category_subtype=101 and category_status=12 ", deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_PC_Internet Query : " + strQuery.ToString());
                result = this.database.getValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_PC_Internet Exception : " + ex.Message.ToString());
            }
            return result;
        }
        #endregion

        #region Modem Usage Reports
        public DataTable Get_ModemUsage_Data(string search)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select dl.ou_longname,dl.device_name,dl.ip,T.login_user,T.device_type,convert(varchar,T.starttime,105) + ' ' + convert(varchar,T.starttime,108) as starttime,convert(varchar,T.endtime,105) + ' ' + convert(varchar,T.endtime,108) as endtime, cast((Total / 60) as varchar) + ':' + cast((Total % 60) as varchar) as Duration from( select device_id,device_type,login_user,starttime,endtime,sum(convert(integer,datediff(mi,starttime,endtime))) as Total ");
                        strQuery.AppendFormat("from node_internet_usage  group by device_id,device_type,login_user,starttime,endtime )T,device_linkage dl where dl.device_id=T.device_id and dl.status<>-1 {0} ", search);
                        // strQuery.AppendFormat(" select dl.device_id,dl.ou_longname,dl.device_name,dl.ip,device_type,login_user,convert(varchar,ni.starttime,120) as starttime,convert(varchar,ni.endtime,120) as endtime, cast((sum(convert(integer,datediff(mi,starttime,endtime))) / 60) as varchar) + ':' + cast((sum(convert(integer,datediff(mi,starttime,endtime))) % 60) as varchar) as Duration ");
                        //  strQuery.AppendFormat(" from device_linkage dl inner join node_internet_usage ni   on dl.device_id=ni.device_id where dl.status<>-1 {0}   group by dl.device_id,dl.ou_longname,dl.device_name,dl.ip,device_type,login_user,starttime,endtime ", search);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select dl.ou_longname,dl.device_name,dl.ip,T.login_user,T.device_type,cast(date_format(T.starttime,'%d-%m-%Y %H:%i:%s') as char) as starttime,cast(date_format(T.endtime,'%d-%m-%Y %H:%i:%s') as char) as endtime, concat(cast((Total div 60) as unsigned) , ':' , cast((Total % 60) as unsigned)) as Duration from( select device_id,device_type,login_user,starttime,endtime,sum(convert(timestampdiff(minute,starttime,endtime),unsigned)) as Total ");
                        strQuery.AppendFormat(" from node_internet_usage  group by device_id,device_type,login_user,starttime,endtime )T,device_linkage dl where dl.device_id=T.device_id and dl.status<>-1 {0} ", search);
                        // strQuery.AppendFormat(" select dl.device_id,dl.ou_longname,dl.device_name,dl.ip,device_type,login_user,starttime,endtime,concat(cast((sum(convert(timestampdiff(minute,starttime,endtime),unsigned)) / 60) as unsigned) , ':' , cast((sum(convert(timestampdiff(minute,starttime,endtime),unsigned)) % 60) as unsigned)) as Duration ");
                        // strQuery.AppendFormat(" from device_linkage dl inner join node_internet_usage ni on dl.device_id= ni.device_id where dl.status<>-1 {0} group by device_id,device_type,login_user,starttime,endtime ", search);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_ModemUsage_Data Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_ModemUsage_Data Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public string Get_modemdata_serching(string serch, string value)
        {

            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        if (serch == "starttime")
                            result = " and convert(varchar,T.starttime,120) like '%" + value + "%'";
                        else if (serch == "endtime")
                            result = " and convert(varchar,T.endtime,120) like '%" + value + "%'";
                        else if (serch == "Duration")
                            result = " and cast((Total / 60) as varchar) + ':' + cast((Total % 60) as varchar) like '%" + value + "%'";
                        // result = " and cast((sum(convert(integer,datediff(mi,starttime,endtime))) / 60) as varchar) + ':' + cast((sum(convert(integer,datediff(mi,starttime,endtime))) % 60) as varchar) like '%" + value + "%'";
                        else
                            result = " and " + serch + " like '%" + value + "%'";
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        if (serch == "starttime")
                            result = " and cast(date_format(ni.starttime,'%Y-%m-%d %H:%i:%s') as char) like '%" + value + "%'";
                        else if (serch == "endtime")
                            result = " and cast(date_format(ni.endtime,'%Y-%m-%d %H:%i:%s') as char) like '%" + value + "%'";
                        else if (serch == "Duration")
                            //result = " and concat(cast((Total / 60) as unsigned) , ':' , cast((Total % 60) as unsigned)) like '%" + value + "%'";
                            result = " and concat(cast((sum(convert(timestampdiff(minute,starttime,endtime),unsigned)) / 60) as unsigned) , ':' , cast((sum(convert(timestampdiff(minute,starttime,endtime),unsigned)) % 60) like '%" + value + "%'";
                        else
                            result = " and " + serch + " like '%" + value + "%'";
                        break;
                }


            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_modemdata_serching Exception : " + ex.Message.ToString());
            }
            return result;
        }
        #endregion

        #region Agentinfo_report

        public DataTable Get_OSList()
        {

            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        //strQuery.AppendFormat("select distinct os from node_general_info");
                        strQuery.AppendFormat("select distinct parameter_value from node_system_info_details where type_id= 8 and parameter_name='caption'");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_OSList Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_OSList Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        public DataTable Get_single_localip(string ip)
        {

            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        //strQuery.AppendFormat("select distinct os from node_general_info");
                        strQuery.AppendFormat("select distinct local_ip from node_networkcard_traffic where local_ip like '%{0}%' order by local_ip asc", ip);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_single_localip Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_single_localip Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_multi_localip(string ip)
        {

            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        //strQuery.AppendFormat("select distinct os from node_general_info");
                        strQuery.AppendFormat("select distinct local_ip from node_networkcard_traffic where remote_ip like '%{0}%' order by local_ip asc", ip);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_multi_localip Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_multi_localip Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_multi_remoteip(string ip)
        {

            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        //strQuery.AppendFormat("select distinct os from node_general_info");
                        strQuery.AppendFormat("select distinct remote_ip from node_networkcard_traffic where local_ip like '%{0}%' order by remote_ip asc", ip);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_multi_remoteip Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_multi_remoteip Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_single_remoteip(string ip)
        {

            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        //strQuery.AppendFormat("select distinct os from node_general_info");
                        strQuery.AppendFormat("select distinct remote_ip from node_networkcard_traffic where remote_ip like '%{0}%' order by remote_ip asc", ip);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_single_remoteip Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_single_remoteip Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_AgentInfo(string search, string FieldSerach)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        //strQuery.AppendFormat("select distinct T.device_id,T.device_name,T.ip,T.mac,T.ou_longname,(case (select client_version from device_master dm where dm.device_id=T.device_id) when 'NULL' then '' else (select client_version from device_master dm where dm.device_id=T.device_id) end ) as client_version,");
                        //strQuery.AppendFormat("(case when convert(varchar,nui.last_poll_time,105) + ' ' + convert(varchar,nui.last_poll_time,108) is null then '' else convert(varchar,nui.last_poll_time,105) + ' ' + convert(varchar,nui.last_poll_time,108) end) as date,");
                        //strQuery.AppendFormat("(case nui.login_user when 'NULL' then '' when 'NA' then '' else nui.login_user end) as login_user,(case nsd.parameter_value when 'NULL' then '' else (select top 1 parameter_value from  node_system_info_details nsd where nsd.type_id = 8 and nsd.parameter_name = 'caption' and nsd.device_id = T.device_id) end) as data1,");
                        //strQuery.AppendFormat("(case when(select top 1 parameter_value from  node_system_info_details nsd where nsd.type_id=8 and nsd.parameter_name='caption' and nsd.device_id = T.device_id )   is null then '' else (select top 1 parameter_value from  node_system_info_details nsd where nsd.type_id=8 and nsd.parameter_name='OSArchitecture' and nsd.device_id = T.device_id ) end) as ostype,");
                        //strQuery.AppendFormat("convert(varchar,did.generatedate,105) + ' ' + convert(varchar,did.generatedate,108) as generatedate, T.status, T.active, T.ou_id from (select dm.device_id, dm.device_name, dm.ip, dm.mac, dl.ou_longname, dm.client_version, dm.status, dm.active, dl.ou_id from device_master dm, device_linkage dl ");
                        //strQuery.AppendFormat("where dm.device_id = dl.device_id and dl.device_mode in (1,2,3) ) T  left outer join node_user_info nui on T.device_id = nui.device_id  left outer join node_system_info_details nsd on T.device_id = nsd.device_id and nsd.type_id=8 left outer join deviceidcreation did on T.device_id = did.deviceid where T.status <> -1 {0} {1}", search, FieldSerach);

                        //strQuery.AppendFormat("select distinct T.device_id,T.device_name,T.ip,T.mac,T.ou_longname,(select top 1 data1 from node_system_info where data_type=1 and data_subtype=4 and device_id=T.device_id) as client_version,");
                        //strQuery.AppendFormat("(case when convert(varchar,nui.last_poll_time,105) + ' ' + convert(varchar,nui.last_poll_time,108) is null then '' else convert(varchar,nui.last_poll_time,105) + ' ' + convert(varchar,nui.last_poll_time,108) end) as date,");
                        //strQuery.AppendFormat("(case nui.login_user when 'NULL' then '' when 'NA' then '' else nui.login_user end) as login_user,(case nsd.parameter_value when 'NULL' then '' else (select top 1 parameter_value from  node_system_info_details nsd where nsd.type_id = 8 and nsd.parameter_name = 'caption' and nsd.device_id = T.device_id) end) as data1,");
                        //strQuery.AppendFormat("(case when(select top 1 parameter_value from  node_system_info_details nsd where nsd.type_id=8 and nsd.parameter_name='caption' and nsd.device_id = T.device_id )   is null then '' else (select top 1 parameter_value from  node_system_info_details nsd where nsd.type_id=8 and nsd.parameter_name='OSArchitecture' and nsd.device_id = T.device_id ) end) as ostype,");
                        //strQuery.AppendFormat("convert(varchar,did.generatedate,105) + ' ' + convert(varchar,did.generatedate,108) as generatedate, T.status, T.active, T.ou_id from (select dm.device_id, dm.device_name, dm.ip, dm.mac, dl.ou_longname, dm.client_version, dm.status, dm.active, dl.ou_id from device_master dm, device_linkage dl ");
                        //strQuery.AppendFormat("where dm.device_id = dl.device_id and dl.device_mode in (1,2,3) ) T  left outer join node_user_info nui on T.device_id = nui.device_id  left outer join node_system_info_details nsd on T.device_id = nsd.device_id and nsd.type_id=8 left outer join deviceidcreation did on T.device_id = did.deviceid where T.status <> -1 {0} {1}", search, FieldSerach);


                        //strQuery.AppendFormat("select distinct T.device_id,T.device_name,T.ip,T.mac,T.ou_longname,client_version,");
                        //strQuery.AppendFormat("(case when convert(varchar,nui.last_poll_time,105) + ' ' + convert(varchar,nui.last_poll_time,108) is null then '' else convert(varchar,nui.last_poll_time,105) + ' ' + convert(varchar,nui.last_poll_time,108) end) as date,");
                        //strQuery.AppendFormat("(case nui.login_user when 'NULL' then '' when 'NA' then '' else nui.login_user end) as login_user,(case nsd.parameter_value when 'NULL' then '' else (select top 1 parameter_value from  node_system_info_details nsd where nsd.type_id = 8 and nsd.parameter_name = 'caption' and nsd.device_id = T.device_id) end) as data1,");
                        //strQuery.AppendFormat("(case when(select top 1 parameter_value from  node_system_info_details nsd where nsd.type_id=8 and nsd.parameter_name='caption' and nsd.device_id = T.device_id )   is null then '' else (select top 1 parameter_value from  node_system_info_details nsd where nsd.type_id=8 and nsd.parameter_name='OSArchitecture' and nsd.device_id = T.device_id ) end) as ostype,");
                        //strQuery.AppendFormat("convert(varchar,did.generatedate,105) + ' ' + convert(varchar,did.generatedate,108) as generatedate, T.status, T.active, T.ou_id from (select dm.device_id, dm.device_name, dm.ip, dm.mac, dl.ou_longname, dm.client_version, dm.status, dm.active, dl.ou_id from device_master dm, device_linkage dl ");
                        //strQuery.AppendFormat("where dm.device_id = dl.device_id and dl.device_mode in (1,2,3) ) T  left outer join node_user_info nui on T.device_id = nui.device_id  left outer join node_system_info_details nsd on T.device_id = nsd.device_id and nsd.type_id=8 left outer join deviceidcreation did on T.device_id = did.deviceid where T.status <> -1 {0} {1}", search, FieldSerach);

                        strQuery.AppendFormat("select distinct T.device_id,T.device_name,T.ip,T.mac_address as mac,T.ou_longname,client_version,");
                        strQuery.AppendFormat("(case when convert(varchar,nui.last_poll_time,105) + ' ' + convert(varchar,nui.last_poll_time,108) is null then '' else convert(varchar,nui.last_poll_time,105) + ' ' + convert(varchar,nui.last_poll_time,108) end) as date,");
                        strQuery.AppendFormat("(case nui.login_user when 'NULL' then '' when 'NA' then '' else nui.login_user end) as login_user,(case nsd.parameter_value when 'NULL' then '' else (select top 1 parameter_value from  node_system_info_details nsd where nsd.type_id = 8 and nsd.parameter_name = 'caption' and nsd.device_id = T.device_id) end) as data1,");
                        strQuery.AppendFormat("(case when(select top 1 parameter_value from  node_system_info_details nsd where nsd.type_id=8 and nsd.parameter_name='caption' and nsd.device_id = T.device_id )   is null then '' else (select top 1 parameter_value from  node_system_info_details nsd where nsd.type_id=8 and nsd.parameter_name='OSArchitecture' and nsd.device_id = T.device_id ) end) as ostype,");
                        strQuery.AppendFormat("convert(varchar,did.generatedate,105) + ' ' + convert(varchar,did.generatedate,108) as generatedate, T.status, T.active, T.ou_id from (select dm.device_id, dm.device_name, dm.ip, ds.mac_address, dl.ou_longname, dm.client_version, dm.status, dm.active, dl.ou_id from device_master dm, node_user_info ds,device_linkage dl ");
                        strQuery.AppendFormat("where dm.device_id = dl.device_id and ds.device_id=dl.device_id and dl.device_mode in (1,2,3) ) T  left outer join node_user_info nui on T.device_id = nui.device_id  left outer join node_system_info_details nsd on T.device_id = nsd.device_id and nsd.type_id=8 left outer join deviceidcreation did on T.device_id = did.deviceid where T.status <> -1 {0} {1}", search, FieldSerach);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select distinct T.device_id,T.device_name,T.ip,T.mac,T.ou_longname,client_version,");
                        strQuery.AppendFormat("(case when convert(varchar,nui.last_poll_time,105) + ' ' + convert(varchar,nui.last_poll_time,108) is null then '' else convert(varchar,nui.last_poll_time,105) + ' ' + convert(varchar,nui.last_poll_time,108) end) as date,");
                        strQuery.AppendFormat("(case nui.login_user when 'NULL' then '' when 'NA' then '' else nui.login_user end) as login_user,(case nsd.parameter_value when 'NULL' then '' else (select top 1 parameter_value from  node_system_info_details nsd where nsd.type_id = 8 and nsd.parameter_name = 'caption' and nsd.device_id = T.device_id) end) as data1,");
                        strQuery.AppendFormat("(case when(select top 1 parameter_value from  node_system_info_details nsd where nsd.type_id=8 and nsd.parameter_name='caption' and nsd.device_id = T.device_id )   is null then '' else (select top 1 parameter_value from  node_system_info_details nsd where nsd.type_id=8 and nsd.parameter_name='OSArchitecture' and nsd.device_id = T.device_id ) end) as ostype,");
                        strQuery.AppendFormat("convert(varchar,did.generatedate,105) + ' ' + convert(varchar,did.generatedate,108) as generatedate, T.status, T.active, T.ou_id from (select dm.device_id, dm.device_name, dm.ip, dm.mac, dl.ou_longname, dm.client_version, dm.status, dm.active, dl.ou_id from device_master dm, device_linkage dl ");
                        strQuery.AppendFormat("where dm.device_id = dl.device_id and dl.device_mode in (1,2,3) ) T  left outer join node_user_info nui on T.device_id = nui.device_id  left outer join node_system_info_details nsd on T.device_id = nsd.device_id and nsd.type_id=8 left outer join deviceidcreation did on T.device_id = did.deviceid where T.status <> -1 {0} {1}", search, FieldSerach);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_AgentInfo Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_AgentInfo Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        public string Agent_info_Date(string Days)
        {
            string searching = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:

                        if (Days == "0")
                            searching += " and ( DATEDIFF ( d, last_poll_time , getdate()) =0)";
                        else if (Days == "01")
                            searching += " and ( DATEDIFF ( d, last_poll_time , getdate()) >=1 and DATEDIFF ( d, last_poll_time , getdate()) <2 )";
                        else if (Days == "02")
                            searching += "  and ( DATEDIFF ( d, last_poll_time , getdate()) <7 and DATEDIFF ( d, last_poll_time , getdate()) >=2 )";
                        else if (Days == "03")
                            searching += " and ( DATEDIFF ( d, last_poll_time , getdate()) >=3 and DATEDIFF ( d, last_poll_time , getdate()) <4 )";
                        else if (Days == "04")
                            searching += " and ( DATEDIFF ( d, last_poll_time , getdate()) >=4 and DATEDIFF ( d, last_poll_time , getdate()) <5 )";
                        else if (Days == "05")
                            searching += " and ( DATEDIFF ( d, last_poll_time , getdate()) >=5 and DATEDIFF ( d, last_poll_time , getdate()) <6 )";
                        else if (Days == "06")
                            searching += " and ( DATEDIFF ( d, last_poll_time , getdate()) >=6 and DATEDIFF ( d, last_poll_time , getdate()) <7 )";
                        else if (Days == "07")
                            searching += " and ( DATEDIFF ( d, last_poll_time , getdate()) <15 and DATEDIFF ( d, last_poll_time , getdate()) >=7 )";
                        else if (Days == "15")
                            searching += " and DATEDIFF ( d, last_poll_time , getdate()) >=" + Days + "";
                        else if (Days == "31")
                            searching += " and DATEDIFF ( d, last_poll_time , getdate()) >=" + Days + "";
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        //if (Days == "31")
                        //    searching += " and datediff (now(),last_poll_time) >'" + Days + "'";
                        //else
                        //    searching += " and datediff (now(),last_poll_time) <='" + Days + "'";
                        if (Days == "0")
                            searching += " and (ABS(timestampdiff(day,now(),last_poll_time)) =0)";
                        else if (Days == "01")
                            searching += " and (ABS(timestampdiff(day,now(),last_poll_time)) >=1 and ABS(timestampdiff(day,now(),last_poll_time)) <2 )";
                        else if (Days == "02")
                            searching += "  and ( ABS(timestampdiff(day,now(),last_poll_time)) <7 and ABS(timestampdiff(day,now(),last_poll_time)) >=2 )";
                        else if (Days == "03")
                            searching += " and ( ABS(timestampdiff(day,now(),last_poll_time)) >=3 and ABS(timestampdiff(day,now(),last_poll_time)) <4 )";
                        else if (Days == "04")
                            searching += " and ( ABS(timestampdiff(day,now(),last_poll_time)) >=4 and ABS(timestampdiff(day,now(),last_poll_time)) <5 )";
                        else if (Days == "05")
                            searching += " and ( ABS(timestampdiff(day,now(),last_poll_time)) >=5 and ABS(timestampdiff(day,now(),last_poll_time)) <6 )";
                        else if (Days == "06")
                            searching += " and ( ABS(timestampdiff(day,now(),last_poll_time)) >=6 and ABS(timestampdiff(day,now(),last_poll_time)) <7 )";
                        else if (Days == "07")
                            searching += " and ( ABS(timestampdiff(day,now(),last_poll_time)) <15 and ABS(timestampdiff(day,now(),last_poll_time)) >=7 )";
                        else if (Days == "15")
                            searching += " and ABS(timestampdiff(day,now(),last_poll_time)) >=" + Days + "";
                        else if (Days == "31")
                            searching += " and ABS(timestampdiff(day,now(),last_poll_time)) >=" + Days + "";
                        break;
                }
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Agent_info_Date Exception : " + ex.Message.ToString());
            }
            return searching;
        }
        #endregion

        #region Create policy
        public DataTable Get_Policy_Data(string type)
        {

            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        //strQuery.AppendFormat("select rules_id,rules_name,remarks,case policy_type when 0 then 'Default' when 1 then 'User Define' end as policy_type  from rules_master where type={0}", type);
                        //strQuery.AppendFormat("select rules_id,rules_name,remarks,case policy_type when 0 then 'Default' when 1 then 'User Define' end as policy_type  from rules_master where {0}", type);
                        strQuery.AppendFormat("select rules_id,rules_name,remarks,case policy_type when 0 then 'Default' when 1 then 'User Define' end as policy_type  from rules_master order by rules_id desc ");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Policy_Data Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Policy_Data Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_Rule_Data(string rulename)
        {

            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select rules_id from rules_master where rules_name='{0}'", rulename);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Rule_Data Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Rule_Data Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public int policy_master_count(string policyname)
        {
            int result = 0;
            try
            {
                StringBuilder strQueryBuilder = new StringBuilder();
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQueryBuilder.AppendFormat(" select count(*) from policy_master where policy_name = '{0}' ", policyname);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" select count(*) from policy_master where policy_name = '{0}' ", policyname);
                        break;
                }
                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "policy_master_count Query : " + strQuery);
                result = this.database.getIntValue(strQuery);

                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "policy_master_count Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int get_policy_byid(string policyname)
        {
            int result = 0;
            try
            {
                StringBuilder strQueryBuilder = new StringBuilder();
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQueryBuilder.AppendFormat("  select policy_id from policy_master where policy_name= '{0}' ", policyname);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat("  select policy_id from policy_master where policy_name= '{0}' ", policyname);
                        break;
                }
                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "get_policy_byid Query : " + strQuery);
                result = this.database.getIntValue(strQuery);

                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "get_policy_byid Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int get_rules_byid(string rulename)
        {
            int result = 0;
            try
            {
                StringBuilder strQueryBuilder = new StringBuilder();
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQueryBuilder.AppendFormat(" select count(rules_id) from rules_master where rules_name= '{0}' ", rulename);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" select count(rules_id) from rules_master where rules_name= '{0}' ", rulename);
                        break;
                }
                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "get_rules_byid Query : " + strQuery);
                result = this.database.getIntValue(strQuery);

                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "get_rules_byid Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int insert_policy_master(string policyname, string desc)
        {
            int result = 0;


            try
            {
                StringBuilder strQueryBuilder = new StringBuilder();

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQueryBuilder.AppendFormat(" insert into policy_master(status,generate_date,active_date,policy_name,policy_details) ");
                        strQueryBuilder.AppendFormat(" values(1,GETDATE(),GETDATE(),'{0}','{1}')", policyname, desc);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" insert into policy_master(status,generate_date,active_date,policy_name,policy_details) ");
                        strQueryBuilder.AppendFormat(" values(1,now(),now(),'{0}','{1}')", policyname, desc);
                        break;
                }

                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "insert_policy_master Query : " + strQuery);
                result = this.database.execute(strQuery);


                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "insert_policy_master Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int insert_policy_type(string policyname, string type)
        {
            int result = 0;


            try
            {
                StringBuilder strQueryBuilder = new StringBuilder();

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQueryBuilder.AppendFormat(" insert into policy_master(status,generate_date,active_date,policy_name,policy_details,policy_type) ");
                        strQueryBuilder.AppendFormat(" values(1,GETDATE(),GETDATE(),'{0}','','{1}')", policyname, type);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" insert into policy_master(status,generate_date,active_date,policy_name,policy_details,policy_type) ");
                        strQueryBuilder.AppendFormat(" values(1,now(),now(),'{0}','','{1}')", policyname, type);
                        break;
                }

                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "insert_policy_type Query : " + strQuery);
                result = this.database.execute(strQuery);


                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "insert_policy_type Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int Get_Last_policy_Id()
        {
            int result = 0;


            try
            {
                StringBuilder strQueryBuilder = new StringBuilder();

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQueryBuilder.AppendFormat("select top 1 policy_id from policy_master order by policy_id desc");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat("select policy_id from policy_master order by policy_id desc limit 1");
                        break;
                }

                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "Get_Last_policy_Id Query : " + strQuery);
                result = this.database.getIntValue(strQuery);


                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Last_policy_Id Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int insert_policy_linkage(int policyid, string rulesid)
        {
            int result = 0;
            try
            {
                StringBuilder strQueryBuilder = new StringBuilder();

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" insert into policy_linkage(policy_id,rules_id) select {0} as policyid, rules_id from rules_master where rules_id in({1}) ", policyid, rulesid);
                        break;
                }

                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "insert_policy_linkage Query : " + strQuery);
                result = this.database.execute(strQuery);


                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "insert_policy_linkage Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public string get_rule_id(string ruleName, string RuleType, string RuleSubType, string PolicyType, string Param3)
        {
            string result = "";
            try
            {
                StringBuilder strQueryBuilder = new StringBuilder();
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQueryBuilder.AppendFormat("select top 1 rules_id from rules_master where rules_name='{0}' and type='{1}' and subtype='{2}' and policy_type='{3}' and param3='{4}'", ruleName, RuleType, RuleSubType, PolicyType, Param3);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat("select rules_id from rules_master where rules_name='{0}' and type='{1}' and subtype='{2}' and policy_type='{3}' and param3='{4}' limit 1;", ruleName, RuleType, RuleSubType, PolicyType, Param3);
                        break;
                }
                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "insert_policy_linkage Query : " + strQuery);
                result = this.database.getValue(strQuery);
                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "get_rule_id Exception : " + ex.Message.ToString());
            }
            return result;
        }

        //public DataTable Get_Policy_Details_data(string type)
        public DataTable Get_Policy_Details_data()
        {

            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select T.policy_id,T.policy_name,T.policy_details,count(S.device_id) as cnt from(select pm.policy_id, pm.policy_name, pm.policy_details from policy_linkage pl, policy_master pm where pl.policy_id = pm.policy_id ");
                        strQuery.AppendFormat(" group by pm.policy_id,pm.policy_name,pm.policy_details) T left outer join (select distinct dl.device_id, policy_id from device_linkage dl inner join deployment_linkage_master dlm on dl.device_id = dlm.device_id and dl.device_mode in (1,2,3)) S on T.policy_id = S.policy_id group by T.policy_id,T.policy_name,T.policy_details order by T.policy_id desc ");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        //strQuery.AppendFormat(" select pm.policy_id,pm.policy_name,pm.policy_details,case r.policy_type when 0 then 'Default' when 1 then 'User Define' end as policy_type,count(pm.policy_id) as cnt from ");
                        //strQuery.AppendFormat(" rules_master r,policy_linkage pl,policy_master pm where r.rules_id=pl.rules_id  and pl.policy_id=pm.policy_id {0}  group by  pm.policy_id,pm.policy_name,pm.policy_details,r.policy_type ", type);

                        //strQuery.AppendFormat(" select pm.policy_id,pm.policy_name,pm.policy_details,case r.policy_type when 0 then 'Default' when 1 then 'User Define' end as policy_type,count(pm.policy_id) as cnt from ");
                        //strQuery.AppendFormat(" rules_master r,policy_linkage pl,policy_master pm where r.rules_id=pl.rules_id  and pl.policy_id=pm.policy_id group by  pm.policy_id,pm.policy_name,pm.policy_details,r.policy_type ");

                        strQuery.AppendFormat(" select T.policy_id,T.policy_name,T.policy_details,count(S.device_id) as cnt from(select pm.policy_id, pm.policy_name, pm.policy_details from policy_linkage pl, policy_master pm where pl.policy_id = pm.policy_id ");
                        strQuery.AppendFormat(" group by pm.policy_id,pm.policy_name,pm.policy_details) T left outer join (select distinct dl.device_id, policy_id from device_linkage dl inner join deployment_linkage_master dlm on dl.device_id = dlm.device_id and dl.device_mode in (1,2,3)) S on T.policy_id = S.policy_id group by T.policy_id,T.policy_name,T.policy_details order by T.policy_id desc ");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Policy_Details_data Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Policy_Details_data Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        // 
        //public string insert_policy_linkage_master(string policyid, string ouid, string deviceid, string username)
        public int insert_policy_linkage_master(string policyid, string ouid, string deviceid, string username)
        {
            int result = 0;

            try
            {
                StringBuilder strQueryBuilder = new StringBuilder();

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQueryBuilder.AppendFormat(" insert into policy_linkage_master(ou_id,device_id,user_name,policy_id,start_date) ");
                        //  strQueryBuilder.AppendFormat(" values({0},{1},'{2}',{3},getdate()) ", ouid, deviceid, username,policyid);
                        strQueryBuilder.AppendFormat("  select '{1}' as ouid,'{2}' as deviceid,'{3}' as username,policy_id,getdate() as date from policy_master where policy_id in({0}) ", policyid, ouid, deviceid, username);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" insert into policy_linkage_master(ou_id,device_id,user_name,policy_id,start_date) ");
                        strQueryBuilder.AppendFormat("  select '{1}' as ouid,'{2}' as deviceid,'{3}' as username,policy_id,now() as date from policy_master where policy_id in({0}) ", policyid, ouid, deviceid, username);
                        break;
                }

                string strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "insert_policy_linkage_master Query : " + strQuery);
                result = this.database.execute(strQuery);


                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "insert_policy_linkage_master Exception : " + ex.Message.ToString());
            }
            return result;
        }
        //public int insert_policy_deployment_master(string ouid, string deviceid, string username,string policyid, string rulesid,string strrulesapply, string strrulesremove,string rulestype)
        // public string insert_policy_deployment_master(string ouid, string deviceid, string username, string policyid)
        public int insert_policy_deployment_master(string ouid, string deviceid, string username, string policyid)
        {
            int result = 0;
            // String strQuery = "";

            try
            {
                StringBuilder strQueryBuilder = new StringBuilder();

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQueryBuilder.AppendFormat(" insert into deployment_master(policy_apply_id,ou_id,device_id,user_name,policy_id,rules_id,enabled,rule_apply,rule_remove,rules_type,deployment_status) ");
                        //  strQueryBuilder.AppendFormat(" values({0},{1},{2},'{3}',{4},{5},1,{6},{7},1) ", ouid, deviceid, username, policyid, rulesid, strrulesapply, strrulesremove, rulestype);
                        strQueryBuilder.AppendFormat(" select (select top 1 policy_apply_id from policy_linkage_master order by policy_apply_id desc) as policyappid,'{0}' as ouid,'{1}' as deviceid,'{2}' as username,pl.policy_id as policyid,rm.rules_id,1 as enable,rm.rules_apply,rm.rules_remove,rm.rules_type,1 as dstatus from rules_master rm,policy_linkage pl where rm.rules_id=pl.rules_id and policy_id in({3}) ", ouid, deviceid, username, policyid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" insert into deployment_master(policy_apply_id,ou_id,device_id,user_name,policy_id,rules_id,enabled,rule_apply,rule_remove,rules_type,deployment_status) ");
                        //  strQueryBuilder.AppendFormat(" values({0},{1},{2},'{3}',{4},{5},1,{6},{7},1) ", ouid, deviceid, username, policyid, rulesid, strrulesapply, strrulesremove, rulestype);
                        strQueryBuilder.AppendFormat(" select (select policy_apply_id from policy_linkage_master order by policy_apply_id desc limit 1) as policyappid,'{0}' as ouid,'{1}' as deviceid,'{2}' as username,pl.policy_id as policyid,rm.rules_id,1 as enable,rm.rules_apply,rm.rules_remove,rm.rules_type,1 as dstatus from rules_master rm,policy_linkage pl where rm.rules_id=pl.rules_id and policy_id in({3}) ", ouid, deviceid, username, policyid);
                        break;
                }

                string strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "insert_policy_deployment_master Query : " + strQuery);
                result = this.database.execute(strQuery);


                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "insert_policy_deployment_master Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int insert_ou_deployment_linkage_master(string ouid, string deviceid, string username, string policyid)
        {
            int result = 0;
            // String strQuery = "";

            try
            {
                StringBuilder strQueryBuilder = new StringBuilder();

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQueryBuilder.AppendFormat(" insert into deployment_linkage_master(policy_apply_id,ou_id,device_id,user_name,policy_id,rules_id,enabled,rule_apply,rule_remove,rules_type,deployment_status) ");
                        strQueryBuilder.AppendFormat(" select (select top 1 policy_apply_id from policy_linkage_master order by policy_apply_id desc) as policyappid,'{0}' as ouid,'{1}' as deviceid,'{2}' as username,pl.policy_id as policyid,rm.rules_id,1 as enable,rm.rules_apply,rm.rules_remove,rm.rules_type,1 as dstatus from rules_master rm,policy_linkage pl where rm.rules_id=pl.rules_id and policy_id in({3}) ", ouid, deviceid, username, policyid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" insert into deployment_linkage_master(policy_apply_id,ou_id,device_id,user_name,policy_id,rules_id,enabled,rule_apply,rule_remove,rules_type,deployment_status) ");
                        strQueryBuilder.AppendFormat(" select (select policy_apply_id from policy_linkage_master order by policy_apply_id desc limit 1) as policyappid,'{0}' as ouid,'{1}' as deviceid,'{2}' as username,pl.policy_id as policyid,rm.rules_id,1 as enable,rm.rules_apply,rm.rules_remove,rm.rules_type,1 as dstatus from rules_master rm,policy_linkage pl where rm.rules_id=pl.rules_id and policy_id in({3}) ", ouid, deviceid, username, policyid);
                        break;
                }

                string strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "insert_ou_deployment_linkage_master Query : " + strQuery);
                result = this.database.execute(strQuery);


                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "insert_ou_deployment_linkage_master Exception : " + ex.Message.ToString());
            }
            return result;
        }

        // Unapply policy 

        public int unapply_policy_linkage_master(string policyid, string deviceid)
        {
            int result = 0;

            try
            {
                StringBuilder strQueryBuilder = new StringBuilder();

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" delete from policy_linkage_master where policy_id={0} and device_id in ({1}) ", policyid, deviceid);
                        break;
                }

                string strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "unapply_policy_linkage_master Query : " + strQuery);
                result = this.database.execute(strQuery);


                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "unapply_policy_linkage_master Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int unapply_policy_linkage_master1(string policyid)
        {
            int result = 0;
            try
            {
                StringBuilder strQueryBuilder = new StringBuilder();

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" delete from policy_linkage_master where policy_id={0} and device_id=0", policyid);
                        break;
                }

                string strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "unapply_policy_linkage_master1 Query : " + strQuery);
                result = this.database.execute(strQuery);


                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "unapply_policy_linkage_master1 Exception : " + ex.Message.ToString());
            }
            return result;
        }

        public int unapply_policy_deployment_master(string policyid, string deviceid)
        {
            int result = 0;
            // String strQuery = "";

            try
            {
                StringBuilder strQueryBuilder = new StringBuilder();

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" delete from deployment_master where policy_id ={0} and device_id in ({1})", policyid, deviceid);
                        break;
                }
                string strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "unapply_policy_deployment_master Query : " + strQuery);
                result = this.database.execute(strQuery);


                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "unapply_policy_deployment_master Exception : " + ex.Message.ToString());
            }
            return result;
        }

        public int unapply_policy_deployment_master1(string policyid)
        {
            int result = 0;
            // String strQuery = "";

            try
            {
                StringBuilder strQueryBuilder = new StringBuilder();

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" delete from deployment_master where policy_id ={0} and device_id=0", policyid);
                        break;
                }
                string strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "unapply_policy_deployment_master1 Query : " + strQuery);
                result = this.database.execute(strQuery);


                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "unapply_policy_deployment_master1 Exception : " + ex.Message.ToString());
            }
            return result;
        }

        public int unapply_ou_deployment_linkage_master(string policyid, string deviceid)
        {
            int result = 0;
            // String strQuery = "";

            try
            {
                StringBuilder strQueryBuilder = new StringBuilder();

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" delete from deployment_linkage_master where policy_id={0} and device_id in ({1})", policyid, deviceid);
                        break;
                }

                string strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "unapply_ou_deployment_linkage_master Query : " + strQuery);
                result = this.database.execute(strQuery);


                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "unapply_ou_deployment_linkage_master Exception : " + ex.Message.ToString());
            }
            return result;
        }

        public DataTable get_ouid_policy(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();

            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select distinct ou_id from device_linkage where device_id in ({0})", deviceid);
                        break;

                }
                data_table = this.database.getDataTable(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "get_ouid_policy Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "get_ouid_policy Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        public int insert_Policy_Querylog(string deviceid, string policyid, string locationid)
        {
            int result = 0;
            // String strQuery = "";
            try
            {
                StringBuilder strQueryBuilder = new StringBuilder();

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQueryBuilder.AppendFormat(" insert into query_log(device_id,query_msg,location_id) ");
                        strQueryBuilder.AppendFormat(" select '{0}' as deviceid,rm.rules_apply,'{2}' as locationid from rules_master rm,policy_linkage pl where rm.rules_id=pl.rules_id and policy_id in({1}) ", deviceid, policyid, locationid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" insert into query_log(device_id,query_msg,location_id) ");
                        strQueryBuilder.AppendFormat(" select '{0}' as deviceid,rm.rules_apply,'{2}' as locationid from rules_master rm,policy_linkage pl where rm.rules_id=pl.rules_id and policy_id in({1}) ", deviceid, policyid, locationid);
                        //strQueryBuilder.AppendFormat(" insert into deployment_linkage_master(policy_apply_id,ou_id,device_id,user_name,policy_id,rules_id,enabled,rule_apply,rule_remove,rules_type,deployment_status) ");
                        //strQueryBuilder.AppendFormat(" select (select  policy_apply_id from policy_linkage_master order by policy_apply_id desc limit 1) as policyappid,'{0}' as ouid,'{1}' as deviceid,'{2}' as username,pl.policy_id as policyid,rm.rules_id,1 as enable,rm.rules_apply,rm.rules_remove,rm.rules_type,1 as dstatus from rules_master rm,policy_linkage pl where rm.rules_id=pl.rules_id and policy_id in({3}) ", ouid, deviceid, username, policyid);
                        break;
                }

                string strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "insert_Policy_Querylog Query : " + strQuery);
                result = this.database.execute(strQuery);


                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "insert_Policy_Querylog Exception : " + ex.Message.ToString());
            }
            return result;
        }

        public int unapply_Policy_Querylog(string deviceid, string policyid, string locationid)
        {
            int result = 0;
            // String strQuery = "";
            try
            {
                StringBuilder strQueryBuilder = new StringBuilder();

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQueryBuilder.AppendFormat(" insert into query_log(device_id,query_msg,location_id) ");
                        strQueryBuilder.AppendFormat(" select '{0}' as deviceid,rm.rules_remove,'{2}' as locationid from rules_master rm,policy_linkage pl where rm.rules_id=pl.rules_id and policy_id in({1}) ", deviceid, policyid, locationid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        //strQueryBuilder.AppendFormat(" insert into deployment_linkage_master(policy_apply_id,ou_id,device_id,user_name,policy_id,rules_id,enabled,rule_apply,rule_remove,rules_type,deployment_status) ");
                        //strQueryBuilder.AppendFormat(" select (select  policy_apply_id from policy_linkage_master order by policy_apply_id desc limit 1) as policyappid,'{0}' as ouid,'{1}' as deviceid,'{2}' as username,pl.policy_id as policyid,rm.rules_id,1 as enable,rm.rules_apply,rm.rules_remove,rm.rules_type,1 as dstatus from rules_master rm,policy_linkage pl where rm.rules_id=pl.rules_id and policy_id in({3}) ", ouid, deviceid, username, policyid);
                        break;
                }

                string strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "unapply_Policy_Querylog Query : " + strQuery);
                result = this.database.execute(strQuery);


                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "unapply_Policy_Querylog Exception : " + ex.Message.ToString());
            }
            return result;
        }

        public DataTable Get_device_policy_info_unapply(string policyid)
        {
            StringBuilder strQuery = new StringBuilder();

            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select distinct device_id from deployment_linkage_master	where policy_id={0} ", policyid);
                        break;
                }


                objcommon.WriteLog("DBQueryHandler", "Get_device_policy_info_unapply Query : " + strQuery);
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_device_policy_info_unapply Exception : " + ex.Message.ToString());
            }
            return data_table;


        }



        public DataTable Get_device_policy_info(string ouid)
        {
            StringBuilder strQuery = new StringBuilder();

            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select dl.ou_id,dl.device_id,nd.login_user from device_linkage dl left outer join node_user_info nd on dl.device_id=nd.device_id and dl.device_mode in (1,2,3) {0} ", ouid);
                        break;
                }


                objcommon.WriteLog("DBQueryHandler", "Get_device_policy_info Query : " + strQuery);
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_device_policy_info Exception : " + ex.Message.ToString());
            }
            return data_table;


        }

        // Remove policy 

        public int remove_policy_linkage_master(string policyid)
        {
            int result = 0;

            try
            {
                StringBuilder strQueryBuilder = new StringBuilder();

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" delete from policy_linkage_master where policy_id={0} ", policyid);
                        break;
                }

                string strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "remove_policy_linkage_master Query : " + strQuery);
                result = this.database.execute(strQuery);


                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "remove_policy_linkage_master Exception : " + ex.Message.ToString());
            }
            return result;
        }

        public int remove_policy_deployment_master(string policyid)
        {
            int result = 0;
            // String strQuery = "";

            try
            {
                StringBuilder strQueryBuilder = new StringBuilder();

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" delete from deployment_master where policy_id ={0}", policyid);
                        break;
                }
                string strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "remove_policy_deployment_master Query : " + strQuery);
                result = this.database.execute(strQuery);


                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "remove_policy_deployment_master Exception : " + ex.Message.ToString());
            }
            return result;
        }

        public int remove_ou_deployment_linkage_master(string policyid)
        {
            int result = 0;
            // String strQuery = "";

            try
            {
                StringBuilder strQueryBuilder = new StringBuilder();

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat("delete from deployment_linkage_master where policy_id={0}", policyid);
                        break;
                }

                string strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "remove_ou_deployment_linkage_master Query : " + strQuery);
                result = this.database.execute(strQuery);


                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "remove_ou_deployment_linkage_master Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int remove_policy_master(string policyid)
        {
            int result = 0;
            // String strQuery = "";

            try
            {
                StringBuilder strQueryBuilder = new StringBuilder();

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat("delete from policy_master where policy_id={0}", policyid);
                        break;
                }

                string strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "remove_policy_master Query : " + strQuery);
                result = this.database.execute(strQuery);


                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "remove_policy_master Exception : " + ex.Message.ToString());
            }
            return result;
        }

        public int remove_policy_linkage(string policyid)
        {
            int result = 0;
            // String strQuery = "";

            try
            {
                StringBuilder strQueryBuilder = new StringBuilder();

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat("delete from policy_linkage where policy_id={0}", policyid);
                        break;
                }

                string strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "remove_policy_linkage Query : " + strQuery);
                result = this.database.execute(strQuery);


                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "remove_policy_linkage Exception : " + ex.Message.ToString());
            }
            return result;
        }

        public DataTable Get_OUCount()
        {
            StringBuilder strQuery = new StringBuilder();

            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select distinct ou_nodelinkage_longname as 'OU',ol.ou_nodelinkage_ouid,count(dl.ou_id) as 'count' from ou_nodelinkage ol left outer join device_linkage dl ");
                        strQuery.AppendFormat(" on dl.ou_id =ol.ou_nodelinkage_ouid  where ou_nodelinkage_active<>0 and device_mode in (1,2,3)");
                        strQuery.AppendFormat(" group by ou_nodelinkage_longname,ol.ou_nodelinkage_ouid order by ou_nodelinkage_longname");
                        break;
                }


                objcommon.WriteLog("DBQueryHandler", "Get_OUCount Query : " + strQuery);
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_OUCount Exception : " + ex.Message.ToString());
            }
            return data_table;


        }
        public DataTable Get_systemnameip()
        {

            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select device_id,device_name, ip, ou_longname from device_linkage where status <>-1 and device_mode in (1,2,3) order by device_name, ip ");
                        //strQuery.AppendFormat(" select dl.device_id,dl.device_name,dl.ip,dl.ou_longname from device_linkage dl inner join device_master dm on dl.device_id = dm.device_id where dl.status <> -1 and dm.device_mode in (1,2,3)");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_systemnameip Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_systemnameip Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_systemnameipsearch(string ip)
        {

            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select device_id,device_name, ip, ou_longname from device_linkage where status <>-1 and device_mode in (1,2,3) and ip like '%{0}%' order by device_name, ip ", ip);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_systemnameipsearch Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_systemnameipsearch Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_systemnameipsearch(string ip, string strCond)
        {

            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select device_id,device_name, ip, ou_longname from device_linkage where status <>-1 and device_mode in (1,2,3) and ip like '%{0}%' {1} order by device_name, ip ", ip, strCond);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_systemnameipsearch Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_systemnameipsearch Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_OUCount_apply()
        {
            StringBuilder strQuery = new StringBuilder();

            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select distinct ou_nodelinkage_longname as 'OU',ol.ou_nodelinkage_ouid,count(dl.ou_id) as 'count' from ou_nodelinkage ol left outer join device_linkage dl ");
                        strQuery.AppendFormat(" on dl.ou_id =ol.ou_nodelinkage_ouid  where ou_nodelinkage_active<>0 and device_mode in (1,2,3)");
                        strQuery.AppendFormat(" group by ou_nodelinkage_longname,ol.ou_nodelinkage_ouid  order by ou_nodelinkage_longname");
                        break;
                }


                objcommon.WriteLog("DBQueryHandler", "Get_OUCount Query : " + strQuery);
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_OUCount Exception : " + ex.Message.ToString());
            }
            return data_table;


        }
        public DataTable Get_systemnameip_apply(string policyid, string osname)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select device_id,device_name, ip, ou_longname, '{1}' as ostype from device_linkage where device_id not in (select distinct device_id from policy_linkage_master where policy_id={0}) and status <>-1 and device_mode in (1,2,3) ", policyid, osname);
                        strQuery.AppendFormat("and device_id in (select device_id from ( select device_id,case when parameter_value like '%windows%' then 'Windows' else 'Linux' end SystemType from node_system_info_details where type_id = 8 and parameter_name = 'Caption') T where SystemType= '{0}') order by ou_longname, device_name, ip", osname);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select device_id,device_name, ip, ou_longname, '{1}' as ostype from device_linkage where device_id not in (select distinct device_id from policy_linkage_master where policy_id={0}) and status <>-1 and device_mode in (1,2,3) ", policyid, osname);
                        strQuery.AppendFormat("and device_id in (select device_id from ( select device_id,case when parameter_value like '%windows%' then 'Windows' else 'Linux' end SystemType from node_system_info_details where type_id = 8 and parameter_name = 'Caption') T where SystemType= '{0}') order by ou_longname, device_name, ip", osname);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_systemnameip_apply Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_systemnameip_apply Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_systemnameip_apply_ip(string policyid, string osname, string ip)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select device_id,device_name, ip, ou_longname, '{1}' as ostype from device_linkage where device_id not in (select distinct device_id from policy_linkage_master where policy_id={0}) and status <>-1 and device_mode in (1,2,3) ", policyid, osname);
                        strQuery.AppendFormat("and device_id in (select device_id from ( select device_id,case when parameter_value like '%windows%' then 'Windows' else 'Linux' end SystemType from node_system_info_details where type_id = 8 and parameter_name = 'Caption') T where SystemType= '{0}') and ip like '%{1}%' order by ou_longname, device_name, ip", osname, ip);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select device_id,device_name, ip, ou_longname, '{1}' as ostype from device_linkage where device_id not in (select distinct device_id from policy_linkage_master where policy_id={0}) and status <>-1 and device_mode in (1,2,3) ", policyid, osname);
                        strQuery.AppendFormat("and device_id in (select device_id from ( select device_id,case when parameter_value like '%windows%' then 'Windows' else 'Linux' end SystemType from node_system_info_details where type_id = 8 and parameter_name = 'Caption') T where SystemType= '{0}') and ip like '%{1}%' order by ou_longname, device_name, ip", osname, ip);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_systemnameip_apply_ip Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_systemnameip_apply_ip Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_Loginuser()
        {

            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select distinct login_user as 'user' from node_user_info  where login_user is not null order by login_user");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Loginuser Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Loginuser Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        public int Get_Rules_Count(string type, string subtype, string action)
        {
            int result = 0;

            try
            {
                StringBuilder strQueryBuilder = new StringBuilder();

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQueryBuilder.AppendFormat(" select count(*) from  rules_master  where type={0} and subtype={1} and param1='{2}'", type, subtype, action);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" select count(*) from  rules_master  where type={0} and subtype={1} and param1='{2}'", type, subtype, action);
                        break;
                }

                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "Get_Rules_Count Query : " + strQuery);
                result = this.database.getIntValue(strQuery);

                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Rules_Count Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int Get_Rules_last_Count()
        {
            int result = 0;


            try
            {
                StringBuilder strQueryBuilder = new StringBuilder();

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQueryBuilder.AppendFormat(" select top 1 rules_id+1 from rules_master order by rules_id desc ");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" select rules_id+1 from rules_master order by rules_id desc limit 1");
                        break;
                }

                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "Get_Rules_last_Count Query : " + strQuery);
                result = this.database.getIntValue(strQuery);

                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Rules_last_Count Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int Get_policy_last_Count()
        {
            int result = 0;


            try
            {
                StringBuilder strQueryBuilder = new StringBuilder();

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQueryBuilder.AppendFormat(" select top 1 policy_id+1 from policy_master order by policy_id desc ");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" select top 1 policy_id+1 from policy_master order by policy_id desc");
                        break;
                }

                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "Get_policy_last_Count Query : " + strQuery);
                result = this.database.getIntValue(strQuery);

                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Rules_last_Count Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int insert_rules_master(string rules_id, string rulesname, string type, string subtype, string policy_type, string verification, string status, string strmsg, string removemsg, string desc)
        {
            int result = 0;
            // String strQuery = "";
            try
            {
                StringBuilder strQueryBuilder = new StringBuilder();

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQueryBuilder.AppendFormat(" insert into rules_master (rules_id,rules_name,type,subtype,policy_type,verification,param1,rules_apply,rules_remove,rules_type,remarks,status,activated_date) ");
                        strQueryBuilder.AppendFormat(" values({0},'{1}',{2},{3},{4},{5},{6},'{7}','{8}',0,'{9}',1,getdate()); ", rules_id, rulesname, type, subtype, policy_type, verification, status, strmsg, removemsg, desc);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" insert into rules_master (rules_id,rules_name,type,subtype,policy_type,verification,param1,rules_apply,rules_remove,rules_type,remarks,status,activated_date) ");
                        strQueryBuilder.AppendFormat(" values({0},'{1}',{2},{3},{4},{5},{6},'{7}','{8}',0,'{9}',1,now()); ", rules_id, rulesname, type, subtype, policy_type, verification, status, strmsg, removemsg, desc);
                        break;
                }

                string strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "insert_rules_master Query : " + strQuery);
                result = this.database.execute(strQuery);


                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "insert_rules_master Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int insert_rules_master_multipleparam(string rules_id, string rulesname, string type, string subtype, string policy_type, string verification, string param1, string param2, string param3, string param4, string param5, string param6, string strmsg, string removemsg, string desc)
        {
            int result = 0;
            // String strQuery = "";

            try
            {
                StringBuilder strQueryBuilder = new StringBuilder();

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQueryBuilder.AppendFormat(" insert into rules_master (rules_id,rules_name,type,subtype,policy_type,verification,param1,param2,param3,param4,param5,param6,rules_apply,rules_remove,rules_type,remarks,status,activated_date) ");
                        strQueryBuilder.AppendFormat(" values({0},'{1}',{2},{3},{4},{5},'{6}','{7}','{8}','{9}','{10}','{11}','{12}','{13}',0,'{14}',1,getdate()); ", rules_id, rulesname, type, subtype, policy_type, verification, param1, param2, param3, param4, param5, param6, strmsg, removemsg, desc);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" insert into rules_master (rules_id,rules_name,type,subtype,policy_type,verification,param1,param2,param3,param4,param5,param6,rules_apply,rules_remove,rules_type,remarks,status,activated_date) ");
                        strQueryBuilder.AppendFormat(" values({0},'{1}',{2},{3},{4},{5},'{6}','{7}','{8}','{9}','{10}','{11}','{12}','{13}',0,'{14}',1,now()); ", rules_id, rulesname, type, subtype, policy_type, verification, param1, param2, param3, param4, param5, param6, strmsg, removemsg, desc);
                        break;
                }

                string strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "insert_rules_master_multipleparam Query : " + strQuery);
                result = this.database.execute(strQuery);

                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "insert_rules_master_multipleparam Exception : " + ex.Message.ToString());
            }
            return result;
        }

        public int Get_Rules_Count_fw(string type, string firewall_rules, string fw_sourceip, string fw_sourceport, string fw_destinationip, string fw_destinationport, string fw_direction, string fw_perform_action, string fw_protocol_rules)
        {
            int result = 0;

            try
            {
                StringBuilder strQueryBuilder = new StringBuilder();
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQueryBuilder.AppendFormat(" select count(*) from  rules_master  where type={0} and subtype={1} and  param1='{2}' and param2='{3}' and param3='{4}' and param4='{5}' and param5='{6}' and param6='{7}' and param7='{8}' ", type, firewall_rules, fw_sourceip, fw_sourceport, fw_destinationip, fw_destinationport, fw_direction, fw_perform_action, fw_protocol_rules);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" select count(*) from  rules_master  where type={0} and subtype={1} and  param1='{2}' and param2='{3}' and param3='{4}' and param4='{5}' and param5='{6}' and param6='{7}' and param7='{8}' ", type, firewall_rules, fw_sourceip, fw_sourceport, fw_destinationip, fw_destinationport, fw_direction, fw_perform_action, fw_protocol_rules);
                        break;
                }

                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "Get_Rules_Count_fw Query : " + strQuery);
                result = this.database.getIntValue(strQuery);

                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Rules_Count_fw Exception : " + ex.Message.ToString());
            }
            return result;
        }

        public int insert_rules_master_fw_multipleparam(string rules_id, string rulesname, string type, string subtype, string policy_type, string verification, string param1, string param2, string param3, string param4, string param5, string param6, string param7, string strmsg, string removemsg, string desc)
        {
            int result = 0;
            // String strQuery = "";

            try
            {
                StringBuilder strQueryBuilder = new StringBuilder();

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQueryBuilder.AppendFormat(" insert into rules_master (rules_id,rules_name,type,subtype,policy_type,verification,param1,param2,param3,param4,param5,param6,param7,rules_apply,rules_remove,rules_type,remarks,status,activated_date) ");
                        strQueryBuilder.AppendFormat(" values({0},'{1}',{2},{3},{4},{5},'{6}','{7}','{8}','{9}','{10}','{11}','{12}','{13}','{14}',0,'{15}',1,getdate()); ", rules_id, rulesname, type, subtype, policy_type, verification, param1, param2, param3, param4, param5, param6, param7, strmsg, removemsg, desc);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" insert into rules_master (rules_id,rules_name,type,subtype,policy_type,verification,param1,param2,param3,param4,param5,param6,param7,param8,rules_apply,rules_remove,rules_type,remarks,status,activated_date) ");
                        strQueryBuilder.AppendFormat(" values({0},'{1}',{2},{3},{4},{5},'{6}','{7}','{8}','{9}','{10}','{11}','{12}','{13}','{14}',0,'{15}',1,getdate()); ", rules_id, rulesname, type, subtype, policy_type, verification, param1, param2, param3, param4, param5, param6, param7, strmsg, removemsg, desc);
                        break;
                }

                string strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "insert_rules_master_fw_multipleparam Query : " + strQuery);
                result = this.database.execute(strQuery);
                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "insert_rules_master_multipleparam Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public DataTable Get_Process_list()
        {

            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select distinct process_name from node_process_info ");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Process_list Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Process_list Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_Process_CRC(string process)
        {

            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select distinct crc from node_process_log where process='{0}' and crc <> 'NA' ", process);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Process_CRC Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Process_CRC Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        public DataTable Get_user_details(string osname)
        {

            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select distinct username from user_table where local_account='-1' and device_id in (select device_id from ( ");
                        strQuery.AppendFormat("select device_id,case when parameter_value like '%windows%' then 'Windows' else 'Linux' end SystemType from node_system_info_details where type_id = 8 and parameter_name = 'Caption') T where SystemType= '{0}')", osname);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_user_details Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_user_details Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        public string Get_policyname(string policy_id)
        {
            string policy_name = "";
            try
            {
                StringBuilder strQueryBuilder = new StringBuilder();
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQueryBuilder.AppendFormat(" select policy_name from policy_master where policy_id={0}", policy_id);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" select policy_name from policy_master where policy_id={0}", policy_id);
                        break;
                }

                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "Get_policyname Query : " + strQuery);
                policy_name = this.database.getValue(strQuery);

                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_policyname Exception : " + ex.Message.ToString());
            }
            return policy_name;
        }
        public DataTable Get_apply_policy_devices(string policyid)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        //strQuery.AppendFormat("select dl.device_name,dl.ip,dl.device_id ");
                        //strQuery.AppendFormat("from device_linkage dl inner join policy_linkage_master plm on dl.device_id = plm.device_id and dl.device_mode in (1,2,3) and plm.policy_id={0} ", policyid);
                        strQuery.AppendFormat("select distinct dl.ou_longname, dl.device_name, dl.ip,dl.device_id ");
                        strQuery.AppendFormat("from device_linkage dl inner join deployment_linkage_master dlm on dl.device_id = dlm.device_id and dl.device_mode in (1,2,3) and dlm.policy_id={0} order by dl.ou_longname,dl.device_name,dl.ip ", policyid);

                        //strQuery.AppendFormat("select distinct device_name,ip,dl.device_id,case when dlm.device_id is null then ' ' else 'checked' end as 'device_id'  ");
                        //strQuery.AppendFormat(" from  device_linkage dl inner join  deployment_linkage_master dlm on  dl.device_id=dlm.device_id and dl.device_mode in (1,2,3) and  policy_id={0} ", policyid);
                        break;
                }
                data_table = this.database.getDataTable(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "Get_apply_policy_devices Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_apply_policy_devices Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        public int policy_linkage_master_ou_count(string policyid, string ouid)
        {
            int result = 0;


            try
            {
                StringBuilder strQueryBuilder = new StringBuilder();

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" select count(*) from policy_linkage_master where policy_id in ({0}) and ou_id={1}", policyid, ouid);
                        break;
                }

                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "policy_linkage_master_ou_count Query : " + strQuery);
                result = this.database.getIntValue(strQuery);


                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "policy_linkage_master_ou_count Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int policy_linkage_master_deviceid_count(string policyid, string ouid)
        {
            int result = 0;


            try
            {
                StringBuilder strQueryBuilder = new StringBuilder();

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" select count(*) from policy_linkage_master where policy_id in ({0}) and device_id={1}", policyid, ouid);
                        break;
                }

                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "policy_linkage_master_deviceid_count Query : " + strQuery);
                result = this.database.getIntValue(strQuery);


                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "policy_linkage_master_deviceid_count Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int policy_linkage_master_username_count(string policyid, string ouid)
        {
            int result = 0;


            try
            {
                StringBuilder strQueryBuilder = new StringBuilder();

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" select count(*) from policy_linkage_master where policy_id in ({0}) and user_name='{1}'", policyid, ouid);
                        break;
                }

                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "policy_linkage_master_username_count Query : " + strQuery);
                result = this.database.getIntValue(strQuery);


                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "policy_linkage_master_username_count Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public DataTable DeployedPolicyChartData()
        {

            StringBuilder strQuery = new StringBuilder();
            try
            {

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        // strQuery.AppendFormat(" Exec getallhdddata1 ");
                        strQuery.AppendFormat(" exec getdeployedpolicy ");

                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:

                        strQuery.AppendFormat(" Call getdeployedpolicy();  ");
                        break;


                        //case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        //case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        //    strQuery.AppendFormat("select case policy_id when 1 then 'Hardware' when 2 then 'Rules' when 3 then 'Share' end as 'type', ");
                        //    strQuery.AppendFormat(" case rules_type when 0 then 'Default' when 1 then 'User Define' end as 'Label',count(*) as 'Value' ");
                        //    strQuery.AppendFormat(" from deployment_master group by rules_type,policy_id ");
                        //    break;
                }
                objcommon.WriteLog("DBQueryHandler", "DeployedPolicyChartData Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "DeployedPolicyChartData Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        public DataTable AvailablePolicyChartData()
        {

            StringBuilder strQuery = new StringBuilder();
            try
            {

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        // strQuery.AppendFormat(" Exec getallhdddata1 ");
                        strQuery.AppendFormat(" exec getavailablepolicy ");

                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:

                        strQuery.AppendFormat(" Call getavailablepolicy();  ");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "AvailablePolicyChartData Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "AvailablePolicyChartData Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        public DataTable SystemDeployedPolicyChartData()
        {

            StringBuilder strQuery = new StringBuilder();
            try
            {

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" exec getdeployedpolicysystem ");

                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:

                        strQuery.AppendFormat(" Call getdeployedpolicysystem()");

                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "SystemDeployedPolicyChartData Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "SystemDeployedPolicyChartData Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        public DataTable OUDeployedPolicyChartData(string OUChild)
        {

            StringBuilder strQuery = new StringBuilder();
            try
            {

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" exec getdeployedpolicyou '{0}'", OUChild);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:

                        strQuery.AppendFormat(" Call getdeployedpolicyou('" + OUChild + "')");

                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "OUDeployedPolicyChartData Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "OUDeployedPolicyChartData Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        #endregion

        #region audit_trail_summary

        public DataTable Get_audittrail(string search, string serachdate, string fieldsearch)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select type,case subtype when 'NA' then '' else subtype end as subtype,status,count(*) as total,category_type,category_subtype,category_status from ( ");
                        strQuery.AppendFormat(" select case nt.category_type when 1 then 'Device' when 2 then 'Policy' when 3 then 'Compliance' when 9 then 'OwnYIT' when 10 then 'Remote' when 11 then 'Hardware' when 12 then 'Software' ");
                        strQuery.AppendFormat(" when 13 then 'Performance Monitoring' when 14 then 'Storage' when 15 then 'User' when 16 then 'Login' when 17 then 'Time' when 18 then 'Process'  when 19 then 'Service' when 20 then 'Share' when 21 then 'Virus' end as type, ");
                        strQuery.AppendFormat(" case nt.category_subtype when 101 then 'IP' when 102 then 'Host' when 103 then 'MAC' when 104 then 'Firewall' when 105 then 'N/W Printer'  when 106 then 'Show hidden file/folder' when 107 then 'Simple file sharing' ");
                        strQuery.AppendFormat(" when 111 then 'CPU' when 112 then 'RAM' when 121 then 'Removable'  when 122 then 'Disk' when 123 then 'ROM' when 131 then 'System32'  when 132 then 'Control Panel' when 133 then 'Registry' ");
                        strQuery.AppendFormat(" when 134 then 'Login' when 135 then 'Service'  when 136 then 'Guest' when 10 then 'Remote' when 11 then 'Hardware'  when 15 then 'User' when 20 then 'Share' when 110 then 'Event' ");
                        strQuery.AppendFormat(" when 18 then 'Process' else 'NA' end as subtype,case nt.category_status when -2 then 'Failed' when -1 then 'Removed' when 0 then 'Down' when 1 then 'Added' when 2 then 'Running' ");
                        strQuery.AppendFormat(" when 3 then 'Warning' when 4 then 'error' when 5 then 'violation'  when 6 then 'Time Difference' when 7 then 'Enabled' when 8 then 'Disabled' ");
                        strQuery.AppendFormat(" when 9 then 'Implement / Set' when 10 then 'Access' when 11 then 'Attempt' when 12 then 'Changed' when 13 then 'Detect' when 14 then 'Activation Code Already Exists'  when 15 then 'Invalid Activation Code' when 16 then 'Client Limit Exceeded' ");
                        strQuery.AppendFormat(" when 17 then 'Updated' when 99 then 'General' end as status,category_type,category_subtype,category_status,ou_id from device_master dm,node_audit_trail nt,device_linkage dl where dm.device_id=dl.device_id and dm.status<>-1 and dl.status<>-1  ");
                        strQuery.AppendFormat(" and dm.device_id = nt.device_id and ((nt.category_type in (11, 12)) or nt.category_type not in (11, 12))  ");
                        strQuery.AppendFormat(" and nt.category_type <> 0 and nt.details not like 'pnp entity%' {0} {1} ) t where type <> '' and type is not null {2} group by type,subtype,status,category_type,category_subtype,category_status ", serachdate, search, fieldsearch);
                        break;
                        //strQuery.AppendFormat(" select cast(date_format(e108servertime,'%Y-%d-%m %H:%i:%s') as char) as 'TimeStamp',dl.device_name as 'SystemName', dl.ip as IP,SUBSTRING_INDEX(e108destinationpath,'.',-1) as 'Filetype',case e108type when 1 then 'HDD to USB' when 2 then 'USB to HDD' when 3 then 'Share to HDD' when 4 then 'Share to Removable' when 5 then 'HDD to CDDrive' end as Media,e108sourcepath,e108destinationpath, ");
                        //strQuery.AppendFormat(" ifnull(cast(e108size as char) div 1024,'0') as Size ,dl.ou_node_name from e108dataleak, device_linkage dl where dl.device_id = e108deviceid  and dl.status <>-1 and e108servertime between '{0}' and '{1}'{2} {3}", Startdate, Enddate, search, FieldSerach);
                        // break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_audittrail Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_audittrail Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_audittrail_syswise(string search, string serachdate)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select dl.device_id, dl.device_name, dl.ip,count(*) as total from device_linkage dl,node_audit_trail nt ");
                        strQuery.AppendFormat("where dl.device_id = nt.device_id and dl.status <> -1 and nt.details not like 'pnp entity%' {0} {1} group by dl.device_id, dl.device_name, dl.ip ", serachdate, search);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select dl.device_id, dl.device_name, dl.ip,count(*) as total from device_linkage dl,node_audit_trail nt ");
                        strQuery.AppendFormat("where dl.device_id = nt.device_id and dl.status <> -1 and nt.details not like 'pnp entity%' {0} {1} group by dl.device_id, dl.device_name, dl.ip ", serachdate, search);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_audittrail_syswise Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_audittrail_syswise Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_audittrailsummary(string serachdate, string type, string subtype, string status, string ouid, string search)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select DeviceName,IPAddress,OUName,Type,SubType,Status,DeviceTimeStamp,ServerTime,Message,UserName from ( ");
                        strQuery.AppendFormat(" select dl.device_name as DeviceName,dl.ip as IPAddress,dl.ou_longname as OUName,  ");
                        strQuery.AppendFormat(" case nt.category_type when 1 then 'Device' when 2 then 'Policy' when 3 then 'Compliance' when 9 then 'OwnYIT' when 10 then 'Remote' when 11 then 'Hardware' when 12 then 'Software' when 13 then 'Performance Monitoring' when 14 then 'Storage' when 15 then 'User' when 16 then 'Login' when 17 then 'Time' when 18 then 'Process' when 19 then 'Service' when 20 then 'Share' when 21 then 'Virus' end as Type, ");
                        strQuery.AppendFormat(" case nt.category_subtype when 101 then 'IP' when 102 then 'Host' when 103 then 'MAC' when 104 then 'Firewall' when 105 then 'N/W Printer' when 106 then 'Show hidden file/folder' when 107 then 'Simple file sharing' when 111 then 'CPU' when 112 then 'RAM' when 121 then 'Removable' when 122 then 'Disk' when 123 then 'ROM' when 131 then 'System32' when 132 then 'Control Panel' when 133 then 'Registry' when 134 then 'Login' when 135 then 'Service' when 136 then 'Guest' when 10 then 'Remote' when 11 then 'Hardware' when 15 then 'User' when 20 then 'Share' when 18 then 'Process' when 110 then 'Event' else '' end as SubType, ");
                        strQuery.AppendFormat(" case nt.category_status when -2 then 'Failed' when -1 then 'Removed' when 0 then 'Down' when 1 then 'Added' when 2 then 'Running' when 3 then 'Warning' when 4 then 'Error' when 5 then 'Violation' when 6 then 'Time Difference' when 7 then 'Enabled' when 8 then 'Disabled' when 9 then 'Implement / Set' when 10 then 'Access' when 11 then 'Attempt' when 12 then 'Changed' when 13 then 'Detect' when 14 then 'Activation Code Already Exists' when 15 then 'Invalid Activation Code' when 16 then 'Client Limit Exceeded' when 17 then 'Updated' when 99 then 'General' end as Status, ");
                        strQuery.AppendFormat(" convert(varchar,nt.ServerTime,105)+ ' ' + convert(varchar,nt.ServerTime,108) as ServerTime, convert(varchar,nt.device_timestamp,105)+ ' ' + convert(varchar,nt.device_timestamp,108) as DeviceTimeStamp, nt.category_type,nt.category_subtype,nt.category_status,nt.details as Message,isnull(case nt.UserName when 'NA' then '' when 'NULL' then '' when null then '' else nt.UserName end,'') as UserName ");
                        strQuery.AppendFormat(" from device_master dm,Node_Audit_Trail nt,device_linkage dl where dm.device_id=dl.device_id and dm.status<>-1 and dm.device_id = nt.device_id and dl.status<>-1 ");
                        strQuery.AppendFormat(" and nt.category_type <> 0 and nt.Category_Type in ({0}) and nt.Category_SubType in ({1}) and nt.Category_Status in ({2}) ", type, subtype, status);
                        strQuery.AppendFormat(" and nt.details not like 'pnp entity%' {0} {1} {2} ) T ", serachdate, ouid, search);
                        strQuery.AppendFormat(" Order By DeviceTimeStamp Asc  ");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select DeviceName,IPAddress,OUName,Type,SubType,Status,DeviceTimeStamp,ServerTime,Message,UserName from ( ");
                        strQuery.AppendFormat(" select dl.device_name as DeviceName,dl.ip as IPAddress,dl.ou_longname as OUName,  ");
                        strQuery.AppendFormat(" case nt.category_type when 1 then 'Device' when 2 then 'Policy' when 3 then 'Compliance' when 9 then 'OwnYIT' when 10 then 'Remote' when 11 then 'Hardware' when 12 then 'Software' when 13 then 'Performance Monitoring' when 14 then 'Storage' when 15 then 'User' when 16 then 'Login' when 17 then 'Time' when 18 then 'Process' when 19 then 'Service' when 20 then 'Share' when 21 then 'Virus' end as Type, ");
                        strQuery.AppendFormat(" case nt.category_subtype when 101 then 'IP' when 102 then 'Host' when 103 then 'MAC' when 104 then 'Firewall' when 105 then 'N/W Printer' when 106 then 'Show hidden file/folder' when 107 then 'Simple file sharing' when 111 then 'CPU' when 112 then 'RAM' when 121 then 'Removable' when 122 then 'Disk' when 123 then 'ROM' when 131 then 'System32' when 132 then 'Control Panel' when 133 then 'Registry' when 134 then 'Login' when 135 then 'Service' when 136 then 'Guest' when 10 then 'Remote' when 11 then 'Hardware' when 15 then 'User' when 20 then 'Share' when 18 then 'Process' when 110 then 'Event' else '' end as SubType, ");
                        strQuery.AppendFormat(" case nt.category_status when -2 then 'Failed' when -1 then 'Removed' when 0 then 'Down' when 1 then 'Added' when 2 then 'Running' when 3 then 'Warning' when 4 then 'Error' when 5 then 'Violation' when 6 then 'Time Difference' when 7 then 'Enabled' when 8 then 'Disabled' when 9 then 'Implement / Set' when 10 then 'Access' when 11 then 'Attempt' when 12 then 'Changed' when 13 then 'Detect' when 14 then 'Activation Code Already Exists' when 15 then 'Invalid Activation Code' when 16 then 'Client Limit Exceeded' when 17 then 'Updated' when 99 then 'General' end as Status, ");
                        strQuery.AppendFormat(" cast(date_format(nt.ServerTime,'%d-%m-%Y %H:%i:%s') as char) as ServerTime, cast(date_format(nt.device_timestamp,'%d-%m-%Y %H:%i:%s') as char) as DeviceTimeStamp, nt.category_type,nt.category_subtype,nt.category_status,nt.details as Message,ifnull(case nt.UserName when 'NA' then '' when 'NULL' then '' when null then '' else nt.UserName end,'') as UserName ");
                        strQuery.AppendFormat(" from device_master dm,node_audit_trail nt,device_linkage dl where dm.device_id=dl.device_id and dm.status<>-1 and dm.device_id = nt.device_id and dl.status<>-1 ");
                        strQuery.AppendFormat(" and nt.category_type <> 0 and nt.Category_Type in ({0}) and nt.Category_SubType in ({1}) and nt.Category_Status in ({2}) ", type, subtype, status);
                        strQuery.AppendFormat(" and nt.details not like 'pnp entity%' {0} {1} {2} ) T ", serachdate, ouid, search);
                        strQuery.AppendFormat(" Order By DeviceTimeStamp Asc  ");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_audittrailsummary Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_audittrailsummary Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_audittrailsummary_syswise(string serachdate, string ouid, string device_ids, string search)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select DeviceName,IPAddress,OUName,Type,SubType,Status,DeviceTimeStamp,ServerTime,Message,UserName from ( ");
                        strQuery.AppendFormat(" select dl.device_name as DeviceName,dl.ip as IPAddress,dl.ou_longname as OUName,  ");
                        strQuery.AppendFormat(" case nt.category_type when 1 then 'Device' when 2 then 'Policy' when 3 then 'Compliance' when 9 then 'OwnYIT' when 10 then 'Remote' when 11 then 'Hardware' when 12 then 'Software' when 13 then 'Performance Monitoring' when 14 then 'Storage' when 15 then 'User' when 16 then 'Login' when 17 then 'Time' when 18 then 'Process' when 19 then 'Service' when 20 then 'Share' when 21 then 'Virus' end as Type, ");
                        strQuery.AppendFormat(" case nt.category_subtype when 101 then 'IP' when 102 then 'Host' when 103 then 'MAC' when 104 then 'Firewall' when 105 then 'N/W Printer' when 106 then 'Show hidden file/folder' when 107 then 'Simple file sharing' when 111 then 'CPU' when 112 then 'RAM' when 121 then 'Removable' when 122 then 'Disk' when 123 then 'ROM' when 131 then 'System32' when 132 then 'Control Panel' when 133 then 'Registry' when 134 then 'Login' when 135 then 'Service' when 136 then 'Guest' when 10 then 'Remote' when 11 then 'Hardware' when 15 then 'User' when 20 then 'Share' when 18 then 'Process' when 110 then 'Event' else '' end as SubType, ");
                        strQuery.AppendFormat(" case nt.category_status when -2 then 'Failed' when -1 then 'Removed' when 0 then 'Down' when 1 then 'Added' when 2 then 'Running' when 3 then 'Warning' when 4 then 'Error' when 5 then 'Violation' when 6 then 'Time Difference' when 7 then 'Enabled' when 8 then 'Disabled' when 9 then 'Implement / Set' when 10 then 'Access' when 11 then 'Attempt' when 12 then 'Changed' when 13 then 'Detect' when 14 then 'Activation Code Already Exists' when 15 then 'Invalid Activation Code' when 16 then 'Client Limit Exceeded' when 17 then 'Updated' when 99 then 'General' end as Status, ");
                        strQuery.AppendFormat(" convert(varchar,nt.ServerTime,105)+ ' ' + convert(varchar,nt.ServerTime,108) as ServerTime, convert(varchar,nt.device_timestamp,105)+ ' ' + convert(varchar,nt.device_timestamp,108) as DeviceTimeStamp, nt.category_type,nt.category_subtype,nt.category_status,nt.details as Message,isnull(case nt.UserName when 'NA' then '' when 'NULL' then '' when null then '' else nt.UserName end,'') as UserName ");
                        strQuery.AppendFormat(" from device_master dm,Node_Audit_Trail nt,device_linkage dl where dm.device_id=dl.device_id and dm.status<>-1 and dm.device_id = nt.device_id and dl.status<>-1 and dl.device_id in ({0}) ", device_ids);
                        strQuery.AppendFormat(" and nt.details not like 'pnp entity%' {0} {1} {2} ) T ", serachdate, ouid, search);
                        strQuery.AppendFormat(" Order By DeviceTimeStamp Asc  ");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select DeviceName,IPAddress,OUName,Type,SubType,Status,DeviceTimeStamp,ServerTime,Message,UserName from ( ");
                        strQuery.AppendFormat(" select dl.device_name as DeviceName,dl.ip as IPAddress,dl.ou_longname as OUName,  ");
                        strQuery.AppendFormat(" case nt.category_type when 1 then 'Device' when 2 then 'Policy' when 3 then 'Compliance' when 9 then 'OwnYIT' when 10 then 'Remote' when 11 then 'Hardware' when 12 then 'Software' when 13 then 'Performance Monitoring' when 14 then 'Storage' when 15 then 'User' when 16 then 'Login' when 17 then 'Time' when 18 then 'Process' when 19 then 'Service' when 20 then 'Share' when 21 then 'Virus' end as Type, ");
                        strQuery.AppendFormat(" case nt.category_subtype when 101 then 'IP' when 102 then 'Host' when 103 then 'MAC' when 104 then 'Firewall' when 105 then 'N/W Printer' when 106 then 'Show hidden file/folder' when 107 then 'Simple file sharing' when 111 then 'CPU' when 112 then 'RAM' when 121 then 'Removable' when 122 then 'Disk' when 123 then 'ROM' when 131 then 'System32' when 132 then 'Control Panel' when 133 then 'Registry' when 134 then 'Login' when 135 then 'Service' when 136 then 'Guest' when 10 then 'Remote' when 11 then 'Hardware' when 15 then 'User' when 20 then 'Share' when 18 then 'Process' when 110 then 'Event' else '' end as SubType, ");
                        strQuery.AppendFormat(" case nt.category_status when -2 then 'Failed' when -1 then 'Removed' when 0 then 'Down' when 1 then 'Added' when 2 then 'Running' when 3 then 'Warning' when 4 then 'Error' when 5 then 'Violation' when 6 then 'Time Difference' when 7 then 'Enabled' when 8 then 'Disabled' when 9 then 'Implement / Set' when 10 then 'Access' when 11 then 'Attempt' when 12 then 'Changed' when 13 then 'Detect' when 14 then 'Activation Code Already Exists' when 15 then 'Invalid Activation Code' when 16 then 'Client Limit Exceeded' when 17 then 'Updated' when 99 then 'General' end as Status, ");
                        strQuery.AppendFormat(" cast(date_format(nt.ServerTime,'%d-%m-%Y %H:%i:%s') as char) as ServerTime, cast(date_format(nt.device_timestamp,'%d-%m-%Y %H:%i:%s') as char) as DeviceTimeStamp, nt.category_type,nt.category_subtype,nt.category_status,nt.details as Message,ifnull(case nt.UserName when 'NA' then '' when 'NULL' then '' when null then '' else nt.UserName end,'') as UserName ");
                        strQuery.AppendFormat(" from device_master dm,node_audit_trail nt,device_linkage dl where dm.device_id=dl.device_id and dm.status<>-1 and dm.device_id = nt.device_id and dl.status<>-1 and dl.device_id in '{0}' ", device_ids);
                        strQuery.AppendFormat(" and nt.details not like 'pnp entity%' {0} {1} {2}) T ", serachdate, ouid, search);
                        strQuery.AppendFormat(" Order By DeviceTimeStamp Asc  ");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_audittrailsummary_syswise Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_audittrailsummary_syswise Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        #endregion
        #region offline_hardware_master
        public DataTable Get_offline_hardwarename()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select distinct hardware_name from offline_hardware_master where hardware_name <> '' ");

                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_offline_hardwarename Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_offline_hardwarename Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_offline_vendor()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        //strQuery.AppendFormat(" select distinct vendorname from offline_hardware_master where vendorName <> '' ");
                        strQuery.AppendFormat("select distinct vendor_name from vendor_master where vendor_name <> '' ");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_offline_vendor Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_offline_vendor Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_offline_AMC_vendor()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        //strQuery.AppendFormat(" select distinct amc_vendor from offline_hardware_master where amc_vendor <> '' ");
                        strQuery.AppendFormat(" select distinct vendor_name from vendor_master where vendor_name <> '' ");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_offline_AMC_vendor Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_offline_AMC_vendor Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_offline_User_Name()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        //strQuery.AppendFormat(" select distinct username from user_table where username <> '' and local_account='-1' ");
                        strQuery.AppendFormat(" select distinct login_user from node_user_info where login_user not in('NULL','NA')");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_offline_User_Name Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_offline_User_Name Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public int Insert_offline_hardwaremaster(string hrd_name, string manufacture, string model, string m_no, string p_date, string vName, string po_no, string i_no, string w_from, string w_end, string Avendor, string A_to, string A_end, string amount, string u_name, string asset_id, string remark, string allocate_user, string ouname, string ou_id, string quantity, string attachment, string filename)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" insert into offline_hardware_master(hardware_name,manufacture,model_no,machine_sr_no,purchase_date,vendorname,po_no,invoice_no,warranty_period_fromto,warranty_end,amc_vendor,amc_fromto,amc_end,amount,user_name,asset_id,remark,allocate_user,ouname,ou_id,quantity,attachment,filename) ");
                        strQuery.AppendFormat(" values('{0}','{1}','{2}','{3}','{4}','{5}','{6}','{7}','{8}','{9}','{10}','{11}','{12}','{13}','{14}','{15}','{16}','{17}','{18}','{19}','{20}','{21}','{22}') ", hrd_name, manufacture, model, m_no, p_date, vName, po_no, i_no, w_from, w_end, Avendor, A_to, A_end, amount, u_name, asset_id, remark, allocate_user, ouname, ou_id, quantity, attachment, filename.Replace("\\", ""));
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" insert into offline_hardware_master(hardware_name,manufacture,model_no,machine_sr_no,purchase_date,vendorname,po_no,invoice_no,warranty_period_fromto,warranty_end,amc_vendor,amc_fromto,amc_end,amount,user_name,asset_id,remark,allocate_user,ouname,ou_id,quantity,attachment,filename) ");
                        strQuery.AppendFormat(" values('{0}','{1}','{2}','{3}','{4}','{5}','{6}','{7}','{8}','{9}','{10}','{11}','{12}','{13}','{14}','{15}','{16}',{17},'{18}','{19}','{20}','{21}','{22}') ", hrd_name, manufacture, model, m_no, p_date, vName, po_no, i_no, w_from, w_end, Avendor, A_to, A_end, amount, u_name, asset_id, remark, allocate_user, ouname, ou_id, quantity, attachment.Replace(@"\", @"\\"), filename);
                        break;
                }

                objcommon.WriteLog("DBQueryHandler", "Insert_offline_hardwaremaster Query : " + strQuery);
                result = this.database.execute(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Insert_offline_hardwaremaster Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int Update_offline_hardwaremaster(string hrd_id, string hrd_name, string manufacture, string model, string m_no, string p_date, string vName, string po_no, string i_no, string w_from, string w_end, string Avendor, string A_to, string A_end, string amount, string u_name, string asset_id, string remark, string allocate_user, string ouname, string ou_id, string quantity, string attachment, string filename)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" update offline_hardware_master set hardware_name='{0}',manufacture='{1}',model_no='{2}',machine_sr_no='{3}',purchase_date='{4}',vendorname='{5}',po_no='{6}',invoice_no='{7}',warranty_period_fromto='{8}',warranty_end='{9}', ", hrd_name, manufacture, model, m_no, p_date, vName, po_no, i_no, w_from, w_end);
                        strQuery.AppendFormat(" amc_vendor='{0}',amc_fromto='{1}',amc_end='{2}',amount='{3}',user_name='{4}',asset_id='{5}',remark='{6}',allocate_user='{7}',ouname='{8}',ou_id='{9}',quantity='{10}',attachment='{11}',filename='{12}',timestamp=getdate() ", Avendor, A_to, A_end, amount, u_name, asset_id, remark, allocate_user, ouname, ou_id, quantity, attachment, filename.Replace("\\", ""));
                        strQuery.AppendFormat(" where  hardware_id={0}", hrd_id);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" update offline_hardware_master set hardware_name='{0}',manufacture='{1}',model_no='{2}',machine_sr_no='{3}',purchase_date='{4}',vendorname='{5}',po_no='{6}',invoice_no='{7}',warranty_period_fromto='{8}',warranty_end='{9}', ", hrd_name, manufacture, model, m_no, p_date, vName, po_no, i_no, w_from, w_end);
                        strQuery.AppendFormat(" amc_vendor='{0}',amc_fromto='{1}',amc_end='{2}',amount='{3}',user_name='{4}',asset_id='{5}',remark='{6}',allocate_user={7},ouname='{8}',ou_id='{9}',quantity='{10}',attachment='{11}',filename='{12}',timestamp=now() ", Avendor, A_to, A_end, amount, u_name, asset_id, remark, allocate_user, ouname, ou_id, quantity, attachment.Replace(@"\", @"\\"), filename);
                        strQuery.AppendFormat(" where  hardware_id={0}", hrd_id);
                        break;
                }

                objcommon.WriteLog("DBQueryHandler", "Update_offline_hardwaremaster Query : " + strQuery);
                result = this.database.execute(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Update_offline_hardwaremaster Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public DataTable Get_offline_hardware_details()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select hardware_id,ouname,hardware_name,user_name,vendorname,manufacture,CONVERT(VARCHAR,purchase_date,105) as purchase_date,quantity,po_no from offline_hardware_master ");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select hardware_id,ouname,hardware_name,user_name,vendorname,manufacture,cast(date_format(purchase_date,'%d-%m-%Y') as char) as purchase_date,quantity,po_no from offline_hardware_master ");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_offline_hardware_details Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_offline_hardware_details Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        public int delete_offline_hardwaremaster(string hrd_id)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" delete from offline_hardware_master where hardware_id={0} ", hrd_id);

                        break;
                }

                objcommon.WriteLog("DBQueryHandler", "delete_offline_hardwaremaster Query : " + strQuery);
                result = this.database.execute(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "delete_offline_hardwaremaster Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public DataTable Get_offline_hardware_details_hrdwise(string hrd_id)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select hardware_id,hardware_name,manufacture,model_no,machine_sr_no,convert(varchar,purchase_date,103) as purchase_date,vendorname,po_no,invoice_no,convert(varchar,warranty_period_fromto,103) as warranty_period_fromto,convert(varchar,warranty_end,103) as warranty_end,amc_vendor,convert(varchar,amc_fromto,103) as amc_fromto,convert(varchar,amc_end,103) as amc_end,amount,user_name,asset_id,remark,allocate_user,ouname,ou_id,quantity,attachment,filename from offline_hardware_master where hardware_id={0} ", hrd_id);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        // strQuery.AppendFormat(" select * from offline_hardware_master where hardware_id={0} ", hrd_id);
                        strQuery.AppendFormat(" select hardware_id,hardware_name,manufacture,model_no,machine_sr_no,cast(date_format(purchase_date,'%d/%m/%Y') as char) as purchase_date,vendorname,po_no,invoice_no,cast(date_format(warranty_period_fromto,'%d/%m/%Y') as char) as warranty_period_fromto,cast(date_format(warranty_end,'%d/%m/%Y') as char)  as warranty_end,amc_vendor,cast(date_format(amc_fromto,'%d/%m/%Y') as char) as amc_fromto,cast(date_format(amc_end,'%d/%m/%Y') as char) as amc_end,amount,user_name,asset_id,remark,allocate_user,ouname,ou_id,quantity,attachment,filename from offline_hardware_master where hardware_id={0} ", hrd_id);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_offline_hardware_details_hrdwise Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_offline_hardware_details_hrdwise Exception : " + ex.Message.ToString());
            }
            return data_table;
        }


        #endregion

        #region hardware Details popup in system details page

        public int count_assetinfo(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select count(*)  from new_asset_info where device_id='{0}' ", deviceid);
                        break;
                }

                objcommon.WriteLog("DBQueryHandler", "count_assetinfo Query : " + strQuery);
                result = this.database.getIntValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "count_assetinfo Exception : " + ex.Message.ToString());
            }
            return result;
        }
        //public int Insert_AssetInfo(string deviceid, string motherboard, string manufacturer, string processor, string model, string hddcapacity, string ramtype, string ramsize, string keyboard, string mouse, string monitor, string os, string osdate)
        public int Insert_AssetInfo(string deviceid, string motherboard, string manufacturer, string processor, string model, string hddtype, string hddlist, string hddcapacity, string ramtype, string ramsize, string ramslot, string keyboard, string mouse, string monitor, string floppy, string cdrom, string nic, string os, string osdate)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" insert into new_asset_info(device_id,motherboard,manufacturer,processor,model,hard_disk_type,hard_disk_list,hard_disk_capacity,ram_type,ram_size,total_sdram_slots,keyboard,mouse,monitor,floppy_drive,cdrom,nic,os_name,installation_date) ");
                        strQuery.AppendFormat(" values('{0}','{1}','{2}','{3}','{4}','{5}','{6}','{7}','{8}','{9}','{10}','{11}','{12}','{13}','{14}','{15}','{16}','{17}','{18}')", deviceid, motherboard, manufacturer, processor, model, hddtype, hddlist, hddcapacity, ramtype, ramsize, ramslot, keyboard, mouse, monitor, floppy, cdrom, nic, os, osdate);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        if (ramslot != "")
                            ramslot = "0";
                        strQuery.AppendFormat(" insert into new_asset_info(device_id,motherboard,manufacturer,processor,model,hard_disk_type,hard_disk_list,hard_disk_capacity,ram_type,ram_size,total_sdram_slots,keyboard,mouse,monitor,floppy_drive,cdrom,nic,os_name,installation_date) ");
                        strQuery.AppendFormat(" values('{0}','{1}','{2}','{3}','{4}','{5}','{6}','{7}','{8}','{9}','{10}','{11}','{12}','{13}','{14}','{15}','{16}','{17}','{18}');", deviceid, motherboard, manufacturer, processor, model, hddtype, hddlist, hddcapacity, ramtype, ramsize, ramslot, keyboard, mouse, monitor, floppy, cdrom, nic, os, osdate);
                        break;

                }

                objcommon.WriteLog("DBQueryHandler", "Insert_AssetInfo Query : " + strQuery);
                result = this.database.execute(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Insert_AssetInfo Exception : " + ex.Message.ToString());
            }
            return result;
        }

        public int Update_AssetInfo(string deviceid, string motherboard, string manufacturer, string processor, string model, string hddtype, string hddlist, string hddcapacity, string ramtype, string ramsize, string ramslot, string keyboard, string mouse, string monitor, string floppy, string cdrom, string nic, string os, string osdate)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" update new_asset_info set ");
                        string strupdate = "";
                        if (motherboard != "")
                            strupdate += ",motherboard='" + motherboard + "'";
                        if (manufacturer != "")
                            strupdate += ",manufacturer='" + manufacturer + "'";
                        if (processor != "")
                            strupdate += ",processor='" + processor + "'";
                        if (model != "")
                            strupdate += ",model='" + model + "'";
                        if (hddtype != "")
                            strupdate += ",hard_disk_type='" + hddtype + "'";
                        if (hddlist != "")
                            strupdate += ",hard_disk_list='" + hddlist + "'";
                        if (hddcapacity != "")
                            strupdate += ",hard_disk_capacity='" + hddcapacity + "'";
                        if (ramtype != "")
                            strupdate += ",ram_type='" + ramtype + "'";
                        if (ramsize != "")
                            strupdate += ",ram_size='" + ramsize + "'";
                        if (ramslot != "")
                            strupdate += ",total_sdram_slots='" + ramslot + "'";
                        else
                            strupdate += ",total_sdram_slots='0'";
                        if (keyboard != "")
                            strupdate += ",keyboard='" + keyboard + "'";
                        if (mouse != "")
                            strupdate += ",mouse='" + mouse + "'";
                        if (monitor != "")
                            strupdate += ",monitor='" + monitor + "'";
                        if (floppy != "")
                            strupdate += ",floppy_drive='" + floppy + "'";
                        if (cdrom != "")
                            strupdate += ",cdrom='" + cdrom + "'";
                        if (nic != "")
                            strupdate += ",nic='" + nic + "'";
                        if (os != "")
                            strupdate += ",os_name='" + os + "'";
                        if (osdate != "")
                            strupdate += ",installation_date='" + osdate + "'";

                        if (strupdate.Trim().Length > 0)
                            strupdate = strupdate.Substring(1);
                        //strQuery.AppendFormat(" update new_asset_info set motherboard='{0}',processor='{1}',model='{2}',hard_disk_capacity='{3}',ram_type='{4}',ram_size='{5}',keyboard='{6}',mouse='{7}',monitor='{8}',manufacturer='{10}',hard_disk_type='{11}',hard_disk_list='{12}',total_sdram_slots={13},floppy_drive='{14}',cdrom='{15}',nic='{16}',os_name='{17}',installation_date='{18}' where device_id='{9}'", motherboard, processor, model, hddcapacity, ramtype, ramsize, keyboard, mouse, monitor, deviceid, manufacturer, hddtype, hddlist, ramslot, floppy, cdrom, nic, os, osdate);
                        strQuery.AppendFormat("{0} where device_id='{1}'", strupdate, deviceid);
                        break;
                }

                objcommon.WriteLog("DBQueryHandler", "Update_AssetInfo Query : " + strQuery);
                result = this.database.execute(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Update_AssetInfo Exception : " + ex.Message.ToString());
            }
            return result;
        }

        public string Get_hrdjsondata(string hrdtype, string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            string str = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select distinct hw_json from node_hardware_info where  device_id={1} and hardware_class='{0}' ", hrdtype, deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_hrdjsondata Query : " + strQuery.ToString());
                str = this.database.getValue(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_hrdjsondata Exception : " + ex.Message.ToString());
            }
            return str;
        }
        public DataTable Get_hrdjsondatatable(string hrdtype, string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        if (hrdtype == "HardDisk")
                            strQuery.AppendFormat(" select distinct drive_type,disk_deviceid,disk_model,disk_serial_number,cast( disk_size/1024/1024/1024 as varchar) + ' GB' as disk_size from node_drive_info where device_id={0} and disk_size > 0 ", deviceid);
                        else if (hrdtype == "NicCard")
                            strQuery.AppendFormat(" select distinct name,connection_id,manufacturer,mac,adapter_type,service_name,speed_bps,convert(varchar,last_reset_time,105) + ' ' + convert(varchar,last_reset_time,108) as last_reset_time from node_networkcard_info where connection_id <> '0' and device_id={0} ", deviceid);
                        else
                            strQuery.AppendFormat(" select distinct hw_json from node_hardware_info where device_id={1} and hardware_class='{0}' ", hrdtype, deviceid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        if (hrdtype == "HardDisk")
                            strQuery.AppendFormat(" select distinct drive_type,disk_deviceid,disk_model,disk_serial_number,concat(cast(disk_size/1024/1024/1024 as UNSIGNED), ' GB') as disk_size from node_drive_info where device_id={0} and disk_size > 0 ", deviceid);
                        else if (hrdtype == "NicCard")
                            strQuery.AppendFormat(" select distinct name,connection_id,manufacturer,mac,adapter_type,service_name,speed_bps,cast(date_format(last_reset_time,'%d-%m-%Y %H:%i:%s') as char) as last_reset_time from node_networkcard_info where connection_id <> '0' and device_id={0} ", deviceid);
                        else
                            strQuery.AppendFormat(" select distinct hw_json from node_hardware_info where device_id={1} and hardware_class='{0}' ", hrdtype, deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_hrdjsondatatable Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_hrdjsondatatable Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_Hardware_type(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();

            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select distinct case hardware_class when 'Port/MotherBoard' then 'PortMotherBoard' else hardware_class end as hardware_class from node_hardware_info where device_id = {0} ", deviceid);
                        strQuery.AppendFormat("and hardware_class not in ('Account', 'MotherBoardDevice', 'ParallelPort', 'Port/MotherBoard') and hw_json <> '' union select case when count(*) > 0 then 'Harddisk' else '' end from node_drive_info where device_id = {0} and logical = 12 ", deviceid);
                        strQuery.AppendFormat("union select case when count(*) > 0 then 'Niccard' else '' end from node_networkcard_info where device_id = {0} and connection_id <> '0' order by hardware_class", deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Hardware_type Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Hardware_type Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_Hardware_type1()
        {
            StringBuilder strQuery = new StringBuilder();

            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        //strQuery.AppendFormat("select distinct case hardware_class when 'Port/MotherBoard' then 'PortMotherBoard' else hardware_class end as hardware_class from node_hardware_info where hardware_class not in ('Account','MotherBoardDevice','ParallelPort','Port/MotherBoard') and hw_json <>'' union select case when count(*) > 0 then 'Harddisk' else '' end from node_drive_info where logical = 12 union select case when count(*) > 0 then 'Niccard' else '' end from node_networkcard_info where connection_id <> '0'");
                        strQuery.AppendFormat("select distinct case hardware_class when 'Port/MotherBoard' then 'PortMotherBoard' else hardware_class end as hardware_class from node_hardware_info where hardware_class not in ('Account','POTSModem','DisplayConfiguration','Desktop') and hw_json <>'' union select case when count(*) > 0 then 'Harddisk' else '' end from node_drive_info where logical = 12 union select case when count(*) > 0 then 'Niccard' else '' end from node_networkcard_info where connection_id <> '0'");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select distinct case hardware_class when 'Port/MotherBoard' then 'PortMotherBoard' else hardware_class end as hardware_class from node_hardware_info where hardware_class not in ('Account','POTSModem','DisplayConfiguration','Desktop') and hw_json <>'' union select case when count(*) > 0 then 'Harddisk' else '' end from node_drive_info where logical = 12 union select case when count(*) > 0 then 'Niccard' else '' end from node_networkcard_info where connection_id <> '0'");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Hardware_type1 Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Hardware_type1 Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        #endregion

        #region Firewall Status Report
        public DataTable Get_Firewallusername(string strouid)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select distinct ut.e115username from device_linkage dl,e115securitystatus ut where ut.e115deviceid = dl.device_id and dl.status <> -1 and ut.e115username <> '0' and ut.e115username is not null and ou_id in ({0})", strouid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Firewallusername Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Firewallusername Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        public DataTable Get_usernamefirewall(string strouid)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select nu.login_user from node_user_info nu left outer join device_linkage dl on dl.device_id = nu.device_id where dl.device_mode in (1,2,3) and dl.status <> -1 and ou_id in ({0})", strouid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_usernamefirewall Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_usernamefirewall Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        public DataTable Get_SysFWStatus(string serachdate, string search)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select distinct dl.device_name,dl.ip,ou_longname,case login_user when 'NA' then '' when 'NULL' then '' when null then '' else login_user end as login_user, case ns.data1 when '1' then 'ON' when '0' then 'OFF' when null then '' when 'NULL' then '' else ns.data1 end as 'status', ");
                        strQuery.AppendFormat(" convert(varchar,dl.datetime,105)+ ' ' + convert(varchar,dl.datetime,108) as timestamp  from device_linkage dl left outer join node_system_info ns ");
                        strQuery.AppendFormat(" on dl.device_id=ns.device_id left outer join  node_user_info nu on dl.device_id = nu.device_id ");
                        strQuery.AppendFormat(" where dl.status<>-1 and data_type=3 and data_subtype=1 {0} ", serachdate);
                        strQuery.AppendFormat(" {0} order by timestamp desc ", search);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select distinct dl.device_name,dl.ip,ou_longname,case login_user when 'NA' then '' when 'NULL' then '' when null then '' else login_user end as login_user, ");
                        strQuery.AppendFormat(" case ns.data1 when '1' then 'ON' when '0' then 'OFF' when null then '' when 'NULL' then '' else ns.data1 end as 'status', ");
                        strQuery.AppendFormat(" cast(date_format(dl.datetime,'%d-%m-%Y %H:%i:%s') as char) as timestamp ");
                        strQuery.AppendFormat(" from device_linkage dl left outer join node_system_info ns on dl.device_id=ns.device_id left outer join ");
                        strQuery.AppendFormat(" node_user_info nu on dl.device_id = nu.device_id where dl.status<>-1 and data_type=3 and data_subtype=1 {0} ", serachdate);
                        strQuery.AppendFormat(" {0} order by timestamp desc ", search);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_SysFWStatus Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_SysFWStatus Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        // Firewall Exception Report
        public DataTable Get_FWException(string strouid)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("  select Replace(C153ExceptionEntity,'  ',' ') as Exception from device_linkage dl,c153firewallexception ut where ut.c153deviceid = dl.device_id and dl.status <> -1  and ou_id in ({0})", strouid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_FWException Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_FWException Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        public DataTable Get_SysFWException(string search)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select distinct dm.device_name,dm.ip,ou_longname, nfe.rule_json ");
                        strQuery.AppendFormat(" from node_firewall_exception nfe,device_master dm,device_linkage dl  ");
                        strQuery.AppendFormat(" where dm.device_id=dl.device_id and nfe.device_id=dm.device_id and dl.status<>-1 {0}", search);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_SysFWException Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_SysFWException Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        // Screen saver PWD Report

        public DataTable Get_usernameouwise(string strouid)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select distinct nu.login_user from device_linkage dl,node_user_info nu where nu.device_id = dl.device_id and dl.status <> -1 and nu.login_user <> '0' and nu.login_user is not null and ou_id in ({0})", strouid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_usernameouwise Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_usernameouwise Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_ScreensaverPwd(string search)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select distinct dl.ou_longname,dl.device_name,dl.ip,case nui.login_user when 'NA' then '' when 'NULL' then '' when null then '' else nui.login_user end as login_user, pswstatus from (select device_id,case data1 when 1 then 'Yes' when 0 then 'No' when 'NULL' then '' when null then '' end as pswstatus from node_system_info where data_type = 3 and data_subtype = 2) T ");
                        strQuery.AppendFormat("left outer join device_linkage dl on dl.device_id = T.device_id left outer join node_user_info nui on dl.device_id = nui.device_id where dl.status<>-1 {0} ", search);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select distinct dl.ou_longname,dl.device_name,dl.ip,case nui.login_user when 'NA' then '' when 'NULL' then '' when null then '' else nui.login_user end as login_user, pswstatus from (select device_id,case data1 when 1 then 'Yes' when 0 then 'No' when 'NULL' then '' when null then '' end as pswstatus from node_system_info where data_type = 3 and data_subtype = 2) T ");
                        strQuery.AppendFormat("left outer join device_linkage dl on dl.device_id = T.device_id left outer join node_user_info nui on dl.device_id = nui.device_id where dl.status<>-1 {0} ", search);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_ScreensaverPwd Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_ScreensaverPwd Exception : " + ex.Message.ToString());
            }
            return data_table;
        }


        #endregion
        #region Vendor master
        public DataTable Get_Vendor_details()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select vendor_id,vendor_name,case contact_person when null then '' else contact_person end as contact_person,case city when null then '' else city end as city,case isnull(mobile_no1,mobile_no2) when null then '' else isnull(mobile_no1,mobile_no2) end as mobile,case email_address when null then '' else email_address end as email_address from vendor_master ");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select vendor_id,vendor_name,case contact_person when null then '' else contact_person end as contact_person,case city when null then '' else city end as city,case ifnull(mobile_no1,mobile_no2) when null then '' else ifnull(mobile_no1,mobile_no2) end as mobile,case email_address when null then '' else email_address end as email_address from vendor_master  ");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Vendor_details Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Vendor_details Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public int count__Vendormaster(string vname)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select count(*) as cnt from vendor_master where vendor_name='{0}' ", vname);
                        break;
                }

                objcommon.WriteLog("DBQueryHandler", "count__Vendormaster Query : " + strQuery);
                result = this.database.getIntValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "count__Vendormaster Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int Insert__Vendormaster(string vname, string supplier, string address, string city, string contact_person, string phone_no1, string phone_no2, string mobile_no1, string mobile_no2, string fax_no, string email_address, string gst, string pin_no)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" insert into vendor_master(vendor_name,supplier,address,city,contact_person,phone_no1,phone_no2,mobile_no1,mobile_no2,fax_no,email_address,gst,pin_no) ");
                        strQuery.AppendFormat(" values('{0}','{1}','{2}','{3}','{4}','{5}','{6}','{7}','{8}','{9}','{10}','{11}','{12}')", vname, supplier, address, city, contact_person, phone_no1, phone_no2, mobile_no1, mobile_no2, fax_no, email_address, gst, pin_no);
                        break;
                }

                objcommon.WriteLog("DBQueryHandler", "Insert__Vendormaster Query : " + strQuery);
                result = this.database.execute(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Insert__Vendormaster Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int Update_Vendormaster(string v_id, string vname, string supplier, string address, string city, string contact_person, string phone_no1, string phone_no2, string mobile_no1, string mobile_no2, string fax_no, string email_address, string gst, string pin_no)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" update vendor_master set vendor_name='{0}',supplier='{1}',address='{2}',city='{3}',contact_person='{4}',phone_no1='{5}', ", vname, supplier, address, city, contact_person, phone_no1);
                        strQuery.AppendFormat(" phone_no2='{0}',mobile_no1='{1}',mobile_no2='{2}',fax_no='{3}',email_address='{4}',gst='{5}',pin_no='{6}',timestamp=getdate() where vendor_id={7}", phone_no2, mobile_no1, mobile_no2, fax_no, email_address, gst, pin_no, v_id);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" update vendor_master set vendor_name='{0}',supplier='{1}',address='{2}',city='{3}',contact_person='{4}',phone_no1='{5}', ", vname, supplier, address, city, contact_person, phone_no1);
                        strQuery.AppendFormat(" phone_no2='{0}',mobile_no1='{1}',mobile_no2='{2}',fax_no='{3}',email_address='{4}',gst='{5}',pin_no='{6}',timestamp=now() where vendor_id={7}", phone_no2, mobile_no1, mobile_no2, fax_no, email_address, gst, pin_no, v_id);
                        break;
                }

                objcommon.WriteLog("DBQueryHandler", "Update_Vendormaster Query : " + strQuery);
                result = this.database.execute(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Update_Vendormaster Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int delete__Vendormaster(string vendor_id)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" delete from vendor_master where vendor_id={0} ", vendor_id);
                        break;
                }

                objcommon.WriteLog("DBQueryHandler", "delete__Vendormaster Query : " + strQuery);
                result = this.database.execute(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "delete__Vendormaster Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public DataTable Get_Vendor_data(string vendorid)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select * from vendor_master where vendor_id={0}", vendorid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Vendor_data Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Vendor_data Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        #endregion

        #region User Information Report
        public DataTable Get_User_information(string search)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select distinct dl.device_id,isnull(dl.device_name,dl.device_name) as systemname ,dl.ip,ut.username,case disabled when -1 then 'Disabled' else 'Enabled' end as status,dl.ou_longname from device_linkage dl inner join user_table ut on dl.device_id=ut.device_id where dl.status<>-1 and local_account='-1' {0}", search);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select distinct dl.device_id,ifnull(dl.device_name,dl.device_name) as systemname ,dl.ip,ut.username,case disabled when -1 then 'Disabled' else 'Enabled' end as status,dl.ou_longname from device_linkage dl inner join user_table ut on dl.device_id=ut.device_id where dl.status<>-1 and local_account='-1' {0}", search);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_User_information Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_User_information Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        #endregion

        #region Share Resources information Report
        public DataTable Get_Share_information(string search)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select distinct dl.device_id,isnull(dl.device_name,dl.device_name) as systemname ,dl.ip,ns.share_name,case path when 'NA' then '' when 'NULL' then '' when null then '' else path end as path,dl.ou_longname from device_linkage dl inner join node_share_info ns on dl.device_id=ns.device_id where dl.status<>-1 {0}", search);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select distinct dl.device_id,ifnull(dl.device_name,dl.device_name) as systemname ,dl.ip,ns.share_name,case path when 'NA' then '' when 'NULL' then '' when null then '' else path end as path,dl.ou_longname from device_linkage dl inner join node_share_info ns on dl.device_id=ns.device_id where dl.status<>-1 {0}", search);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Share_information Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Share_information Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        #endregion

        #region offline_software_master
        public DataTable Get_offline_software_details()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select distinct software_id,software_name,key_number,licenses_type,no_of_licenses,isnull((select top 1 vendor_name from vendor_master where vendor_id=vendor_code),'')as 'vendor',convert(varchar,purchase_date,105) as purchase_date,convert(varchar,expiry_date,105) as expiry_date,software_type ");
                        strQuery.AppendFormat(" from offline_software_master os, vendor_master vm  ");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select distinct software_id,software_name,key_number,licenses_type,no_of_licenses,ifnull((select vendor_name from vendor_master where vendor_id=vendor_code limit 1),'')as 'vendor',cast(date_format(purchase_date,'%d-%m-%Y') as char) as purchase_date,cast(date_format(expiry_date,'%d-%m-%Y') as char) as expiry_date,software_type  ");
                        strQuery.AppendFormat(" from offline_software_master os, vendor_master vm ");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_offline_software_details Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_offline_software_details Exception : " + ex.Message.ToString());
            }
            return data_table;
        }


        public DataTable Get_softoffline_software_name()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select distinct software_name from offline_software_master where software_name <> '' ");

                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_softoffline_software_name Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_softoffline_software_name Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_softoffline_key_number()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select distinct key_number from offline_software_master where key_number <> '' ");

                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_softoffline_key_number Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_softoffline_key_number Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_softoffline_vendorname()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select distinct vendor_id,vendor_name from vendor_master where vendor_name <> '' ");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_softoffline_vendorname Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_softoffline_vendorname Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_softoffline_licenses_type()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select distinct license_name from offline_software_license where license_name <> '' ");

                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_softoffline_licenses_type Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_softoffline_licenses_type Exception : " + ex.Message.ToString());
            }
            return data_table;
        }


        public int insert_vendorname(string vendorname)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" insert into vendor_master (vendor_name) values('{0}') ", vendorname);
                        break;

                }

                objcommon.WriteLog("DBQueryHandler", "insert_vendorname Query : " + strQuery);
                result = this.database.execute(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "insert_vendorname Exception : " + ex.Message.ToString());
            }
            return result;
        }

        public int getvendorid(string vendorname)
        {
            StringBuilder strQueryBuilder = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQueryBuilder.AppendFormat("select top 1 vendor_id from vendor_master where vendor_name='{0}'", vendorname);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat("select vendor_id from vendor_master where vendor_name='{0}' limit 1", vendorname);
                        break;
                }

                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "getvendorid Query : " + strQuery);
                result = this.database.getIntValue(strQuery);
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "getvendorid Exception : " + ex.Message.ToString());
            }
            return result;

        }
        public int insert_offline_softwaremaster(string soft_name, string prodesc, string key, int vendor, string p_date, string po_no, string licensetype, int nooflicense, string softtype, string expdate, string invoiceno, string invoiceamt)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" insert into offline_software_master(software_name,product_desc,key_number,vendor_code,purchase_date,po_no,licenses_type,no_of_licenses,expiry_date,invoice_number,invoice_amount,software_type) ");
                        strQuery.AppendFormat(" values('{0}','{1}','{2}',{3},'{4}','{5}','{6}',{7},'{8}','{9}','{10}','{11}') ", soft_name, prodesc, key, vendor, p_date, po_no, licensetype, nooflicense, expdate, invoiceno, invoiceamt, softtype);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        if (expdate == "")
                        {
                            //string strdate = "select now()";
                            expdate = this.database.getValue("select cast(date_format(now(),'%Y-%m-%d %H:%i:%s') as char) as expirydate");
                        }
                        strQuery.AppendFormat(" insert into offline_software_master(software_name,product_desc,key_number,vendor_code,purchase_date,po_no,licenses_type,no_of_licenses,expiry_date,invoice_number,invoice_amount,software_type) ");
                        strQuery.AppendFormat(" values('{0}','{1}','{2}',{3},'{4}','{5}','{6}',{7},'{8}','{9}','{10}','{11}') ", soft_name, prodesc, key, vendor, p_date, po_no, licensetype, nooflicense, expdate, invoiceno, invoiceamt, softtype);
                        break;


                }

                objcommon.WriteLog("DBQueryHandler", "insert_offline_softwaremaster Query : " + strQuery);
                result = this.database.execute(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "insert_offline_softwaremaster Exception : " + ex.Message.ToString());
            }
            return result;
        }


        public int delete_offline_softwaremaster(string soft_id)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" delete from offline_software_master where software_id={0} ", soft_id);

                        break;
                }

                objcommon.WriteLog("DBQueryHandler", "delete_offline_softwaremaster Query : " + strQuery);
                result = this.database.execute(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "delete_offline_softwaremaster Exception : " + ex.Message.ToString());
            }
            return result;
        }

        public DataTable Get_offline_software_details_softwise(string soft_id)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select distinct software_id,software_name,product_desc,key_number,licenses_type,no_of_licenses,po_no,isnull((select top 1 vendor_name from vendor_master where vendor_id=vendor_code),'')as 'vendor',convert(varchar,purchase_date,103) as purchase_date,convert(varchar,expiry_date,103) as expiry_date,invoice_number,invoice_amount,software_type from offline_software_master os, vendor_master vm where software_id={0} ", soft_id);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select distinct software_id,software_name,product_desc,key_number,licenses_type,no_of_licenses,po_no,ifnull((select vendor_name from vendor_master where vendor_id=vendor_code limit 1) ,'')as 'vendor',cast(date_format(purchase_date,'%d/%m/%Y') as char) as purchase_date, ");
                        strQuery.AppendFormat(" cast(date_format(expiry_date,'%d/%m/%Y') as char) as expiry_date,invoice_number, ");
                        strQuery.AppendFormat(" invoice_amount,software_type from offline_software_master os, vendor_master vm where software_id={0}", soft_id);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_offline_software_details_softwise Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_offline_software_details_softwise Exception : " + ex.Message.ToString());
            }
            return data_table;
        }



        public int Update_offline_softwaremaster(string softid, string softname, string prodesc, string key, int vendor, string p_date, string pono, string licensetype, string nooflicense, string softtype, string expdate, string invoicenumber, string invoiceamt)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" update offline_software_master set software_name='{0}',product_desc='{1}',key_number='{2}',vendor_code={3},purchase_date='{4}',po_no='{5}',licenses_type='{6}',no_of_licenses='{7}',expiry_date='{8}',invoice_number='{9}',invoice_amount='{10}', software_type='{11}'", softname, prodesc, key, vendor, p_date, pono, licensetype, nooflicense, expdate, invoicenumber, invoiceamt, softtype);
                        strQuery.AppendFormat(" where  software_id={0}", softid);
                        break;

                }

                objcommon.WriteLog("DBQueryHandler", "Update_offline_softwaremaster Query : " + strQuery);
                result = this.database.execute(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Update_offline_softwaremaster Exception : " + ex.Message.ToString());
            }
            return result;
        }


        #endregion

        #region User LoginLogoff Track Report

        public DataTable Get_userloginlogoffReport(string Startdate, string Enddate, string search)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select dl.ou_longname,dl.device_name,dl.ip,case np.username when 'NA' then '' when 'NULL' then '' when null then '' else np.username end as username,np.subtype,case convert(varchar,np.start_timestamp,120) when 'NULL' then '' when null then '' else convert(varchar,np.start_timestamp,105) + ' ' + convert(varchar,np.start_timestamp,108) end as starttime, ");
                        strQuery.AppendFormat("case convert(varchar,np.end_timestamp,120) when 'NULL' then '' when null then '' else convert(varchar,np.end_timestamp,105) + ' ' + convert(varchar,np.end_timestamp,108) end as endtime from device_linkage dl, node_pcoperations np where dl.device_id = np.device_id ");
                        strQuery.AppendFormat("and np.username != 'NA' {0} order by dl.device_name,starttime ", search);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select dl.ou_longname,dl.device_name,dl.ip,case np.username when 'NA' then '' when 'NULL' then '' when null then '' else np.username end as username,np.subtype,case cast(date_format(np.start_timestamp,'%d-%m-%Y %H:%i:%s') as char) when 'NULL' then '' when null then '' else cast(date_format(np.start_timestamp,'%d-%m-%Y %H:%i:%s') as char) end as starttime, ");
                        strQuery.AppendFormat("case cast(date_format(np.end_timestamp,'%d-%m-%Y %H:%i:%s') as char) when 'NULL' then '' when null then '' else cast(date_format(np.end_timestamp,'%d-%m-%Y %H:%i:%s') as char) end as endtime from device_linkage dl, node_pcoperations np where dl.device_id = np.device_id ");
                        strQuery.AppendFormat("and np.username != 'NA' {0} order by dl.device_name,starttime ", search);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_userloginlogoffReport Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_userloginlogoffReport Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        #endregion

        #region Port information Report
        public DataTable Get_portinfoReport(string Startdate, string Enddate, string search)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select distinct case convert(varchar,dateadd(s, nc.start_time,'1970-01-01 00:00:00'),120) when 'NA' then '' when 'NULL' then '' when null then '' else convert(varchar,DATEADD(minute, DATEDIFF(minute, getutcdate(), getdate()), DATEADD(s, start_time, '19700101 00:00:00')),105)  + ' ' + convert(varchar,DATEADD(minute, DATEDIFF(minute, getutcdate(), getdate()), DATEADD(s, start_time, '19700101 00:00:00')),108) end as stimestamp, case nc.end_time when '-1' then '' else case convert(varchar,dateadd(s, nc.end_time,'1970-01-01 00:00:00'),120) when '-1' then '' when 'NA' then '' when 'NULL' then '' when null then '' else convert(varchar,dateadd(s, nc.end_time,'1970-01-01 00:00:00'),105) + ' ' + convert(varchar,dateadd(s, nc.end_time,'1970-01-01 00:00:00'),108) end end as etimestamp, ");
                        strQuery.AppendFormat(" dl.device_name as systemname ,dl.ip,case nc.l2_protocol when 'NA' then '' when 'NULL' then '' when null then '' else nc.l2_protocol end as protocol, nc.local_port as localport, nc.remote_ip, nc.remote_port as remoteport, nc.status, ");
                        strQuery.AppendFormat(" dl.ou_longname,dl.ou_id from device_linkage dl inner join node_network_connection nc on dl.device_id = nc.device_id ");
                        strQuery.AppendFormat(" where dl.status<>-1 and len(nc.local_ip) <= 15 and  len(nc.remote_ip) <= 15 and nc.local_port <> '0' and nc.remote_port <> '0' {0}  ", search);
                        //remote ip and local ip where condition changes 20210726
                        //strQuery.AppendFormat(" select distinct convert(varchar,dl.datetime,105)+ ' ' + convert(varchar,dl.datetime,108) as etimestamp,dl.device_name as systemname ,dl.ip, ");
                        //strQuery.AppendFormat(" case nc.l2_protocol when 'NA' then '' when 'NULL' then '' when null then '' else nc.l2_protocol end as protocol, nc.local_port as localport, nc.remote_ip, nc.remote_port as remoteport, nc.status, ");
                        //strQuery.AppendFormat(" dl.ou_longname,dl.ou_id from device_linkage dl inner join node_network_connection nc on dl.device_id = nc.device_id ");
                        //strQuery.AppendFormat(" where dl.status<>-1 and nc.remote_ip <> '0.0.0.0' and nc.remote_ip <> '*' and nc.remote_ip <> '[::]' and nc.remote_ip <> '[::1]' and nc.local_ip <> '0.0.0.0' and nc.local_ip <> '*' and nc.local_ip <> '[::]' and nc.local_ip <> '[::1]' and nc.local_port <> '0' and nc.remote_port <> '0' {0}  ", search);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select distinct case cast(date_format(from_unixtime(nc.start_time),'%d-%m-%Y %H:%i:%s') as char) when 'NA' then '' when 'NULL' then '' when null then '' else cast(date_format(from_unixtime(nc.start_time),'%d-%m-%Y %H:%i:%s') as char) end as stimestamp, case nc.end_time when '-1' then '' else case cast(date_format(from_unixtime(nc.end_time),'%d-%m-%Y %H:%i:%s') as char) when '-1' then '' when 'NA' then '' when 'NULL' then '' when null then '' else cast(date_format(from_unixtime(nc.end_time),'%d-%m-%Y %H:%i:%s') as char) end end as etimestamp, ");
                        strQuery.AppendFormat(" dl.device_name as systemname ,dl.ip,case nc.l2_protocol when 'NA' then '' when 'NULL' then '' when null then '' else nc.l2_protocol end as protocol, nc.local_port as localport, nc.remote_ip, nc.remote_port as remoteport, nc.status, ");
                        strQuery.AppendFormat(" dl.ou_longname,dl.ou_id from device_linkage dl inner join node_network_connection nc on dl.device_id = nc.device_id ");
                        strQuery.AppendFormat(" where dl.status<>-1 and len(nc.local_ip) <= 15 and  len(nc.remote_ip) <= 15 and nc.local_port <> '0' and nc.remote_port <> '0' {0}  ", search);
                        //remote ip and local ip where condition changes 20210726
                        //strQuery.AppendFormat(" select distinct cast(date_format(dl.datetime,'%d-%m-%Y %H:%i:%s') as char) as etimestamp,dl.device_name as systemname ,dl.ip, ");
                        //strQuery.AppendFormat(" case nc.l2_protocol when 'NA' then '' when 'NULL' then '' when null then '' else nc.l2_protocol end as protocol, nc.local_port as localport, nc.remote_ip, nc.remote_port as remoteport, nc.status, ");
                        //strQuery.AppendFormat(" dl.ou_longname,dl.ou_id from device_linkage dl inner join node_network_connection nc on dl.device_id = nc.device_id ");
                        //strQuery.AppendFormat(" where dl.status<>-1 and nc.remote_ip <> '0.0.0.0' and nc.remote_ip <> '*' and nc.remote_ip <> '[::]' and nc.remote_ip <> '[::1]' and nc.local_ip <> '0.0.0.0' and nc.local_ip <> '*' and nc.local_ip <> '[::]' and nc.local_ip <> '[::1]' and nc.local_port <> '0' and nc.remote_port <> '0' {0}  ", search);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_portinfoReport Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_portinfoReport Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        public string portinfo_serching(string search, string value)
        {

            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        if (search == "T.local_port")
                            result = " convert(varchar,local_port +'/'+LocalportDetails) like '%" + value + "%'";
                        else if (search == "T.remote_port")
                            result = " convert(varchar,remote_port+'/'+remortportDetails) like '%" + value + "%'";
                        else
                            result += search + " like '%" + value + "%'";

                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        if (search == "T.local_port")
                            result = " cast(concat(local_port,concat('/',LocalportDetails)) as char) like '%" + value + "%'";
                        else if (search == "T.remote_port")
                            result = " cast(concat(remote_port,concat('/',remortportDetails)) as char) like '%" + value + "%'";
                        else
                            result += search + " like '%" + value + "%'";
                        break;

                }


            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "portinfo_serching Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public DataTable Get_port_Porcess_infoReport(string Startdate, string Enddate, string search)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select * from ( select distinct dl.device_name as systemname ,dl.ip, nc.pid, nc.process_name as process, case nc.l2_protocol when 'NA' then '' when 'NULL' then '' when null then '' else nc.l2_protocol end as protocol, nc.local_ip, nc.local_port as localport, nc.remote_ip, nc.remote_port as remoteport, ");
                        strQuery.AppendFormat(" case convert(varchar,dateadd(s, nc.start_time,'1970-01-01 00:00:00'),120) when 'NA' then '' when 'NULL' then '' when null then '' else convert(varchar,dateadd(s, nc.start_time,'1970-01-01 00:00:00'),105) + ' ' + convert(varchar,dateadd(s, nc.start_time,'1970-01-01 00:00:00'),108) end as stimestamp, case nc.end_time when '-1' then '' else case convert(varchar,dateadd(s, nc.end_time,'1970-01-01 00:00:00'),120) when '-1' then '' when 'NA' then '' when 'NULL' then '' when null then '' else convert(varchar,dateadd(s, nc.end_time,'1970-01-01 00:00:00'),105) + ' ' + convert(varchar,dateadd(s, nc.end_time,'1970-01-01 00:00:00'),108) end end as etimestamp, ");
                        strQuery.AppendFormat(" nc.status,dl.ou_longname,dl.ou_id from device_linkage dl inner join node_network_connection_history nc on dl.device_id = nc.device_id ");
                        strQuery.AppendFormat(" where dl.status<>-1 and len(nc.local_ip) <= 15 and len(nc.remote_ip) <= 15 and nc.local_port <> '0' and nc.remote_port <> '0' {0} ", search);
                        strQuery.AppendFormat(" ) T inner join e114manageip e114 on REVERSE(SUBSTRING(REVERSE(T.remote_ip), CHARINDEX('.', REVERSE(T.remote_ip)), len(T.remote_ip))) <> e114.iprange + '.' or (REVERSE(SUBSTRING(REVERSE(T.remote_ip), CHARINDEX('.', REVERSE(T.remote_ip)), len(T.remote_ip))) = e114.iprange + '.' and CAST(STR(PARSENAME(T.remote_ip, 1), 3) as int) > CAST(startip as int) and CAST(STR(PARSENAME(T.remote_ip, 1), 3) as int) > CAST(endip as int)) ");
                        //1 
                        //strQuery.AppendFormat(" select * from ( select distinct dl.device_name as systemname ,dl.ip, nc.pid, nc.process_name as process, case nc.l2_protocol when 'NA' then '' when 'NULL' then '' when null then '' else nc.l2_protocol end as protocol, nc.local_ip, nc.local_port as localport, nc.remote_ip, nc.remote_port as remoteport, ");
                        //strQuery.AppendFormat(" case convert(varchar,dateadd(s, nc.start_time,'1970-01-01 00:00:00'),120) when 'NA' then '' when 'NULL' then '' when null then '' else convert(varchar,dateadd(s, nc.start_time,'1970-01-01 00:00:00'),105) + ' ' + convert(varchar,dateadd(s, nc.start_time,'1970-01-01 00:00:00'),108) end as stimestamp, case convert(varchar,dateadd(s, nc.end_time,'1970-01-01 00:00:00'),120) when '-1' then '' when 'NA' then '' when 'NULL' then '' when null then '' else convert(varchar,dateadd(s, nc.end_time,'1970-01-01 00:00:00'),105) + ' ' + convert(varchar,dateadd(s, nc.end_time,'1970-01-01 00:00:00'),108) end as etimestamp, ");
                        //strQuery.AppendFormat(" nc.status,dl.ou_longname,dl.ou_id from device_linkage dl inner join node_network_connection_history nc on dl.device_id = nc.device_id ");
                        //strQuery.AppendFormat(" where dl.status<>-1 and nc.remote_ip <> '0.0.0.0' and nc.remote_ip <> '*' and nc.remote_ip <> '[::]' and nc.remote_ip <> '[::1]' and nc.local_ip <> '0.0.0.0' and nc.local_ip <> '*' and nc.local_ip <> '[::]' and nc.local_ip <> '[::1]' and nc.local_port <> '0' and nc.remote_port <> '0' {0} ", search);
                        //strQuery.AppendFormat(" ) T inner join e114manageip e114 on REVERSE(SUBSTRING(REVERSE(T.remote_ip), CHARINDEX('.', REVERSE(T.remote_ip)), len(T.remote_ip))) <> e114.iprange + '.' or (REVERSE(SUBSTRING(REVERSE(T.remote_ip), CHARINDEX('.', REVERSE(T.remote_ip)), len(T.remote_ip))) = e114.iprange + '.' and CAST(STR(PARSENAME(T.remote_ip, 1), 3) as int) > CAST(startip as int) and CAST(STR(PARSENAME(T.remote_ip, 1), 3) as int) > CAST(endip as int)) ");
                        //2
                        //strQuery.AppendFormat(" select systemname,ip,pid,process,protocol,local_ip,isnull(convert(varchar,local_port +'/'+LocalportDetails),0) as 'localport',remote_ip,isnull(convert(varchar,remote_port+'/'+remortportDetails),0) as 'remoteport',stimestamp,etimestamp,status,ou_longname,ou_node_name,ou_id from (   ");
                        //strQuery.AppendFormat(" select distinct isnull(dl.device_name,dl.device_name) as systemname ,dl.ip,pid,process,protocol,local_ip ,convert(varchar,local_port) as local_port ,convert(varchar,(select distinct top 1 port_discription from portdesc P where  P.port=Local_Port and P.Port_Protocol=Protocol)) as 'LocalportDetails',remote_ip ,  convert(varchar,remote_port) as remote_port  ");
                        //strQuery.AppendFormat(" ,convert(varchar,(select distinct top 1 port_discription from PortDesc P where  P.port=Remote_Port and P.Port_Protocol=Protocol )) as 'remortportDetails',np.status as 'Status',convert(varchar,DATEADD(mi,DATEDIFF(mi, GetUtcDate(), GetDate()),DATEADD(ss,np.sockstarttime/1000,'1970-01-01 00:00:00')),104) + ' ' + convert(varchar,DATEADD(mi,DATEDIFF(mi, GetUtcDate(), GetDate()),DATEADD(ss,np.sockstarttime/1000,'1970-01-01 00:00:00')),108) as stimestamp, ");
                        //strQuery.AppendFormat("  convert(varchar,DATEADD(mi,DATEDIFF(mi, GetUtcDate(), GetDate()),DATEADD(ss,np.sockendtime/1000,'1970-01-01 00:00:00')),104) + ' ' + convert(varchar,DATEADD(mi,DATEDIFF(mi, GetUtcDate(), GetDate()),DATEADD(ss,np.sockendtime/1000,'1970-01-01 00:00:00')),108)  as etimestamp ,dl.ou_longname,dl.ou_node_name,dl.ou_id  From device_linkage dl inner join port_info_table np on dl.device_id=np.device_id ");
                        //strQuery.AppendFormat(" where   remote_ip <> '0.0.0.0'   and dl.status<>-1 and np.sockendtime   between cast(DATEDIFF(s, '1970-01-01 00:00:00.000', '{0}' ) as bigint) *1000  and cast(DATEDIFF(s, '1970-01-01 00:00:00.000', '{1}' ) as bigint) *1000 )T where {2}  ", Startdate, Enddate, search);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select * from ( select distinct dl.device_name as systemname ,dl.ip, nc.pid, nc.process_name as process, case nc.l2_protocol when 'NA' then '' when 'NULL' then '' when null then '' else nc.l2_protocol end as protocol, nc.local_ip, nc.local_port as localport, nc.remote_ip, nc.remote_port as remoteport, ");
                        strQuery.AppendFormat(" case cast(date_format(from_unixtime(nc.start_time),'%d-%m-%Y %H:%i:%s') as char) when 'NA' then '' when 'NULL' then '' when null then '' else cast(date_format(from_unixtime(nc.start_time),'%d-%m-%Y %H:%i:%s') as char) end as stimestamp, case nc.end_time when '-1' then '' else case cast(date_format(from_unixtime(nc.end_time),'%d-%m-%Y %H:%i:%s') as char) when '-1' then '' when 'NA' then '' when 'NULL' then '' when null then '' else cast(date_format(from_unixtime(nc.end_time),'%d-%m-%Y %H:%i:%s') as char) end end as etimestamp, ");
                        strQuery.AppendFormat(" nc.status,dl.ou_longname,dl.ou_id from device_linkage dl inner join node_network_connection_history nc on dl.device_id = nc.device_id ");
                        strQuery.AppendFormat(" where dl.status<>-1 and len(nc.local_ip) <= 15 and len(nc.remote_ip) <= 15 and nc.local_port <> '0' and nc.remote_port <> '0' {0} ", search);
                        strQuery.AppendFormat(" ) T inner join e114manageip e114 on REVERSE(SUBSTRING(REVERSE(T.remote_ip), CHARINDEX('.', REVERSE(T.remote_ip)), len(T.remote_ip))) <> e114.iprange + '.' or (REVERSE(SUBSTRING(REVERSE(T.remote_ip), CHARINDEX('.', REVERSE(T.remote_ip)), len(T.remote_ip))) = e114.iprange + '.' and CAST(STR(PARSENAME(T.remote_ip, 1), 3) as int) > CAST(startip as int) and CAST(STR(PARSENAME(T.remote_ip, 1), 3) as int) > CAST(endip as int)) ");
                        //1
                        //strQuery.AppendFormat(" select * from ( select distinct dl.device_name as systemname ,dl.ip, nc.pid, nc.process_name as process, case nc.l2_protocol when 'NA' then '' when 'NULL' then '' when null then '' else nc.l2_protocol end as protocol, nc.local_ip, nc.local_port as localport, nc.remote_ip, nc.remote_port as remoteport, ");
                        //strQuery.AppendFormat(" case cast(date_format(from_unixtime(nc.start_time),'%d-%m-%Y %H:%i:%s') as char) when 'NA' then '' when 'NULL' then '' when null then '' else cast(date_format(from_unixtime(nc.start_time),'%d-%m-%Y %H:%i:%s') as char) end as stimestamp, case cast(date_format(from_unixtime(nc.end_time),'%d-%m-%Y %H:%i:%s') as char) when '-1' then '' when 'NA' then '' when 'NULL' then '' when null then '' else cast(date_format(from_unixtime(nc.end_time),'%d-%m-%Y %H:%i:%s') as char) end as etimestamp, ");
                        //strQuery.AppendFormat(" nc.status,dl.ou_longname,dl.ou_id from device_linkage dl inner join node_network_connection_history nc on dl.device_id = nc.device_id ");
                        //strQuery.AppendFormat(" where dl.status<>-1 and nc.remote_ip <> '0.0.0.0' and nc.remote_ip <> '*' and nc.remote_ip <> '[::]' and nc.remote_ip <> '[::1]' and nc.local_ip <> '0.0.0.0' and nc.local_ip <> '*' and nc.local_ip <> '[::]' and nc.local_ip <> '[::1]' and nc.local_port <> '0' and nc.remote_port <> '0' {0} ", search);
                        //strQuery.AppendFormat(" ) T inner join e114manageip e114 on REVERSE(SUBSTRING(REVERSE(T.remote_ip), CHARINDEX('.', REVERSE(T.remote_ip)), len(T.remote_ip))) <> e114.iprange + '.' or (REVERSE(SUBSTRING(REVERSE(T.remote_ip), CHARINDEX('.', REVERSE(T.remote_ip)), len(T.remote_ip))) = e114.iprange + '.' and CAST(STR(PARSENAME(T.remote_ip, 1), 3) as int) > CAST(startip as int) and CAST(STR(PARSENAME(T.remote_ip, 1), 3) as int) > CAST(endip as int)) ");
                        //2
                        //strQuery.AppendFormat(" select systemname,ip,pid,process,protocol,local_ip,ifnull(cast(concat(local_port,concat('/',LocalportDetails)) as char),0) as 'localport',remote_ip,ifnull(cast(concat(remote_port,concat('/',remortportDetails)) as char),0) as 'remoteport',stimestamp,etimestamp,status,ou_longname,ou_node_name,ou_id from (    ");
                        //strQuery.AppendFormat(" select distinct ifnull(dl.device_name,dl.device_name) as systemname ,dl.ip,pid,process,protocol,local_ip ,cast(local_port as char) as local_port ,cast((select distinct  port_discription from PortDesc P where  P.port=Local_Port and P.Port_Protocol=Protocol limit 1) as char)as 'LocalportDetails',remote_ip ,  cast(remote_port as char) as remote_port   , ");
                        //strQuery.AppendFormat(" cast((select distinct  port_discription from PortDesc P where  P.port=Remote_Port and P.Port_Protocol=Protocol limit 1) as char) as 'remortportDetails',np.status as 'Status',cast(concat(date_format(DATE_ADD(DATE_ADD('1970-01-01 00:00:00',interval cast(np.sockstarttime as unsigned)/1000 second),interval timestampdiff(minute, UTC_TIMESTAMP(), now()) minute),'%Y-%m-%d'), ");
                        //strQuery.AppendFormat(" date_format(DATE_ADD(DATE_ADD('1970-01-01 00:00:00',interval cast(np.sockstarttime as unsigned)/1000 second), interval timestampdiff(minute, UTC_TIMESTAMP(), now()) minute),' %H:%i:%s')) as char) as stimestamp,cast(concat(date_format(DATE_ADD(DATE_ADD('1970-01-01 00:00:00',interval cast(np.sockendtime as unsigned)/1000 second),interval timestampdiff(minute, UTC_TIMESTAMP(), now()) minute),'%Y-%m-%d'), ");
                        //strQuery.AppendFormat(" date_format(DATE_ADD(DATE_ADD('1970-01-01 00:00:00',interval cast(np.sockendtime as unsigned)/1000 second), interval timestampdiff(minute, UTC_TIMESTAMP(), now()) minute),' %H:%i:%s')) as char)   as etimestamp ,  ");
                        //strQuery.AppendFormat(" dl.ou_longname,dl.ou_node_name,dl.ou_id  From device_linkage dl inner join port_info_table np on dl.device_id=np.device_id  where    remote_ip <> '0.0.0.0'   and dl.status<>-1   and date_add(date_add('1970-01-01 00:00:00',interval cast(np.sockendtime  as unsigned)/1000 second), interval timestampdiff(minute, utc_timestamp(), now()) minute)  between '{0}' and '{1}' )T where {2} ", Startdate, Enddate, search);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_port_Porcess_infoReport Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_port_Porcess_infoReport Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        #endregion

        #region ServiceDetail Report
        public DataTable Get_ServiceDetailReport(string search)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select distinct dl.device_name,dl.ip,service_name,display_name,case startname when '0' then '' else startname end as startname,state,startmode,");
                        strQuery.AppendFormat(" ou_longname from node_service_info nis,device_master dm,device_linkage dl ");
                        strQuery.AppendFormat(" where nis.device_id=dm.device_id and dm.device_id=dl.device_id ");
                        strQuery.AppendFormat(" and dl.status<>-1 {0} order by dl.device_name asc ", search);
                        break;

                }
                objcommon.WriteLog("DBQueryHandler", "Get_ServiceDetailReport Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_ServiceDetailReport Exception : " + ex.Message.ToString());
            }
            return data_table;
        }


        public DataTable Get_Servicename()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select distinct service_name from node_service_info");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Servicename Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Servicename Exception : " + ex.Message.ToString());
            }
            return data_table;

        }


        public int Get_Service_count(string servicename)
        {
            int result = 0;
            try
            {
                StringBuilder strQueryBuilder = new StringBuilder();

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" select count(*) from  serviceauthorize  where servicename='{0}' ", servicename);
                        break;
                }

                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "Get_Service_count Query : " + strQuery);
                result = this.database.getIntValue(strQuery);

                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Service_count Exception : " + ex.Message.ToString());
            }
            return result;
        }

        public int insert_underwatchservice(string servicename)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" insert into serviceauthorize(servicename) values ('{0}')", servicename);
                        break;
                }

                objcommon.WriteLog("DBQueryHandler", "insert_underwatchservice Query : " + strQuery);
                result = this.database.execute(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "insert_underwatchservice Exception : " + ex.Message.ToString());
            }
            return result;
        }


        public DataTable Get_UnderwatchServicename()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select distinct servicename from serviceauthorize");
                        break;

                }
                objcommon.WriteLog("DBQueryHandler", "Get_UnderwatchServicename Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_UnderwatchServicename Exception : " + ex.Message.ToString());
            }
            return data_table;

        }


        public int delete_underwatch_servicedata(string servicename)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" delete from serviceauthorize where servicename='{0}' ", servicename);

                        break;
                }

                objcommon.WriteLog("DBQueryHandler", "delete_underwatch_servicedata Query : " + strQuery);
                result = this.database.execute(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "delete_underwatch_servicedata Exception : " + ex.Message.ToString());
            }
            return result;
        }

        public DataTable Get_underwatchServiceDetailReport(string search)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select distinct dl.device_name,dl.ip,service_name,display_name,case startname when '0' then '' else startname end as startname,state,startmode,");
                        strQuery.AppendFormat(" ou_longname from node_service_info nis,device_master dm,device_linkage dl,serviceauthorize sa");
                        strQuery.AppendFormat(" where sa.servicename=nis.service_name and nis.device_id=dm.device_id and dm.device_id=dl.device_id ");
                        strQuery.AppendFormat(" and dl.status<>-1 {0} order by dl.device_name asc ", search);
                        break;


                }
                objcommon.WriteLog("DBQueryHandler", "Get_underwatchServiceDetailReport Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_underwatchServiceDetailReport Exception : " + ex.Message.ToString());
            }
            return data_table;
        }


        #endregion

        #region Product key information report
        public DataTable Get_product_key_data(string search)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        //strQuery.AppendFormat(" select dk.product,count(*) as cnt from device_linkage dl inner join device_product_key dk on dl.device_id=dk.device_id where dk.device_id<>0   ");
                        //strQuery.AppendFormat(" and dl.status<>-1 {0} group by dk.product order by 2 desc  ", search);
                        strQuery.AppendFormat(" select dk.data1,count(*) as cnt from device_linkage dl inner join node_system_info dk on dl.device_id=dk.device_id where dk.device_id<>0   ");
                        strQuery.AppendFormat(" and dl.status<>-1 and data_type=9 and data_subtype=1 {0} group by dk.data1 order by 2 desc  ", search);
                        break;


                }
                objcommon.WriteLog("DBQueryHandler", "Get_product_key_data Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_product_key_data Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_product_key_cnt_data(string search)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        //strQuery.AppendFormat(" select dl.ou_longname,dl.device_name,dl.ip,dk.cd_key,dk.product_id from device_linkage dl inner join device_product_key dk on dl.device_id=dk.device_id  ");
                        //strQuery.AppendFormat(" where dk.device_id<>0 and dl.status<>-1 {0}  ", search);
                        strQuery.AppendFormat(" select T.device_id,T.device_name,T.ou_id,T.ou_longname,T.ip,T.data1,ns.data1 as productkey from ( select dl.device_id,dl.device_name,dl.ou_longname,dl.ou_id,dl.ip,dk.data1 from device_linkage dl,node_system_info dk  where dl.device_id=dk.device_id  ");
                        strQuery.AppendFormat(" and dk.device_id<>0 and dl.status<>-1 and  data_type=9 and data_subtype=1 )T left outer join node_system_info ns on T.device_id=ns.device_id and ns.data_type=9 and ns.data_subtype=3 {0}  ", search);
                        break;


                }
                objcommon.WriteLog("DBQueryHandler", "Get_product_key_cnt_data Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_product_key_cnt_data Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_product_key_generate_data(string search, string generatetype)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                //switch (dbtype)
                //{
                //    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                //    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                //        1
                //        strQuery.AppendFormat(" select dl.ou_longname,dl.device_name,dl.ip,dk.product,dk.cd_key,dk.product_id from device_linkage dl inner join device_product_key dk on dl.device_id=dk.device_id   ");
                //        strQuery.AppendFormat(" where dk.device_id<>0 and dl.status<>-1 {0}  ", search);
                //        2
                //        strQuery.AppendFormat(" select T.device_id,T.device_name,T.ip,T.ou_longname,T.ou_id,T.data1,ns.data1 as productkey from ( select dl.device_id,dl.device_name,dl.ou_longname,dl.ou_id,dl.ip,dk.data1 from device_linkage dl,node_system_info dk  where dl.device_id=dk.device_id and dk.device_id<>0 and dl.status<>-1 and  data_type=9 and data_subtype=1    ");
                //        strQuery.AppendFormat(" )T left outer join node_system_info ns on T.device_id=ns.device_id and ns.data_type=9 and ns.data_subtype=3 {0}  ", search);
                //        break;
                //}
                if (generatetype == "Product")
                {
                    switch (dbtype)
                    {
                        case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                            strQuery.AppendFormat(" select T.device_id,T.device_name,T.ou_id,T.ou_longname,T.ip,T.data1,ns.data1 as productkey from ( select dl.device_id,dl.device_name,dl.ou_longname,dl.ou_id,dl.ip,dk.data1 from device_linkage dl,node_system_info dk  where dl.device_id=dk.device_id  ");
                            strQuery.AppendFormat(" and dk.device_id<>0 and dl.status<>-1 and  data_type=9 and data_subtype=1 )T left outer join node_system_info ns on T.device_id=ns.device_id and ns.data_type=9 and ns.data_subtype=3 {0}  ", search);
                            break;
                    }
                }
                else if (generatetype == "System")
                {
                    switch (dbtype)
                    {
                        case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                            strQuery.AppendFormat(" select T.device_id,T.device_name,T.ou_id,T.ou_longname,T.ip,T.data1,ns.data1 as productkey from ( select dl.device_id,dl.device_name,dl.ou_longname,dl.ou_id,dl.ip,dk.data1 from device_linkage dl,node_system_info dk  where dl.device_id=dk.device_id  ");
                            strQuery.AppendFormat(" and dk.device_id<>0 and dl.status<>-1 and  data_type=9 and data_subtype=2 )T left outer join node_system_info ns on T.device_id=ns.device_id and ns.data_type=9 and ns.data_subtype=3 {0}  ", search);
                            //strQuery.AppendFormat(" select distinct T.ou_longname, T.device_name, T.ip, (select data1 from node_system_info where data_type = 9 and data_subtype = 1 {0}) as data1, ", search);
                            //strQuery.AppendFormat(" (select data1 from node_system_info where data_type = 9 and data_subtype = 3 {0}) as productkey ", search);
                            //strQuery.AppendFormat(" from device_linkage T where T.device_id <> 0 and T.status <> -1 {0} ", search);
                            break;
                    }
                }
                else
                {
                    switch (dbtype)
                    {
                        case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                            strQuery.AppendFormat(" select T.device_id,T.device_name,T.ou_id,T.ou_longname,T.ip,T.data1,ns.data1 as productkey from ( select dl.device_id,dl.device_name,dl.ou_longname,dl.ou_id,dl.ip,dk.data1 from device_linkage dl,node_system_info dk  where dl.device_id=dk.device_id  ");
                            strQuery.AppendFormat(" and dk.device_id<>0 and dl.status<>-1 and  data_type=9 and data_subtype=1 )T left outer join node_system_info ns on T.device_id=ns.device_id and ns.data_type=9 and ns.data_subtype=3 {0}  ", search);
                            break;
                    }
                }
                objcommon.WriteLog("DBQueryHandler", "Get_product_key_generate_data Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_product_key_generate_data Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        public DataTable Get_product_key_system_wise(string search)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        //1
                        //strQuery.AppendFormat(" select dl.device_id,dl.device_name,dl.ip,dl.ou_longname,count(*) as cnt from device_linkage dl inner join device_product_key dk on dl.device_id=dk.device_id ");
                        //strQuery.AppendFormat(" where dk.device_id<>0 and dl.status<>-1  {0}  group by  dl.device_id,dl.device_name,dl.ip,dl.ou_longname  order by dl.device_name asc  ", search);
                        //2
                        //strQuery.AppendFormat(" select dl.device_id,dl.device_name,dl.ip,dl.ou_longname,count(*) as cnt from device_linkage dl inner join node_system_info dk on dl.device_id = dk.device_id ");
                        //strQuery.AppendFormat(" where dk.device_id <> 0 and dl.status <> -1 and data_type = 9 and data_subtype = 3 {0} group by  dl.device_id,dl.device_name,dl.ip,dl.ou_longname order by dl.device_name asc", search);

                        strQuery.AppendFormat(" select dl.device_id,dl.device_name,dl.ip,count(*) as cnt from device_linkage dl inner join node_system_info dk on dl.device_id = dk.device_id ");
                        strQuery.AppendFormat(" where dk.device_id <> 0 and dl.status <> -1 and data_type = 9 and data_subtype = 3 {0} group by  dl.device_id,dl.device_name,dl.ip order by dl.device_name asc", search);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_product_key_system_wise Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_product_key_system_wise Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        public string getouid_device(string deviceid)
        {
            string ouid = "";
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select ou_longname from device_linkage where device_id = {0}", deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "getouid_device Query : " + strQuery.ToString());
                ouid = this.database.getValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "getouid_device Exception : " + ex.Message.ToString());
            }
            return ouid;
        }

        public DataTable Get_product_system_deatils(string deviceid, string search)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        //strQuery.AppendFormat(" select dl.ou_longname,dk.product,dk.cd_key,dk.product_id from device_linkage dl inner join device_product_key dk on dl.device_id=dk.device_id   ");
                        //strQuery.AppendFormat("  where dk.device_id<>0 and dl.status<>-1 and dl.device_id={0} {1} ", deviceid, search);

                        strQuery.AppendFormat("select distinct dl.ou_longname, (select data1 from node_system_info where data_type = 9 and data_subtype = 1 and device_id = {0}) as product, ", deviceid);
                        strQuery.AppendFormat("(select data1 from node_system_info where data_type = 9 and data_subtype = 2 and device_id = {0}) as product_id, ", deviceid);
                        strQuery.AppendFormat("(select data1 from node_system_info where data_type = 9 and data_subtype = 3 and device_id = {0}) as cd_key ", deviceid);
                        strQuery.AppendFormat("from device_linkage dl inner join node_system_info dk on dl.device_id = dk.device_id where dk.device_id <> 0 and dl.status <> -1 and dl.device_id = {0} {1}", deviceid, search);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_product_system_deatils Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_product_system_deatils Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_product_key_count(string search)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        //strQuery.AppendFormat(" select  dk.cd_key,count(*) as cnt from device_linkage dl inner join device_product_key dk on dl.device_id=dk.device_id  ");
                        //strQuery.AppendFormat(" where dk.device_id<>0 and dl.status<>-1  {0}  group by dk.cd_key order by 2 desc ", search);
                        strQuery.AppendFormat(" select  dk.data1,count(*) as cnt from device_linkage dl inner join node_system_info dk on dl.device_id=dk.device_id  ");
                        strQuery.AppendFormat(" where dk.device_id<>0 and dl.status<>-1  and dk.data_type=9 and dk.data_subtype=3 {0}  group by dk.data1 order by 2 desc ", search);
                        break;


                }
                objcommon.WriteLog("DBQueryHandler", "Get_product_key_count Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_product_key_count Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_product_key_count_data(string key, string search)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("  select distinct dk.product,dk.cd_key,dk.product_id from device_linkage dl inner join device_product_key dk on dl.device_id=dk.device_id   ");
                        strQuery.AppendFormat(" where dk.device_id<>0 and dl.status<>-1 and dk.cd_key='{0}' {1} ", key, search);
                        break;


                }
                objcommon.WriteLog("DBQueryHandler", "Get_product_key_count_data Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_product_key_count_data Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_product_key_count_data_details(string key, string search)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("  select distinct dl.ou_longname,dl.device_name,dl.ip from device_linkage dl inner join device_product_key dk on dl.device_id=dk.device_id    ");
                        strQuery.AppendFormat(" where dk.device_id<>0 and dl.status<>-1  and dk.cd_key='{0}' {1} ", key, search);
                        break;


                }
                objcommon.WriteLog("DBQueryHandler", "Get_product_key_count_data_details Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_product_key_count_data_details Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        #endregion

        #region Software information report


        public int Get_DeviceCount(string ouid)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select count(*) from device_master dm, device_linkage dl  where dm.device_id = dl.device_id ");
                        strQuery.AppendFormat(" and dl.status<>-1 and  dl.ou_id in ({0})", ouid);

                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_DeviceCount Query : " + strQuery.ToString());
                result = this.database.getIntValue(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_DeviceCount Exception : " + ex.Message.ToString());
            }
            return result;
        }


        public DataTable Get_softinsatlledcount(int devicecount, string search)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        //strQuery.AppendFormat(" select software,count(distinct dm.device_id) as installed,{0}-count(distinct dm.device_id) as uninstalled ", devicecount);
                        //strQuery.AppendFormat(" from nodesoftwaredetails nsi  inner join  device_master dm on nsi.deviceid=dm.device_id inner join  device_linkage dl ");
                        //strQuery.AppendFormat(" on dm.device_id = dl.device_id  and dl.status <> -1 and software <> '0' {0} group by software ", search);
                        strQuery.AppendFormat(" select software,count(distinct dm.device_id) as installed,{0}-count(distinct dm.device_id) as uninstalled ", devicecount);
                        strQuery.AppendFormat(" from nodesoftwaredetails nsi  inner join  device_master dm on nsi.deviceid=dm.device_id inner join  device_linkage dl ");
                        strQuery.AppendFormat(" on dm.device_id = dl.device_id  and dl.status <> -1 and software <> '0' and software not like '%?%' {0} group by software ", search);
                        break;

                }
                objcommon.WriteLog("DBQueryHandler", "Get_softinsatlledcount Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_softinsatlledcount Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        public DataTable Get_softinsatlledcountsyswise(string search)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        //strQuery.AppendFormat(" select distinct dl.device_id, dl.device_name,dl.ip,count(distinct software) as installed,ou_longname from nodesoftwaredetails nsi,device_master dm, device_linkage dl ");
                        //strQuery.AppendFormat(" where dm.device_id = dl.device_id and dl.status <> -1 and  dm.device_id = nsi.deviceid and software<>'0'  {0} ", search);
                        //strQuery.AppendFormat("  group by dl.device_id,dl.device_name,dl.ip,ou_longname order by dl.device_id,dl.device_name,dl.ip,ou_longname");
                        strQuery.AppendFormat(" select distinct dl.device_id, dl.device_name,dl.ip,count(distinct software) as installed,ou_longname from nodesoftwaredetails nsi,device_master dm, device_linkage dl ");
                        strQuery.AppendFormat(" where dm.device_id = dl.device_id and dl.status <> -1 and  dm.device_id = nsi.deviceid and software<>'0' and software not like '%?%'  {0} ", search);
                        strQuery.AppendFormat("  group by dl.device_id,dl.device_name,dl.ip,ou_longname order by dl.device_id,dl.device_name,dl.ip,ou_longname");
                        break;

                }
                objcommon.WriteLog("DBQueryHandler", "Get_softinsatlledcountsyswise Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_softinsatlledcountsyswise Exception : " + ex.Message.ToString());
            }
            return data_table;
        }


        public DataTable Get_softinsatlleddetails(string search)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        //strQuery.AppendFormat(" select distinct software,dl.device_name,dl.ip,ou_longname from device_master dm, device_linkage dl,nodesoftwaredetails nsi ");
                        //strQuery.AppendFormat(" where dm.device_id = dl.device_id and dl.status <> -1 and  dm.device_id = nsi.deviceid   {0} ", search);
                        //strQuery.AppendFormat("  order by software,dl.device_name,dl.ip,ou_longname");
                        strQuery.AppendFormat(" select distinct software,dl.device_name,dl.ip,ou_longname from device_master dm, device_linkage dl,nodesoftwaredetails nsi ");
                        strQuery.AppendFormat(" where dm.device_id = dl.device_id and dl.status <> -1 and  dm.device_id = nsi.deviceid and nsi.software not like '%?%'  {0} ", search);
                        strQuery.AppendFormat("  order by software,dl.device_name,dl.ip,ou_longname");
                        break;

                }
                objcommon.WriteLog("DBQueryHandler", "Get_softinsatlleddetails Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_softinsatlleddetails Exception : " + ex.Message.ToString());
            }
            return data_table;
        }



        public DataTable Get_softuninstalleddetails(string software)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("  exec getuninstallsoftwaredetails '" + software + "'  ");

                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" call getuninstallsoftwaredetails('" + software + "')");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_softuninstalleddetails Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_softuninstalleddetails Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        public DataTable Get_softinsatlleddetailsyswise(string search, string searchdate)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        //strQuery.AppendFormat("select software,deviceid,device_name,ou_id ,ou_longname,ip ,version,publisher, ");
                        //strQuery.AppendFormat(" installationdate,location from  ( ");
                        //strQuery.AppendFormat(" select distinct ltrim(rtrim(software)) as Software,nsi.deviceid,dl.device_name,dl.ou_id ,dl.ip,ou_longname, ");
                        //strQuery.AppendFormat(" version,publisher,");
                        //strQuery.AppendFormat(" case nsi.date when 'NA' then '' when 'NULL' then '' when '0' then '' when null then '' else convert(varchar,convert(date,nsi.date,120),105) end as installationdate,case location when 'NULL' then '' when '0' then '' when null then '' else location end as location ");
                        //strQuery.AppendFormat(" from nodesoftwaredetails nsi, device_master dm ,device_linkage dl where nsi.deviceid = dm.device_id ");
                        //strQuery.AppendFormat(" and dm.device_id=dl.device_id and dl.status<>-1 {0}", search);
                        //strQuery.AppendFormat(" and software != '0') t {0}  order by software ", searchdate);
                        strQuery.AppendFormat("select software,deviceid,device_name,ou_id ,ou_longname,ip ,version,publisher, ");
                        strQuery.AppendFormat(" installationdate,location from  ( ");
                        strQuery.AppendFormat(" select distinct ltrim(rtrim(software)) as Software,nsi.deviceid,dl.device_name,dl.ou_id ,dl.ip,ou_longname, ");
                        strQuery.AppendFormat(" version,publisher,");
                        strQuery.AppendFormat(" case nsi.date when 'NA' then '' when 'NULL' then '' when '0' then '' when null then '' else convert(varchar,convert(date,nsi.date,120),105) end as installationdate,case location when 'NULL' then '' when '0' then '' when null then '' else location end as location ");
                        strQuery.AppendFormat(" from nodesoftwaredetails nsi, device_master dm ,device_linkage dl where nsi.deviceid = dm.device_id ");
                        strQuery.AppendFormat(" and dm.device_id=dl.device_id and dl.status<>-1 {0}", search);
                        strQuery.AppendFormat(" and software != '0' and software not like  '%?%') t {0}  order by software ", searchdate);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select software,deviceid,device_name,ou_id ,ou_longname,ip ,version,publisher, ");
                        strQuery.AppendFormat(" installationdate,location from  ( ");
                        strQuery.AppendFormat(" select distinct ltrim(rtrim(software)) as Software,nsi.deviceid,dl.device_name,dl.ou_id ,dl.ip,ou_longname, ");
                        strQuery.AppendFormat(" version,publisher,");
                        strQuery.AppendFormat(" case cast(date_format(date,'%d-%m-%Y') as char) when 'NA' then '' when 'NULL' then '' when '0' then '' when null then '' else cast(date_format(date,'%d-%m-%Y') as char) end as installationdate,case location when 'NULL' then '' when '0' then '' when null then '' else location end as location ");
                        strQuery.AppendFormat(" from nodesoftwaredetails nsi, device_master dm ,device_linkage dl where nsi.deviceid = dm.device_id ");
                        strQuery.AppendFormat(" and dm.device_id=dl.device_id and dl.status<>-1 {0}", search);
                        strQuery.AppendFormat(" and software != '0') t {0}  order by software ", searchdate);
                        break;

                }
                objcommon.WriteLog("DBQueryHandler", "Get_softinsatlleddetailsyswise Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_softinsatlleddetailsyswise Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        public DataTable Get_generatesoftinsatlled(string search, string searchdate)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        //strQuery.AppendFormat("select software,deviceid,device_name,ou_id ,ou_longname,ip ,version,publisher, ");
                        //strQuery.AppendFormat(" installationdate,location from  ( ");
                        //strQuery.AppendFormat(" select distinct ltrim(rtrim(software)) as Software,nsi.deviceid,dl.device_name,dl.ou_id ,dl.ou_longname,dl.ip, ");
                        //strQuery.AppendFormat(" version,publisher,");
                        //strQuery.AppendFormat(" case nsi.date when 'NA' then '' when 'NULL' then '' when null then '' when '0' then '' else convert(varchar,convert(date,nsi.date,120),105) end as installationdate,case location when 'NULL' then '' when null then '' when '0' then '' else location end as location ");
                        //strQuery.AppendFormat(" from nodesoftwaredetails nsi, device_master dm ,device_linkage dl where nsi.deviceid = dm.device_id ");
                        //strQuery.AppendFormat(" and dm.device_id=dl.device_id and dl.status<>-1 {0}", search);
                        //strQuery.AppendFormat(" ) t {0} order by software ", searchdate);
                        strQuery.AppendFormat("select software,deviceid,device_name,ou_id ,ou_longname,ip ,version,publisher, ");
                        strQuery.AppendFormat(" installationdate,location from  ( ");
                        strQuery.AppendFormat(" select distinct ltrim(rtrim(software)) as Software,nsi.deviceid,dl.device_name,dl.ou_id ,dl.ou_longname,dl.ip, ");
                        strQuery.AppendFormat(" version,publisher,");
                        strQuery.AppendFormat(" case nsi.date when 'NA' then '' when 'NULL' then '' when null then '' when '0' then '' else convert(varchar,convert(date,nsi.date,120),105) end as installationdate,case location when 'NULL' then '' when null then '' when '0' then '' else location end as location ");
                        strQuery.AppendFormat(" from nodesoftwaredetails nsi, device_master dm ,device_linkage dl where nsi.deviceid = dm.device_id ");
                        strQuery.AppendFormat(" and dm.device_id=dl.device_id and dl.status<>-1 and nsi.software not like '%?%' {0}", search);
                        strQuery.AppendFormat(" ) t {0} order by software ", searchdate);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select software,deviceid,device_name,ou_id ,ou_longname,ip ,version,publisher, ");
                        strQuery.AppendFormat(" installationdate,location from  ( ");
                        strQuery.AppendFormat(" select distinct ltrim(rtrim(software)) as Software,nsi.deviceid,dl.device_name,dl.ou_id ,dl.ou_longname,dl.ip, ");
                        strQuery.AppendFormat(" version,publisher,");
                        strQuery.AppendFormat(" case cast(date_format(date,'%d-%m-%Y') as char) when 'NA' then '' when 'NULL' then '' when null then '' when '0' then '' else cast(date_format(date,'%d-%m-%Y') as char) end as installationdate,case location when 'NULL' then '' when null then '' when '0' then '' else location end as location ");
                        strQuery.AppendFormat(" from nodesoftwaredetails nsi, device_master dm ,device_linkage dl where nsi.deviceid = dm.device_id ");
                        strQuery.AppendFormat(" and dm.device_id=dl.device_id and dl.status<>-1 {0}", search);
                        strQuery.AppendFormat(" ) t {0} order by software ", searchdate);
                        break;

                }
                objcommon.WriteLog("DBQueryHandler", "Get_generatesoftinsatlled Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_generatesoftinsatlled Exception : " + ex.Message.ToString());
            }
            return data_table;
        }


        #endregion


        #region Non Compliance system list report
        public DataTable Get_DCMdata(string searchdate)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select distinct dl.ou_longname,dl.device_name,dl.ip,case ds.device_type when 0 then 'Managed' else 'Unmanaged' end as device_type, ");
                        strQuery.AppendFormat(" case when len(device_reason)>0 then substring(replace (device_reason,'||', ' OR '),1,len(replace (device_reason,'||', ' OR ')) - 3) else '' end As reason ");
                        strQuery.AppendFormat(" from device_linkage dl inner join device_swcompliance_log ds on dl.device_id=ds.device_id where  dl.status<>-1 ");
                        strQuery.AppendFormat(" {0} order by dl.device_name ", searchdate);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select distinct dl.ou_longname,dl.device_name,dl.ip,case ds.device_type when 0 then 'Managed' else 'Unmanaged' end as device_type, ");
                        strQuery.AppendFormat(" case when length(device_reason)>0 then substring(replace (device_reason,'||', ' OR '),1,length(replace (device_reason,'||', ' OR ')) - 3) else '' end As reason ");
                        strQuery.AppendFormat(" from device_linkage dl inner join device_swcompliance_log ds on dl.device_id=ds.device_id where  dl.status<>-1  ");
                        strQuery.AppendFormat(" {0} order by dl.device_name ", searchdate);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_DCMdata Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_DCMdata Exception : " + ex.Message.ToString());
            }
            return data_table;
        }


        #endregion
        #region user password change detail

        public DataTable Get_passwordchangedetail(string search)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        //strQuery.AppendFormat(" select distinct device_name,ou_longname,ip,e107username, ");
                        //strQuery.AppendFormat(" convert(varchar,e107lastpwddate,105) +' '+ convert(varchar,e107lastpwddate,108) as 'e107lastpwddate'");
                        //strQuery.AppendFormat(" from e107dtluserpwdfreq pc inner join device_linkage dl on e107deviceid = device_id  ");
                        //strQuery.AppendFormat(" where e107username not in ('authenticated users','domain admins','domain users','interactive','iusr','network service','aspnet','defaultapppool','system') ");
                        //strQuery.AppendFormat(" and status <> -1 {0} {1} order by device_name  asc", serachdate, search);
                        strQuery.AppendFormat("select ut.device_id,dl.ou_longname,dl.device_name,dl.ip,case ut.username when 'NA' then '' else ut.username end as username,ut.json from user_table ut inner join device_linkage dl on ut.device_id = dl.device_id ");
                        strQuery.AppendFormat(" where dl.status <> -1 {0} order by dl.device_name  asc", search);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        //strQuery.AppendFormat(" select distinct device_name,ou_longname,ip,e107username, ");
                        //strQuery.AppendFormat(" cast(date_format(e107lastpwddate,'%d-%m-%Y %H:%i:%s') as char) as 'e107lastpwddate'");
                        //strQuery.AppendFormat(" from e107dtluserpwdfreq pc inner join device_linkage dl on e107deviceid = device_id ");
                        //strQuery.AppendFormat(" where e107username not in ('authenticated users','domain admins','domain users','interactive','iusr','network service','aspnet','defaultapppool','system') ");
                        //strQuery.AppendFormat(" and status <> -1 {0} {1} order by device_name  asc", serachdate, search);
                        strQuery.AppendFormat(" select ut.device_id,dl.ou_longname,dl.device_name,dl.ip,case ut.username when 'NA' then '' else ut.username end as username,ut.json from user_table ut inner join device_linkage dl on ut.device_id = dl.device_id ");
                        strQuery.AppendFormat(" where dl.status <> -1 {0} order by dl.device_name  asc", search);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_passwordchangedetail Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_passwordchangedetail Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        #endregion


        #region System network traffic chart 

        public DataTable Get_network_traffic_ChartHourwise(string type, string ip, string searchdate)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                if (type == "packet")
                {
                    switch (dbtype)
                    {
                        case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                            strQuery.AppendFormat("select cast(cast(label as varchar)+':00' as varchar) as label ,sum(sendpackets) as sendpackets, sum(receivedpackets) as receivedpackets from (select distinct SUBSTRING(convert(varchar, startdate,108) ,1,2) as label ,sum(sendpackets) as sendpackets, sum(receivedpackets) as receivedpackets from (select distinct dateadd(s, pcap_start_time, '1970-01-01 00:00:00') as startdate,sum(packets) as sendpackets,0 as receivedpackets from node_networkcard_traffic where local_ip = '{0}' group by dateadd(s, pcap_start_time, '1970-01-01 00:00:00') union all select distinct dateadd(s, pcap_start_time, '1970-01-01 00:00:00') as startdate,0 as sendpackets,sum(packets) as receivedpackets from node_networkcard_traffic where remote_ip = '{0}' group by dateadd(s, pcap_start_time, '1970-01-01 00:00:00') ", ip);
                            strQuery.AppendFormat(" ) t {0} group by SUBSTRING(convert(varchar, startdate,108) ,1,2) union all select 0 as label,0 as sendpackets,0 as receivedpackets union all select 1 as label,0 as sendpackets,0 as receivedpackets union all select 2 as label,0 as sendpackets,0 as receivedpackets union all select 3 as label,0 as sendpackets,0 as receivedpackets union all select 4 as label,0 as sendpackets,0 as receivedpackets union all select 5 as label,0 as sendpackets,0 as receivedpackets union all select 6 as label,0 as sendpackets,0 as receivedpackets union all select 7 as label,0 as sendpackets,0 as receivedpackets   union all select 8 as label,0 as sendpackets,0 as receivedpackets union all select 9 as label,0 as sendpackets,0 as receivedpackets ", searchdate);
                            strQuery.AppendFormat(" union all select 10 as label,0 as sendpackets,0 as receivedpackets union all select 11 as label,0 as sendpackets,0 as receivedpackets union all select 12 as label,0 as sendpackets,0 as receivedpackets union all select 13 as label,0 as sendpackets,0 as receivedpackets union all select 14 as label,0 as sendpackets,0 as receivedpackets union all select 15 as label,0 as sendpackets,0 as receivedpackets  union all select 16 as label,0 as sendpackets,0 as receivedpackets union all select 17 as label,0 as sendpackets,0 as receivedpackets union all select 18 as label,0 as sendpackets,0 as receivedpackets union all select 19 as label,0 as sendpackets,0 as receivedpackets union all select 20 as label,0 as sendpackets,0 as receivedpackets union all select 21 as label,0 as sendpackets,0 as receivedpackets union all select 22 as label,0 as sendpackets,0 as receivedpackets union all select 23 as label,0 as sendpackets,0 as receivedpackets) t group by label");
                            break;
                        case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                            strQuery.AppendFormat("select cast(concat(label,':00') as char) as label ,sum(sendpackets) as sendpackets, sum(receivedpackets) as receivedpackets from (select distinct cast(date_format(startdate,'%H') as char) as label ,sum(sendpackets) as sendpackets, sum(receivedpackets) as receivedpackets from (select distinct from_unixtime(pcap_start_time,'%Y-%m-%d %H:%i:%s') as startdate,sum(packets) as sendpackets,0 as receivedpackets from node_networkcard_traffic where local_ip = '{0}' group by from_unixtime(pcap_start_time,'%Y-%m-%d %H:%i:%s') union all select distinct from_unixtime(pcap_start_time,'%Y-%m-%d %H:%i:%s') as startdate,0 as sendpackets,sum(packets) as receivedpackets from node_networkcard_traffic where remote_ip = '{0}' group by from_unixtime(pcap_start_time,'%Y-%m-%d %H:%i:%s') ", ip);
                            strQuery.AppendFormat(" ) t {0} group by cast(date_format(startdate,'%H') as char) union all select 0 as label,0 as sendpackets,0 as receivedpackets union all select 1 as label,0 as sendpackets,0 as receivedpackets union all select 2 as label,0 as sendpackets,0 as receivedpackets union all select 3 as label,0 as sendpackets,0 as receivedpackets union all select 4 as label,0 as sendpackets,0 as receivedpackets union all select 5 as label,0 as sendpackets,0 as receivedpackets union all select 6 as label,0 as sendpackets,0 as receivedpackets union all select 7 as label,0 as sendpackets,0 as receivedpackets   union all select 8 as label,0 as sendpackets,0 as receivedpackets union all select 9 as label,0 as sendpackets,0 as receivedpackets ", searchdate);
                            strQuery.AppendFormat(" union all select 10 as label,0 as sendpackets,0 as receivedpackets union all select 11 as label,0 as sendpackets,0 as receivedpackets union all select 12 as label,0 as sendpackets,0 as receivedpackets union all select 13 as label,0 as sendpackets,0 as receivedpackets union all select 14 as label,0 as sendpackets,0 as receivedpackets union all select 15 as label,0 as sendpackets,0 as receivedpackets  union all select 16 as label,0 as sendpackets,0 as receivedpackets union all select 17 as label,0 as sendpackets,0 as receivedpackets union all select 18 as label,0 as sendpackets,0 as receivedpackets union all select 19 as label,0 as sendpackets,0 as receivedpackets union all select 20 as label,0 as sendpackets,0 as receivedpackets union all select 21 as label,0 as sendpackets,0 as receivedpackets union all select 22 as label,0 as sendpackets,0 as receivedpackets union all select 23 as label,0 as sendpackets,0 as receivedpackets) t group by label order by cast(label as signed)");
                            break;
                    }
                }
                else
                {
                    switch (dbtype)
                    {
                        case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                            strQuery.AppendFormat("select cast(cast(label as varchar)+':00' as varchar) as label ,sum(sendpackets) as sendpackets, sum(receivedpackets) as receivedpackets from (select distinct SUBSTRING(convert(varchar, startdate,108) ,1,2) as label ,sum(sendpackets) as sendpackets, sum(receivedpackets) as receivedpackets from (select distinct dateadd(s, pcap_start_time, '1970-01-01 00:00:00') as startdate,sum(bytes/1024) as sendpackets,0 as receivedpackets from node_networkcard_traffic where local_ip = '{0}' group by dateadd(s, pcap_start_time, '1970-01-01 00:00:00') union all select distinct dateadd(s, pcap_start_time, '1970-01-01 00:00:00') as startdate,0 as sendpackets,sum(bytes/1024) as receivedpackets from node_networkcard_traffic where remote_ip = '{0}' group by dateadd(s, pcap_start_time, '1970-01-01 00:00:00') ", ip);
                            strQuery.AppendFormat(" ) t {0} group by SUBSTRING(convert(varchar, startdate,108) ,1,2) union all select 0 as label,0 as sendpackets,0 as receivedpackets union all select 1 as label,0 as sendpackets,0 as receivedpackets union all select 2 as label,0 as sendpackets,0 as receivedpackets union all select 3 as label,0 as sendpackets,0 as receivedpackets union all select 4 as label,0 as sendpackets,0 as receivedpackets union all select 5 as label,0 as sendpackets,0 as receivedpackets union all select 6 as label,0 as sendpackets,0 as receivedpackets union all select 7 as label,0 as sendpackets,0 as receivedpackets   union all select 8 as label,0 as sendpackets,0 as receivedpackets union all select 9 as label,0 as sendpackets,0 as receivedpackets ", searchdate);
                            strQuery.AppendFormat(" union all select 10 as label,0 as sendpackets,0 as receivedpackets union all select 11 as label,0 as sendpackets,0 as receivedpackets union all select 12 as label,0 as sendpackets,0 as receivedpackets union all select 13 as label,0 as sendpackets,0 as receivedpackets union all select 14 as label,0 as sendpackets,0 as receivedpackets union all select 15 as label,0 as sendpackets,0 as receivedpackets  union all select 16 as label,0 as sendpackets,0 as receivedpackets union all select 17 as label,0 as sendpackets,0 as receivedpackets union all select 18 as label,0 as sendpackets,0 as receivedpackets union all select 19 as label,0 as sendpackets,0 as receivedpackets union all select 20 as label,0 as sendpackets,0 as receivedpackets union all select 21 as label,0 as sendpackets,0 as receivedpackets union all select 22 as label,0 as sendpackets,0 as receivedpackets union all select 23 as label,0 as sendpackets,0 as receivedpackets) t group by label");
                            break;
                        case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                            strQuery.AppendFormat("select cast(concat(label,':00') as char) as label ,sum(sendpackets) as sendpackets, sum(receivedpackets) as receivedpackets from (select distinct cast(date_format(startdate,'%H') as char) as label ,sum(sendpackets) as sendpackets, sum(receivedpackets) as receivedpackets from (select distinct from_unixtime(pcap_start_time,'%Y-%m-%d %H:%i:%s') as startdate,sum(bytes div 1024) as sendpackets,0 as receivedpackets from node_networkcard_traffic where local_ip = '{0}' group by from_unixtime(pcap_start_time,'%Y-%m-%d %H:%i:%s') union all select distinct from_unixtime(pcap_start_time,'%Y-%m-%d %H:%i:%s') as startdate,0 as sendpackets,sum(bytes div 1024) as receivedpackets from node_networkcard_traffic where remote_ip = '{0}' group by from_unixtime(pcap_start_time,'%Y-%m-%d %H:%i:%s') ", ip);
                            strQuery.AppendFormat(" ) t {0} group by cast(date_format(startdate,'%H') as char) union all select 0 as label,0 as sendpackets,0 as receivedpackets union all select 1 as label,0 as sendpackets,0 as receivedpackets union all select 2 as label,0 as sendpackets,0 as receivedpackets union all select 3 as label,0 as sendpackets,0 as receivedpackets union all select 4 as label,0 as sendpackets,0 as receivedpackets union all select 5 as label,0 as sendpackets,0 as receivedpackets union all select 6 as label,0 as sendpackets,0 as receivedpackets union all select 7 as label,0 as sendpackets,0 as receivedpackets   union all select 8 as label,0 as sendpackets,0 as receivedpackets union all select 9 as label,0 as sendpackets,0 as receivedpackets ", searchdate);
                            strQuery.AppendFormat(" union all select 10 as label,0 as sendpackets,0 as receivedpackets union all select 11 as label,0 as sendpackets,0 as receivedpackets union all select 12 as label,0 as sendpackets,0 as receivedpackets union all select 13 as label,0 as sendpackets,0 as receivedpackets union all select 14 as label,0 as sendpackets,0 as receivedpackets union all select 15 as label,0 as sendpackets,0 as receivedpackets  union all select 16 as label,0 as sendpackets,0 as receivedpackets union all select 17 as label,0 as sendpackets,0 as receivedpackets union all select 18 as label,0 as sendpackets,0 as receivedpackets union all select 19 as label,0 as sendpackets,0 as receivedpackets union all select 20 as label,0 as sendpackets,0 as receivedpackets union all select 21 as label,0 as sendpackets,0 as receivedpackets union all select 22 as label,0 as sendpackets,0 as receivedpackets union all select 23 as label,0 as sendpackets,0 as receivedpackets) t group by label order by cast(label as signed)");
                            break;
                    }
                }
                objcommon.WriteLog("DBQueryHandler", "Get_network_traffic_ChartHourwise Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_network_traffic_ChartHourwise Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public string Get_network_traffic_Chart_ip(string deviceid)
        {
            StringBuilder strQueryBuilder = new StringBuilder();
            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQueryBuilder.AppendFormat("select ip from device_master where device_id = '{0}' ", deviceid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat("select ip from device_master where device_id = '{0}' ", deviceid);
                        break;
                }
                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "Get_network_traffic_Chart_ip Query : " + strQuery);
                result = this.database.getValue(strQuery);
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_network_traffic_Chart_ip Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public DataTable Get_network_traffic_Chart(string type, string ip, string searchdate)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                if (type == "packet")
                {
                    switch (dbtype)
                    {
                        case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                            strQuery.AppendFormat("select distinct convert(varchar,convert(date, startdate,105),105) as label,sum(sendpackets) as sendpackets, sum(receivedpackets) as receivedpackets from (select distinct dateadd(s, pcap_start_time, '1970-01-01 00:00:00') as startdate,sum(packets) as sendpackets,0 as receivedpackets from node_networkcard_traffic where local_ip = '{0}' group by dateadd(s, pcap_start_time, '1970-01-01 00:00:00') union all select distinct dateadd(s, pcap_start_time, '1970-01-01 00:00:00') as startdate, 0 as sendpackets,sum(packets) as receivedpackets from node_networkcard_traffic where remote_ip = '{0}' group by dateadd(s, pcap_start_time, '1970-01-01 00:00:00')) t {1} group by convert(varchar,convert(date, startdate,105),105) ", ip, searchdate);
                            break;
                        case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                            strQuery.AppendFormat("select distinct cast(date_format(startdate,'%d-%m-%Y') as char) as label,sum(sendpackets) as sendpackets, sum(receivedpackets) as receivedpackets from (select distinct from_unixtime(pcap_start_time,'%Y-%m-%d %H:%i:%s') as startdate,sum(packets) as sendpackets,0 as receivedpackets from node_networkcard_traffic where local_ip = '{0}' group by from_unixtime(pcap_start_time,'%Y-%m-%d %H:%i:%s') union all select distinct from_unixtime(pcap_start_time,'%Y-%m-%d %H:%i:%s') as startdate, 0 as sendpackets,sum(packets) as receivedpackets from node_networkcard_traffic where remote_ip = '{0}' group by from_unixtime(pcap_start_time,'%Y-%m-%d %H:%i:%s')) t {1} group by cast(date_format(startdate,'%d-%m-%Y') as char) ", ip, searchdate);
                            break;
                    }
                }
                else
                {
                    switch (dbtype)
                    {
                        case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                            strQuery.AppendFormat("select distinct convert(varchar,convert(date, startdate,105),105) as label,sum(sendpackets) as sendpackets, sum(receivedpackets) as receivedpackets from (select distinct dateadd(s, pcap_start_time, '1970-01-01 00:00:00') as startdate,sum(bytes/1024) as sendpackets,0 as receivedpackets from node_networkcard_traffic where local_ip = '{0}' group by dateadd(s, pcap_start_time, '1970-01-01 00:00:00') union all select distinct dateadd(s, pcap_start_time, '1970-01-01 00:00:00') as startdate, 0 as sendpackets,sum(bytes/1024) as receivedpackets from node_networkcard_traffic where remote_ip = '{0}' group by dateadd(s, pcap_start_time, '1970-01-01 00:00:00')) t {1} group by convert(varchar,convert(date, startdate,105),105) ", ip, searchdate);
                            break;
                        case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                            strQuery.AppendFormat("select distinct cast(date_format(startdate,'%d-%m-%Y') as char) as label,sum(sendpackets) as sendpackets, sum(receivedpackets) as receivedpackets from (select distinct from_unixtime(pcap_start_time,'%Y-%m-%d %H:%i:%s') as startdate,sum(bytes div 1024) as sendpackets,0 as receivedpackets from node_networkcard_traffic where local_ip = '{0}' group by from_unixtime(pcap_start_time,'%Y-%m-%d %H:%i:%s') union all select distinct from_unixtime(pcap_start_time,'%Y-%m-%d %H:%i:%s') as startdate, 0 as sendpackets,sum(bytes div 1024) as receivedpackets from node_networkcard_traffic where remote_ip = '{0}' group by from_unixtime(pcap_start_time,'%Y-%m-%d %H:%i:%s')) t {1} group by cast(date_format(startdate,'%d-%m-%Y') as char) ", ip, searchdate);
                            break;
                    }
                }
                objcommon.WriteLog("DBQueryHandler", "Get_network_traffic_Chart Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_network_traffic_Chart Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        #endregion

        #region report_network_statistics report
        public DataTable Get_Protocol()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select distinct protocol from assertyit1.dbo.node_networkcard_traffic  ");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select distinct protocol from assertyit1.node_networkcard_traffic  ");
                        break;

                }
                objcommon.WriteLog("DBQueryHandler", "Get_Protocol Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Protocol Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_Netwrokdetails_send_Chart_data(string packets, string searching)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select dl.device_name as Label,{0} as Value from node_networkcard_traffic nnt,device_linkage dl where nnt.device_id=dl.device_id and dateadd(s, pcap_start_time, '1970-01-01 00:00:00') {1} group by dl.device_name", packets, searching);

                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        if (packets == "sum(nnt.bytes/1024)")
                            packets = "sum(nnt.bytes div 1024)";
                        strQuery.AppendFormat("select dl.device_name as Label,{0} as Value from node_networkcard_traffic nnt,device_linkage dl where nnt.device_id=dl.device_id and from_unixtime(pcap_start_time,'%Y-%m-%d %H:%i:%s') {1} group by dl.device_name", packets, searching);
                        break;

                }
                objcommon.WriteLog("DBQueryHandler", "Get_Netwrokdetails_send_Chart_data Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Netwrokdetails_send_Chart_data Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_Netwrokdetails_send_data(string packets, string searching)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select dl.ou_longname,dl.device_name ,dl.ip,{0} as packet  from node_networkcard_traffic nnt,device_linkage dl where nnt.device_id=dl.device_id and dateadd(s, pcap_start_time, '1970-01-01 00:00:00') {1} group by dl.ou_longname,dl.device_name,dl.ip", packets, searching);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        if (packets == "sum(nnt.bytes/1024)")
                            packets = "sum(nnt.bytes div 1024)";
                        strQuery.AppendFormat("select dl.ou_longname,dl.device_name ,dl.ip,{0} as packet from node_networkcard_traffic nnt,device_linkage dl where nnt.device_id=dl.device_id and from_unixtime(pcap_start_time,'%Y-%m-%d %H:%i:%s') {1} group by dl.ou_longname,dl.device_name,dl.ip", packets, searching);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Netwrokdetails_send_data Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Netwrokdetails_send_data Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_network_traffic_Statitic_Chart(string local_ip, string remote_ip, string packettypes, string searchdate)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select distinct convert(varchar,convert(date, t.startdate,105),105) as label,sum(sendpackets) as sendpackets, sum(receivedpackets) as receivedpackets from (select distinct device_id,dateadd(s, pcap_start_time, '1970-01-01 00:00:00') as startdate,{1} as sendpackets,0 as receivedpackets from node_networkcard_traffic {0} group by device_id,dateadd(s, pcap_start_time, '1970-01-01 00:00:00') ", local_ip, packettypes);
                        strQuery.AppendFormat("union all select distinct device_id,dateadd(s, pcap_start_time, '1970-01-01 00:00:00') as startdate, 0 as sendpackets,{1} as receivedpackets from node_networkcard_traffic {0} group by device_id,dateadd(s, pcap_start_time, '1970-01-01 00:00:00')) t left outer join device_linkage dl on t.device_id = dl.device_id where {2} group by convert(varchar,convert(date, t.startdate,105),105 ) order by label asc", remote_ip, packettypes, searchdate);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        if (packettypes == "sum(bytes/1024)")
                            packettypes = "sum(bytes div 1024)";
                        strQuery.AppendFormat("select distinct cast(date_format(t.startdate,'%d-%m-%Y') as char) as label,sum(sendpackets) as sendpackets, sum(receivedpackets) as receivedpackets from (select distinct device_id,from_unixtime(pcap_start_time,'%Y-%m-%d %H:%i:%s') as startdate,{1} as sendpackets,0 as receivedpackets from node_networkcard_traffic {0} group by device_id,from_unixtime(pcap_start_time,'%Y-%m-%d %H:%i:%s') ", local_ip, packettypes);
                        strQuery.AppendFormat("union all select distinct device_id,from_unixtime(pcap_start_time,'%Y-%m-%d %H:%i:%s') as startdate, 0 as sendpackets,{1} as receivedpackets from node_networkcard_traffic {0} group by device_id,from_unixtime(pcap_start_time,'%Y-%m-%d %H:%i:%s')) t left outer join device_linkage dl on t.device_id = dl.device_id  where {2}  group by label order by label asc", remote_ip, packettypes, searchdate);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_network_traffic_Statitic_Chart Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_network_traffic_Statitic_Chart Exception : " + ex.Message.ToString());
            }
            return data_table;
        }


        #endregion

        #region setting_organization_structure 
        public DataTable Get_Level()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select ou_levelmaster_levelid as levelid,ou_levelmaster_levelname as levelname,'/images/status.png' as img from ou_levelmaster order by ou_levelmaster_levelid  ");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Level Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Level Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_Level_id()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select max(ou_levelmaster_levelid) + 1 as levelid from ou_levelmaster order by levelid ");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Level_id Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Level_id Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public int insert_oulevel(string id, string levelname)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" insert into ou_levelmaster values({0},'{1}')", id, levelname);
                        break;
                }

                objcommon.WriteLog("DBQueryHandler", "insert_oulevel Query : " + strQuery);
                result = this.database.execute(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "insert_oulevel Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int Get_LevelCount(string levelname)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select count(*) from OU_LevelMaster where ou_levelmaster_levelname='{0}'", levelname);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_LevelCount Query : " + strQuery.ToString());
                result = this.database.getIntValue(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_LevelCount Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public DataTable Get_level_rights(string levelid)
        {
            StringBuilder strQuery = new StringBuilder();

            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select status,ou_levelrights_propertyname,propertyname,type from( select sum(status) as status,ou_levelrights_propertyname,case  ou_levelrights_propertyname when 'System Admin' then 1 when 'Engineer' then 2 when 'User' then 3  when 'Devices' then 4 when 'Child Node' then 5  when 'Modify Node' then 6 end as propertyname,type from (select  status,ou_levelrights_propertyname,type from (select  status,ou_levelrights_propertyname,type from ( ");
                        strQuery.AppendFormat(" select ou_levelrights_status as status,case  ou_levelrights_propertyname when 1 then 'System Admin' when 2 then 'Engineer' when 3 then 'User' ");
                        strQuery.AppendFormat(" when 4 then 'Devices' when 5 then 'Child Node'  when 6 then 'Modify Node' end as ou_levelrights_propertyname,case  ou_levelrights_propertyname when 1 then 'User' when 2 then 'User' when 3 then 'User' ");
                        strQuery.AppendFormat(" when 4 then 'Asset' when 5 then 'Branch/Unit'  when 6 then 'Branch/Unit' end as type from ou_levelrights ol  where ou_levelrights_oulevelid={0} ", levelid);
                        strQuery.AppendFormat(" )T union select 0 as status,'System Admin' as ou_levelrights_propertyname,'User' as type union select 0 as status,'Engineer' as ou_levelrights_propertyname,'User' as type ");
                        strQuery.AppendFormat(" union select 0 as status,'User' as ou_levelrights_propertyname,'User' as type union select 0 as status,'Devices' as ou_levelrights_propertyname,'Asset' as type");
                        strQuery.AppendFormat(" union select 0 as status,'Child Node' as ou_levelrights_propertyname,'Branch/Unit' as type union select 0 as status,'Modify Node' as ou_levelrights_propertyname,'Branch/Unit' as type ");
                        strQuery.AppendFormat(" )S )T group by ou_levelrights_propertyname,type)SS order by propertyname  ");

                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select sum(status) as status,ou_levelrights_propertyname,type from (select  status,ou_levelrights_propertyname,type from (select  status,ou_levelrights_propertyname,type from ( ");
                        strQuery.AppendFormat(" select ou_levelrights_status as status,case  ou_levelrights_propertyname when 1 then 'System Admin' when 2 then 'Engineer' when 3 then 'User' ");
                        strQuery.AppendFormat(" when 4 then 'Devices' when 5 then 'Child Node'  when 6 then 'Modify Node' end as ou_levelrights_propertyname,case  ou_levelrights_propertyname when 1 then 'User' when 2 then 'User' when 3 then 'User' ");
                        strQuery.AppendFormat(" when 4 then 'Asset' when 5 then 'Branch/Unit'  when 6 then 'Branch/Unit' end as type from ou_levelrights ol  where ou_levelrights_oulevelid={0} ", levelid);
                        strQuery.AppendFormat(" )T union select 0 as status,'System Admin' as ou_levelrights_propertyname,'User' as type union select 0 as status,'Engineer' as ou_levelrights_propertyname,'User' as type ");
                        strQuery.AppendFormat(" union select 0 as status,'User' as ou_levelrights_propertyname,'User' as type union select 0 as status,'Devices' as ou_levelrights_propertyname,'Asset' as type");
                        strQuery.AppendFormat(" union select 0 as status,'Child Node' as ou_levelrights_propertyname,'Branch/Unit' as type union select 0 as status,'Modify Node' as ou_levelrights_propertyname,'Branch/Unit' as type ");
                        strQuery.AppendFormat(" )S )T group by ou_levelrights_propertyname,type  ");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_level_rights Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_level_rights Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public int Get_Level_RightsCount(string id)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select count(*) from ou_levelrights where  ou_levelrights_oulevelid={0}  ", id);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Level_RightsCount Query : " + strQuery.ToString());
                result = this.database.getIntValue(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Level_RightsCount Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int insert_level_rights(string id, string propertyname)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" insert into ou_levelrights select {0},ou_properties_propertyid,1 from ou_properties where ou_properties_propertyid in({1}) ", id, propertyname);
                        break;
                }

                objcommon.WriteLog("DBQueryHandler", "insert_level_rights Query : " + strQuery);
                result = this.database.execute(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "insert_level_rights Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int Update_level(string id, string propertyname)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" update OU_LevelMaster set ou_levelmaster_levelname='{1}' where ou_levelmaster_levelid={0} ", id, propertyname);
                        break;
                }

                objcommon.WriteLog("DBQueryHandler", "Update_level Query : " + strQuery);
                result = this.database.execute(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Update_level Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int Delete_level_rights(string id)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" delete from ou_levelrights where ou_levelrights_oulevelid ={0} ", id);
                        break;
                }

                objcommon.WriteLog("DBQueryHandler", "Delete_level_rights Query : " + strQuery);
                result = this.database.execute(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Delete_level_rights Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public DataTable Get_Linkage_Device(string search)
        {
            StringBuilder strQuery = new StringBuilder();

            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select device_id,ou_longname,ou_id,device_name,ip from device_linkage where status<>-1 {0}", search);
                        break;

                }
                objcommon.WriteLog("DBQueryHandler", "Get_Linkage_Device Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Linkage_Device Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public int Unlinksystem(string did, string ouid)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            string default_ouid = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select min(ou_nodelinkage_ouid) from ou_nodelinkage where ou_nodelinkage_levelid=3 and ou_nodelinkage_active=1");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select min(ou_nodelinkage_ouid) from ou_nodelinkage where ou_nodelinkage_levelid=3 and ou_nodelinkage_active=1");
                        break;
                }

                objcommon.WriteLog("DBQueryHandler", "Unlinksystem Query : " + strQuery);
                default_ouid = this.database.getValue(strQuery.ToString());
                strQuery.Clear();
                string ou_name = "";
                string ou_long_name = "";
                DataTable dtOU = new DataTable();
                try
                {
                    switch (dbtype)
                    {
                        case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                            strQuery.AppendFormat("select ou_nodelinkage_nodename,ou_nodelinkage_longname from ou_nodelinkage where ou_nodelinkage_ouid={0}", default_ouid);
                            break;
                        case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                            strQuery.AppendFormat("select ou_nodelinkage_nodename,ou_nodelinkage_longname from ou_nodelinkage where ou_nodelinkage_ouid={0}", default_ouid);
                            break;
                    }
                    dtOU = this.database.getDataTable(strQuery.ToString());
                    objcommon.WriteLog("DBQueryHandler", "insert_update_device_linkage Query : " + strQuery.ToString());
                    if (dtOU.Rows.Count > 0)
                    {
                        ou_name = dtOU.Rows[0]["ou_nodelinkage_nodename"].ToString();
                        ou_long_name = dtOU.Rows[0]["ou_nodelinkage_longname"].ToString();
                    }
                    strQuery.Clear();
                }
                catch (Exception)
                {
                }
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" update device_linkage set ou_id={0},ou_node_name='{2}',ou_longname='{3}'  where device_id in({1})  ", default_ouid, did, ou_name, ou_long_name);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" update device_linkage set ou_id={0},ou_node_name='{2}',ou_longname='{3}'  where device_id in({1})  ", default_ouid, did, ou_name, ou_long_name);
                        break;
                }

                objcommon.WriteLog("DBQueryHandler", "Unlinksystem Query : " + strQuery);
                result = this.database.execute(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Unlinksystem Exception : " + ex.Message.ToString());
            }
            return result;
        }



        public int Delete_OU1(string ouid)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            string default_ouid = "";
            string did = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select min(ou_nodelinkage_ouid) from ou_nodelinkage where ou_nodelinkage_levelid=3 and ou_nodelinkage_active=1");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select min(ou_nodelinkage_ouid) from ou_nodelinkage where ou_nodelinkage_levelid=3 and ou_nodelinkage_active=1");
                        break;
                }

                objcommon.WriteLog("DBQueryHandler", "Delete_OU1 Query : " + strQuery);
                default_ouid = this.database.getValue(strQuery.ToString());
                strQuery.Clear();
                string ou_name = "";
                string ou_long_name = "";
                DataTable dtOU = new DataTable();
                try
                {
                    switch (dbtype)
                    {
                        case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                            strQuery.AppendFormat("select ou_nodelinkage_nodename,ou_nodelinkage_longname from ou_nodelinkage where ou_nodelinkage_ouid={0}", default_ouid);
                            break;
                        case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                            strQuery.AppendFormat("select ou_nodelinkage_nodename,ou_nodelinkage_longname from ou_nodelinkage where ou_nodelinkage_ouid={0}", default_ouid);
                            break;
                    }
                    dtOU = this.database.getDataTable(strQuery.ToString());
                    objcommon.WriteLog("DBQueryHandler", "insert_update_device_linkage Query : " + strQuery.ToString());
                    if (dtOU.Rows.Count > 0)
                    {
                        ou_name = dtOU.Rows[0]["ou_nodelinkage_nodename"].ToString();
                        ou_long_name = dtOU.Rows[0]["ou_nodelinkage_longname"].ToString();
                    }
                    strQuery.Clear();
                }
                catch (Exception)
                {
                }
                try
                {
                    switch (dbtype)
                    {
                        case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                            strQuery.AppendFormat(" select device_id from device_linkage where ou_id={0}", ouid);
                            break;
                    }

                    objcommon.WriteLog("DBQueryHandler", "Delete_OU1 Query : " + strQuery);
                    //  did = this.database.getValue(strQuery.ToString());
                    data_table = this.database.getDataTable(strQuery.ToString());
                    strQuery.Clear();
                }

                catch (Exception)
                {
                }
                for (int i = 0; i < data_table.Rows.Count; i++)
                {
                    did += "," + data_table.Rows[i]["device_id"].ToString();
                }


                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" update device_linkage set ou_id={0},ou_node_name='{2}',ou_longname='{3}'  where device_id in({1})  ", default_ouid, did.Substring(1).ToString(), ou_name, ou_long_name);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" update device_linkage set ou_id={0},ou_node_name='{2}',ou_longname='{3}'  where device_id in({1})  ", default_ouid, did, ou_name, ou_long_name);
                        break;
                }

                objcommon.WriteLog("DBQueryHandler", "Delete_OU1 Query : " + strQuery);
                result = this.database.execute(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Delete_OU1 Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public DataTable Getallchild_OU(string id)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select ou_nodelinkage_allchild from ou_nodelinkage where ou_nodelinkage_ouid = {0} ", id);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Getallchild_OU Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Getallchild_OU Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public int Delete_OU(string id)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" delete from ou_nodelinkage where ou_nodelinkage_ouid in ({0}) ", id);
                        break;
                }

                objcommon.WriteLog("DBQueryHandler", "Delete_OU Query : " + strQuery);
                result = this.database.execute(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Delete_OU Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public DataTable Get_treedata()
        {
            StringBuilder strQuery = new StringBuilder();

            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select ou_nodelinkage_ouid,ou_nodelinkage_nodename,ou_nodelinkage_levelid from ou_nodelinkage where ou_nodelinkage_active=1 ");
                        break;

                }
                objcommon.WriteLog("DBQueryHandler", "Get_treedata Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_treedata Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_ou_Details(string levelid)
        {
            StringBuilder strQuery = new StringBuilder();

            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select top 1  ou_nodelinkage_ouid,ou_nodelinkage_nodename from ou_nodelinkage where ou_nodelinkage_levelid={0} and  ou_nodelinkage_active=1 ", levelid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select  ou_nodelinkage_ouid,ou_nodelinkage_nodename from ou_nodelinkage where ou_nodelinkage_levelid={0} and  ou_nodelinkage_active=1 limi 1 ", levelid);
                        break;

                }
                objcommon.WriteLog("DBQueryHandler", "Get_ou_Details Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_ou_Details Exception : " + ex.Message.ToString());
            }

            return data_table;
        }
        public int Update_OUname(string ouid, string ouname)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" update ou_nodelinkage set  ou_nodelinkage_nodename='{1}' where ou_nodelinkage_ouid= {0}  and ou_nodelinkage_active=1 ", ouid, ouname);
                        break;
                }

                objcommon.WriteLog("DBQueryHandler", "Update_OUname Query : " + strQuery);
                result = this.database.execute(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Update_OUname Exception : " + ex.Message.ToString());
            }
            return result;
        }

        public int Update_OUname_devicelinkage(string ouid, string ounodename, string oulongname)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" update device_linkage set  ou_node_name='{1}',ou_longname='{2}' where ou_id= {0}", ouid, ounodename, oulongname);
                        break;
                }

                objcommon.WriteLog("DBQueryHandler", "Update_OUname_devicelinkage Query : " + strQuery);
                result = this.database.execute(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Update_OUname_devicelinkage Exception : " + ex.Message.ToString());
            }
            return result;
        }

        public DataTable Get_ou_Details_nodelinkage(string ouid)
        {
            StringBuilder strQuery = new StringBuilder();

            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select top 1  ou_nodelinkage_nodename,ou_nodelinkage_longname from ou_nodelinkage where ou_nodelinkage_ouid={0} and  ou_nodelinkage_active=1 ", ouid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select  ou_nodelinkage_nodename,ou_nodelinkage_longname from ou_nodelinkage where ou_nodelinkage_ouid={0} and  ou_nodelinkage_active=1 limi 1 ", ouid);
                        break;

                }
                objcommon.WriteLog("DBQueryHandler", "Get_ou_Details_nodelinkage Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_ou_Details_nodelinkage Exception : " + ex.Message.ToString());
            }

            return data_table;
        }
        public int call_Proc_InsLogName()
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" exec inslogname ");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" call inslogname(); ");
                        break;
                }

                objcommon.WriteLog("DBQueryHandler", "call_Proc_InsLogName Query : " + strQuery);
                result = this.database.execute(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "call_Proc_InsLogName Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int call_Proc_insallchild()
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" exec insallchild ");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" call insallchild() ");
                        break;
                }

                objcommon.WriteLog("DBQueryHandler", "call_Proc_insallchild Query : " + strQuery);
                result = this.database.execute(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "call_Proc_insallchild Exception : " + ex.Message.ToString());
            }
            return result;
        }
        //public DataTable Get_device_list()
        //{
        //    StringBuilder strQuery = new StringBuilder();

        //    try
        //    {
        //        switch (dbtype)
        //        {
        //            case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
        //                strQuery.AppendFormat(" select device_id,isnull(device_name,virtual_name) as devicename from device_master where status not in (-1,90) and active = 1 and device_mode in(1,2,3,4) and device_id not in (select device_id from ou_device where status=1  ");
        //                strQuery.AppendFormat(" and ou_id not in (select ou_nodelinkage_ouid from ou_nodelinkage where  ou_nodelinkage_active=1 ) )   order by cast(parsename(ip, 4) as int),cast(parsename(ip, 3) as int),cast(parsename(ip, 2) as int),cast(parsename(ip, 1) as int)  ");
        //                break;
        //            case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
        //                strQuery.AppendFormat(" select device_id,ifnull(device_name,virtual_name) as devicename from device_master where status not in (-1,90) and active = 1 and device_mode in(1,2,3,4) and device_id not in (select device_id from ou_device where status=1  ");
        //                strQuery.AppendFormat(" and ou_id not in (select ou_nodelinkage_ouid from ou_nodelinkage where  ou_nodelinkage_active=1 ) )   order by cast(parsename(ip, 4) as int),cast(parsename(ip, 3) as int),cast(parsename(ip, 2) as int),cast(parsename(ip, 1) as int)  ");
        //                break;


        //        }
        //        objcommon.WriteLog("DBQueryHandler", "Get_device_list Query : " + strQuery.ToString());
        //        data_table = this.database.getDataTable(strQuery.ToString());

        //    }
        //    catch (Exception ex)
        //    {
        //        objcommon.WriteLog("DBQueryHandler", "Get_device_list Exception : " + ex.Message.ToString());
        //    }

        //    return data_table;
        //}
        public DataTable Get_ou_Details1(string levelid)
        {
            StringBuilder strQuery = new StringBuilder();

            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select top 1  ou_nodelinkage_ouid,ou_nodelinkage_nodename,ou_nodelinkage_longname from ou_nodelinkage where ou_nodelinkage_levelid={0} and  ou_nodelinkage_active=1 ", levelid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select  ou_nodelinkage_ouid,ou_nodelinkage_nodename from ou_nodelinkage,ou_nodelinkage_longname where ou_nodelinkage_levelid={0} and  ou_nodelinkage_active=1 limi 1 ", levelid);
                        break;

                }
                objcommon.WriteLog("DBQueryHandler", "Get_ou_Details1 Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_ou_Details1 Exception : " + ex.Message.ToString());
            }

            return data_table;
        }
        //public int Update_OU_device(string deviceid)
        //{
        //    StringBuilder strQuery = new StringBuilder();
        //    int result = 0;
        //    try
        //    {

        //        switch (dbtype)
        //        {
        //            case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
        //            case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
        //                strQuery.AppendFormat(" update ou_device set status = 0 , end_date = getdate() where device_id in {0} and status = 1", deviceid);
        //                break;
        //        }

        //        objcommon.WriteLog("DBQueryHandler", "Update_OU_device Query : " + strQuery);
        //        // result = this.database.execute(strQuery.ToString());
        //    }
        //    catch (Exception ex)
        //    {
        //        objcommon.WriteLog("DBQueryHandler", "Update_OU_device Exception : " + ex.Message.ToString());
        //    }
        //    return result;
        //}
        //public int Insert_OU_device(string ouid, string deviceid)
        //{
        //    StringBuilder strQuery = new StringBuilder();
        //    int result = 0;
        //    try
        //    {

        //        switch (dbtype)
        //        {
        //            case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
        //            case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
        //                strQuery.AppendFormat("  select {0},device_id,1,getdate() from device_master where device_id in ({1}) and status not in (-1,90) and active = 1 and device_mode in(1,2,3,4) ", ouid, deviceid);
        //                break;
        //        }

        //        objcommon.WriteLog("DBQueryHandler", "Insert_OU_device Query : " + strQuery);

        //    }
        //    catch (Exception ex)
        //    {
        //        objcommon.WriteLog("DBQueryHandler", "Insert_OU_device Exception : " + ex.Message.ToString());
        //    }
        //    return result;
        //}
        public int Insert_device_linkage(string ouid, string ouname, string longname, string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("  select dm.device_id,dm.device_name,dm.ip,{0},'{1}','{2}','1',getdate(),dm.status,'','' from device_master where device_id in ({3}) and status not in (-1,90) and active = 1 and device_mode in(1,2,3,4) ", ouid, ouname, longname, deviceid);
                        break;
                }

                objcommon.WriteLog("DBQueryHandler", "Insert_device_linkage Query : " + strQuery);

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Insert_device_linkage Exception : " + ex.Message.ToString());
            }
            return result;
        }
        #endregion

        #region Scan_ip_range

        public DataTable Get_ScanIPdata()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select ip_range,subnet_mask,convert(varchar,device_timestamp,105) + ' ' + convert(varchar,device_timestamp,108) as 'device_timestamp',isnull(status,'') as status from device_network_discovery");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select ip_range,subnet_mask,cast(date_format(device_timestamp,'%d-%m-%Y %H:%i:%s') as char)  as 'device_timestamp',ifnull(status,'') as status from device_network_discovery");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_ScanIPdata Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_ScanIPdata Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable GetDeviceOnOffStatus()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select IP_Address,convert(varchar,time_stamp,105) + ' ' + convert(varchar,time_stamp,108) as 'device_timestamp',device_status from ICMPDeviceStatus order by  time_stamp desc");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select IP_Address,cast(date_format(device_timestamp,'%d-%m-%Y %H:%i:%s') as char)  as 'device_timestamp',device_status from ICMPDeviceStatus order by  time_stamp desc");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_ScanIPdata Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "GetDeviceOnOffStatus Exception : " + ex.Message.ToString());
            }
            return data_table;
        }


        public int Add_ScanIPdata(string iprange, string netmask)
        {
            int result = 0;
            StringBuilder strQueryBuilder = new StringBuilder();

            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" insert into device_network_discovery(ip_range,subnet_mask) values('{0}','{1}') ", iprange, netmask);
                        break;
                }

                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "Add_ScanIPdata Query : " + strQuery);
                result = this.database.execute(strQuery);
                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Add_ScanIPdata Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public DataTable Get_ScanIPPCDetails(string ipsearch)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select device_name as devicename,IP_Address as ip,MAC_Address as mac,vendor as allocated_deviceid,device_status as status  from DeviceDiscoveryStatus {0} ", ipsearch);
                        //strQuery.AppendFormat(" select t.devicename,t.ip,t.device_type,t.mac ");
                        //strQuery.AppendFormat(" from (select distinct  device_name as DeviceName,ip as ip,device_type,mac, ");
                        //strQuery.AppendFormat(" allocated_deviceid	from new_device_details ndd,device_network_discovery  dnd where ndd.activedevice=1");
                        //strQuery.AppendFormat(" ) t left outer join device_master dm on t.allocated_deviceid = dm.device_id {0} order by t.ip  ", ipsearch);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_ScanIPPCDetails Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_ScanIPPCDetails Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        public int Delete_Scaniprange(string iprange, string subnet)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" delete from device_network_discovery where ip_range='" + iprange + "' and subnet_mask='" + subnet + "'");
                        break;
                }

                objcommon.WriteLog("DBQueryHandler", "Delete_Scaniprange Query : " + strQuery);
                result = this.database.execute(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Delete_Scaniprange Exception : " + ex.Message.ToString());
            }
            return result;
        }
        // Authorized IP
        public DataTable Get_AuthorizedIPdata()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select ip_id,case type when 0 then 'Authorize' when 1 then 'Unauthorize' end as 'type' ,start_ip,end_ip,local_port,remote_port from e114manageip");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_AuthorizedIPdata Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_AuthorizedIPdata Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        public int Add_AuthorizedIPdata(int type, string start_ip, string end_ip, string iprange, string startip, string endip, string remoteport, string localport)
        {
            int result = 0;
            StringBuilder strQueryBuilder = new StringBuilder();

            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" insert into e114manageip(start_ip,end_ip,iprange,startip,endip,type,remote_port,local_port) values('{0}','{1}','{2}','{3}','{4}',{5},'{6}','{7}') ", start_ip, end_ip, iprange, startip, endip, type, remoteport, localport);
                        break;

                }

                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "Add_AuthorizedIPdata Query : " + strQuery);
                result = this.database.execute(strQuery);
                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Add_AuthorizedIPdata Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public string Get_Authorized_Unauthorized_Type(string authipid)
        {
            StringBuilder strQueryBuilder = new StringBuilder();
            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat("select type from e114manageip where ip_id={0} ", authipid);
                        break;
                }
                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "Get_Authorized_Unauthorized_Type Query : " + strQuery);
                result = this.database.getValue(strQuery);
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Authorized_Unauthorized_Type Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int Delete_AuthorizedIPdata(string authip_id)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" delete from e114manageip where ip_id={0} ", authip_id);

                        break;
                }

                objcommon.WriteLog("DBQueryHandler", "Delete_AuthorizedIPdata Query : " + strQuery);
                result = this.database.execute(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Delete_AuthorizedIPdata Exception : " + ex.Message.ToString());
            }
            return result;
        }

        public DataTable Get_AuthorizedIP_details(string authipid)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select start_ip,end_ip,type,remote_port,local_port from e114manageip where ip_id={0}", authipid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_AuthorizedIP_details Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_AuthorizedIP_details Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public int Update_AuthorizedIP_details(string ipid, string startip, string endip, string localport, string remoteport, string type)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" update e114manageip set start_ip='{0}',end_ip='{1}',type='{2}',remote_port='{3}',local_port='{4}'", startip, endip, type, remoteport, localport);
                        strQuery.AppendFormat(" where  ip_id={0}", ipid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Update_AuthorizedIP_details Query : " + strQuery);
                result = this.database.execute(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Update_AuthorizedIP_details Exception : " + ex.Message.ToString());
            }
            return result;
        }

        #endregion
        #region Databasemaintenance
        public DataTable Get_databasebackup()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        // strQuery.AppendFormat(" select backup_type,backup_details,backup_time,backup_path,last_backup_time,backup_filename,last_backup_timestamp,backup_status from database_schedular");
                        strQuery.AppendFormat(@"select backup_type,backup_details,backup_time,replace(backup_path,'C:\\Program Files (x86)\\OwnyITEE\\OwnYitServer\\DBBackup\\','') as backup_path,last_backup_time,backup_filename,last_backup_timestamp,backup_status from database_schedular");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_databasebackup Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_databasebackup Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        public DataTable Get_databasehistoryremoval()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select tableName, displayName as DisplayName,days from deletedbdata");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_databasehistoryremoval Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_databasehistoryremoval Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        public int Update_databasehistoryremoval(string dispname, string days)
        {
            int result = 0;
            StringBuilder strQueryBuilder = new StringBuilder();

            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat("update deletedbdata set days='" + days + "' where displayname = '" + dispname + "'");
                        break;


                }

                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "Update_databasehistoryremoval Query : " + strQuery);
                result = this.database.execute(strQuery);
                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Update_databasehistoryremoval Exception : " + ex.Message.ToString());
            }
            return result;
        }

        // Update databse schedule

        public int Update_databaseschedule(string backuptype, string backupdetails, string backuptime, string backuppath)
        {
            int result = 0;
            string strQuery = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery = "update database_schedular set backup_type=" + backuptype + ",backup_details='" + backupdetails + "',backup_time='" + backuptime + "',backup_path='" + backuppath + "', backup_status=null";
                        break;

                }

                objcommon.WriteLog("DBQueryHandler", "Update_databaseschedule Query : " + strQuery);
                result = this.database.execute(strQuery);
                strQuery = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Update_databaseschedule Exception : " + ex.Message.ToString());
            }
            return result;
        }
        #endregion
        #region AdminUserMgmt
        public DataTable Get_adminuserinfo()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select user_id,user_name,login_id,user_type ,user_password,emailid,isnull(contact_no,'NA') as contact_no from user_master order by user_name");
                        break;

                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select user_id,user_name,login_id,user_type ,user_password,emailid,ifnull(contact_no,'NA') as contact_no from user_master order by user_name");
                        break;


                }
                objcommon.WriteLog("DBQueryHandler", "Get_adminuserinfo Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_adminuserinfo Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public int Get_logincount(string loginid)
        {
            String strQuery = "";
            int result = 0;
            try
            {

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery = " select count(login_id) from user_master where login_id='" + loginid + "'";
                        break;
                }

                objcommon.WriteLog("DBQueryHandler", "Get_logincount Query : " + strQuery);

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_logincount Exception : " + ex.Message.ToString());
            }

            objcommon.WriteLog("DBQueryHandler", "Get_logincount Query : " + strQuery);
            result = this.database.getIntValue(strQuery);
            return result;
        }

        public int Add_adminuserinfo(string userrole, string user_name, string login_id, string user_password, string emailid, string contact)
        {
            int result = 0;
            StringBuilder strQueryBuilder = new StringBuilder();

            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" insert into user_master (login_id,user_name,user_type,user_password,emailid,contact_no,rights) values('{0}','{1}','{2}','{3}','{4}','{5}',4) ", login_id, user_name, userrole, user_password, emailid, contact);
                        break;


                }

                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "Add_adminuserinfo Query : " + strQuery);
                result = this.database.execute(strQuery);
                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Add_adminuserinfo Exception : " + ex.Message.ToString());
            }
            return result;
        }

        public int Delete_adminuser(string userid)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" delete from user_master where user_id={0} ", userid);

                        break;
                }

                objcommon.WriteLog("DBQueryHandler", "Delete_adminuser Query : " + strQuery);
                result = this.database.execute(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Delete_adminuser Exception : " + ex.Message.ToString());
            }
            return result;
        }

        public DataTable Get_Adminuserdetails(string admineditid)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select user_id,user_name,login_id,user_type,user_password,emailid,isnull(contact_no,'NA') as contact_no from user_master where user_id={0}", admineditid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select user_id,user_name,login_id,user_type,user_password,emailid,ifnull(contact_no,'NA') as contact_no from user_master where user_id={0}", admineditid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Adminuserdetails Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Adminuserdetails Exception : " + ex.Message.ToString());
            }
            return data_table;
        }


        public int Update_Adminuserdetails(string userid, string usertype, string loginuser, string emailid, string contact)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" update user_master set user_name='{0}',user_type='{1}',emailid='{2}',contact_no='{3}' ", loginuser, usertype, emailid, contact);
                        strQuery.AppendFormat(" where  user_id={0}", userid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Update_Adminuserdetails Query : " + strQuery);
                result = this.database.execute(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Update_Adminuserdetails Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int Update_Adminuserdetails1(string userid, string usertype, string loginuser, string pwd, string emailid, string contact)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" update user_master set user_name='{0}',user_password='{1}',user_type='{2}',emailid='{3}',contact_no='{4}' ", loginuser, pwd, usertype, emailid, contact);
                        strQuery.AppendFormat(" where  user_id={0}", userid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Update_Adminuserdetails1 Query : " + strQuery);
                result = this.database.execute(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Update_Adminuserdetails1 Exception : " + ex.Message.ToString());
            }
            return result;
        }

        // Get Menu List
        public DataTable Get_MenuList(string userid)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select mm.menu_id,ur.rights,mm.menu_name from menu_master mm inner join user_rights_master ur on ");
                        strQuery.AppendFormat(" ur.rights_id = mm.menu_id where ur.user_id='{0}' ", userid);
                        strQuery.AppendFormat(" and admin_rights=1  order by ur.rights_id asc  ");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_MenuList Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_MenuList Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        // Update user rights
        public int update_UserRights(string userid, string menuid, int rights)
        {
            int result = 0;
            string strQuery = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery = "update user_rights_master set rights = " + rights + "  where user_id = " + userid + " and rights_id in (" + menuid + ")";
                        break;

                }

                objcommon.WriteLog("DBQueryHandler", "update_UserRights Query : " + strQuery);
                result = this.database.execute(strQuery);
                strQuery = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "update_UserRights Exception : " + ex.Message.ToString());
            }
            return result;
        }
        #endregion

        #region NotificationHandler
        public DataTable Get_NotificationTemp()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select convert(varchar(100),c050templateid) as 'template_id' ,c050templatename,0 as GroupCount from c050devnottmastr");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select cast(c050templateid as char) as 'template_id' ,c050templatename,0 as GroupCount from c050devnottmastr");
                        break;

                }
                objcommon.WriteLog("DBQueryHandler", "Get_NotificationTemp Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_NotificationTemp Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_User()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select user_name,user_id from user_master order by user_name");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select user_name,user_id from user_master order by user_name");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_User Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_User Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_Category()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select distinct category_id,category_name from category_master where category_type='Category' order by category_name");
                        break;

                }
                objcommon.WriteLog("DBQueryHandler", "Get_Category Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Category Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public int Get_TempCount(string tempname)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select count(*) from c050devnottmastr where c050templatename='" + tempname + "'");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_TempCount Query : " + strQuery.ToString());
                result = this.database.getIntValue(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_TempCount Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int Insert_Template(string tempname)
        {
            int result = 0;
            StringBuilder strQueryBuilder = new StringBuilder();

            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQueryBuilder.AppendFormat(" insert into c050devnottmastr(c050templateid,c050templatename,c050alertpriority,c050threshold,c050autoticket) values(newid(),'{0}',null,'000',0) ", tempname);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" insert into c050devnottmastr(c050templateid,c050templatename,c050alertpriority,c050threshold,c050autoticket) values(uuid(),'{0}',null,'000',0) ", tempname);
                        break;

                }

                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "Insert_Template Query : " + strQuery);
                result = this.database.execute(strQuery);
                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Insert_Template Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public string Get_TempID(string tempname)
        {
            StringBuilder strQuery = new StringBuilder();
            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select convert(varchar(40),c050templateid) as 'template_id' from c050devnottmastr where c050templatename='" + tempname + "'");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select cast(c050templateid as char) as 'template_id' from c050devnottmastr where c050templatename='" + tempname + "'");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_TempID Query : " + strQuery.ToString());
                result = this.database.getValue(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_TempID Exception : " + ex.Message.ToString());
            }
            return result;
        }

        public int Insert_TemplateData(string tempid, int category, int subcategory, int status, int ticketcategoryid, int ticketsubcategoryid, int ticketitemid)
        {
            int result = 0;
            StringBuilder strQueryBuilder = new StringBuilder();

            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" insert into c053devnotevent(c053templateid,c053category,c053subcategory,c053status,c053ticketcategory,c053ticketsubcategory,c053ticketitem)");
                        strQueryBuilder.AppendFormat("values('{0}',{1},{2},{3},{4},{5},{6})", tempid, category, subcategory, status, ticketcategoryid, ticketsubcategoryid, ticketitemid);
                        break;

                }

                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "Insert_TemplateData Query : " + strQuery);
                result = this.database.execute(strQuery);
                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Insert_TemplateData Exception : " + ex.Message.ToString());
            }
            return result;
        }

        public int Insert_EmailNotification(string tempname, string Email, int emailtype)
        {
            int result = 0;
            StringBuilder strQueryBuilder = new StringBuilder();

            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" insert into c052devnotcommdetails(c052templateid,c052notificationcomtype,c052userid,c052address,c052level)");
                        strQueryBuilder.AppendFormat(" values('" + tempname + "'," + emailtype + ",null,'" + Email + "','1') ");
                        break;

                }

                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "Insert_EmailNotification Query : " + strQuery);
                result = this.database.execute(strQuery);
                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Insert_EmailNotification Exception : " + ex.Message.ToString());
            }
            return result;
        }

        public int Insert_UserNotification(string tempid, string userid)
        {
            int result = 0;
            StringBuilder strQueryBuilder = new StringBuilder();

            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" insert into c052devnotcommdetails(C052templateid,c052notificationcomtype,c052userid,c052address,c052level)");
                        strQueryBuilder.AppendFormat(" select '" + tempid + "','4',user_id,null,'1' from user_master {0} ", userid);
                        break;

                }

                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "Insert_UserNotification Query : " + strQuery);
                result = this.database.execute(strQuery);
                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Insert_UserNotification Exception : " + ex.Message.ToString());
            }
            return result;
        }

        public int Insert_UserNotificationLevel(string tempid, string Delay, int Escalate)
        {
            int result = 0;
            StringBuilder strQueryBuilder = new StringBuilder();

            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" insert into c051devnotlevels(c051templateid,c051level,c051delaytime,c051nxtesctime)");
                        strQueryBuilder.AppendFormat(" values('{0}','1','{1}',{2})", tempid, Delay, Escalate);
                        break;

                }

                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "Insert_UserNotificationLevel Query : " + strQuery);
                result = this.database.execute(strQuery);
                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Insert_UserNotificationLevel Exception : " + ex.Message.ToString());
            }
            return result;
        }

        // Bind and get Edit User

        public DataTable Get_EditUser(string template_id)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select distinct user_id,user_name,c052userid,case when c052userid is null then ' ' else 'checked' end as 'userid' from user_master um left outer join c052devnotcommdetails dc ");
                        strQuery.AppendFormat(" on um.user_id=dc.c052userid and c052templateid='{0}' and c052notificationcomtype=4 ", template_id);
                        break;

                }
                objcommon.WriteLog("DBQueryHandler", "Get_EditUser Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_EditUser Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        // Edit Template Details
        public DataTable Get_Templatedetails(string edittempid)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select c050templatename as template_name,c050threshold,c050autoticket,c053category,c053subcategory,c053status,c053ticketcategory from c050devnottmastr,c053devnotevent");
                        strQuery.AppendFormat(" where c050templateid='{0}' and c050templateid=c053templateid ", edittempid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Templatedetails Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Templatedetails Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        // Edit template Email Details

        public DataTable Get_TemplateEmaildetails(string edittempid)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select c052notificationcomtype,c052address from c052devnotcommdetails ");
                        strQuery.AppendFormat(" where c052templateid='{0}' ", edittempid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_TemplateEmaildetails Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_TemplateEmaildetails Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public int Update_DeleteTemplateeventdetails(string edittempid)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" delete from c053devnotevent where c053templateid='" + edittempid + "' ");
                        break;
                }

                objcommon.WriteLog("DBQueryHandler", "Update_DeleteTemplateeventdetails Query : " + strQuery);
                result = this.database.execute(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Update_DeleteTemplateeventdetails Exception : " + ex.Message.ToString());
            }
            return result;
        }

        public int Update_DeleteTemplatelevelsdetails(string edittempid)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("  delete from c051devnotlevels where c051templateid='" + edittempid + "'");
                        break;
                }

                objcommon.WriteLog("DBQueryHandler", "Update_DeleteTemplatelevelsdetails Query : " + strQuery);
                result = this.database.execute(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Update_DeleteTemplatelevelsdetails Exception : " + ex.Message.ToString());
            }
            return result;
        }

        public int Update_DeleteTemplateuserdetails(string edittempid, string strcond)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("  delete from c052devnotcommdetails where c052templateid='" + edittempid + "' {0} ", strcond);
                        break;
                }

                objcommon.WriteLog("DBQueryHandler", "Update_DeleteTemplateuserdetails Query : " + strQuery);
                result = this.database.execute(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Update_DeleteTemplateuserdetails Exception : " + ex.Message.ToString());
            }
            return result;
        }

        // Delete Template

        public int Delete_Template(string temid)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("  begin ");
                        strQuery.AppendFormat(" delete from c050devnottmastr where c050templateid='{0}'", temid);
                        strQuery.AppendFormat(" delete from c051devnotlevels where c051templateid='{0}'", temid);
                        strQuery.AppendFormat(" delete from c052devnotcommdetails where c052templateid='{0}'", temid);
                        strQuery.AppendFormat(" delete from c053devnotevent where c053templateid='{0}'", temid);
                        strQuery.AppendFormat(" delete from c054devnotappl where c054nottempid='{0}'", temid);
                        strQuery.AppendFormat("  end ");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" delete from c050devnottmastr where c050templateid='{0}';", temid);
                        strQuery.AppendFormat(" delete from c051devnotlevels where c051templateid='{0}';", temid);
                        strQuery.AppendFormat(" delete from c052devnotcommdetails where c052templateid='{0}';", temid);
                        strQuery.AppendFormat(" delete from c053devnotevent where c053templateid='{0}';", temid);
                        strQuery.AppendFormat(" delete from c054devnotappl where c054nottempid='{0}';", temid);

                        break;
                }

                objcommon.WriteLog("DBQueryHandler", "Delete_Template Query : " + strQuery);
                result = this.database.execute(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Delete_Template Exception : " + ex.Message.ToString());
            }
            return result;
        }

        // Delete template OU/Device detail

        public int delete_TemplateOUDevice(string fieldname, string tempid)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" delete from c054devnotappl where " + fieldname + " is not null and c054nottempid= '" + tempid + "' ");
                        break;
                }

                objcommon.WriteLog("DBQueryHandler", "delete_TemplateOUDevice Query : " + strQuery);
                result = this.database.execute(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "delete_TemplateOUDevice Exception : " + ex.Message.ToString());
            }
            return result;
        }

        public string get_devnottempid()
        {
            string result = "";
            try
            {
                StringBuilder strQueryBuilder = new StringBuilder();
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" select max(c054devnotapplid) from c054devnotappl ");
                        break;
                }
                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "get_devnottempid Query : " + strQuery);
                result = this.database.getValue(strQuery);
                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "get_devnottempid Exception : " + ex.Message.ToString());
            }
            return result;
        }

        // Get Checked Device/User for template
        public DataTable Get_Templatesystemnameip(string tempid)
        {

            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select distinct device_id,device_name,ip,c054deviceid, ");
                        strQuery.AppendFormat(" case when c054deviceid is null then ' ' else 'checked' end as 'userid' ");
                        strQuery.AppendFormat(" from device_linkage dl left outer join c054devnotappl dn on dl.device_id=c054deviceid and  c054nottempid='{0}' and status <>-1", tempid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Templatesystemnameip Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Templatesystemnameip Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        // Get Checked OU for template
        public DataTable Get_Templateou(string tempid)
        {

            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select distinct ou_nodelinkage_longname as 'OU', ");
                        strQuery.AppendFormat(" ol.ou_nodelinkage_ouid,c054ouid,case when c054ouid is null then ' ' else 'checked' end as 'ouid' ");
                        strQuery.AppendFormat(" from ou_nodelinkage ol left outer join device_linkage dl on dl.ou_id =ol.ou_nodelinkage_ouid left outer join c054devnotappl dn  ");
                        strQuery.AppendFormat(" on  ol.ou_nodelinkage_ouid = dn.c054ouid  and  c054nottempid='{0}' ", tempid);
                        strQuery.AppendFormat(" where ou_nodelinkage_active<>0 group by ou_nodelinkage_longname,ol.ou_nodelinkage_ouid,c054ouid");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Templateou Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Templateou Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        // Insert template ou device detail

        public string GETInsert_TemplateOUDevice(string fieldname, string fieldvalue, string tempid, int intdevnotapplid)
        {
            String strQuery = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery = "insert into c054devnotappl (" + fieldname + ",c054nottempid,c054devnotapplid) values (" + fieldvalue + ",'" + tempid + "'," + intdevnotapplid + ")";
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery = "insert into c054devnotappl (" + fieldname + ",c054nottempid,c054devnotapplid) values (" + fieldvalue + ",'" + tempid + "'," + intdevnotapplid + ");";
                        break;
                }

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "GETInsert_TemplateOUDevice Exception : " + ex.Message.ToString());
            }
            return strQuery;
        }

        public int Execute_TemplateOUDevice(string strquery)
        {
            int result = 0;
            string strbegin = "";

            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strbegin = " Begin ";
                        strbegin += strquery + " End ";
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strbegin = strquery;
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Execute_AddTemplateOUDevice Query : " + strbegin.ToString());
                result = this.database.execute(strbegin);
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Execute_TemplateOUDevice Exception : " + ex.Message.ToString());
            }
            return result;
        }

        #endregion
        #region AutoPowerStatus Report
        public DataTable Get_autopowerstatus_Data(string Startdate, string Enddate, string search)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select device_name,ip,convert(varchar,device_timestamp,104) +' '+ convert(varchar,device_timestamp,108) as Timestamp,");
                        strQuery.AppendFormat(" case when action =1 then 'Yes(Forcefully Shutdown)' when action=2 then 'Auto(Forcefully Shutdown)' ");
                        strQuery.AppendFormat(" else 'No(Cancel Shutdown)' end as Action,ou_longname  from device_poweroff_timer dp,device_linkage dl");
                        strQuery.AppendFormat(" where dl.device_id =dp.device_id and dl.status<>-1 and device_timestamp between '{0}' and '{1}' {2}", Startdate, Enddate, search);
                        strQuery.AppendFormat(" order by device_Name asc");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select device_name,ip,cast(date_format(device_timestamp, '%d.%m.%Y %H:%i:%s') as char) as Timestamp,");
                        strQuery.AppendFormat(" case when action =1 then 'Yes(Forcefully Shutdown)' when action=2 then 'Auto(Forcefully Shutdown)' ");
                        strQuery.AppendFormat(" else 'No(Cancel Shutdown)' end as Action,ou_longname  from device_poweroff_timer dp,device_linkage dl");
                        strQuery.AppendFormat(" where dl.device_id =dp.device_id and dl.status<>-1 and device_timestamp between '{0}' and '{1}' {2}", Startdate, Enddate, search);
                        strQuery.AppendFormat(" order by device_Name asc");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_autopowerstatus_Data Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_autopowerstatus_Data Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        #endregion

        #region FileExtention
        public DataTable Get_FileExtention()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select distinct extentionid,extentionname from fileextention");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select distinct extentionid,extentionname from fileextention");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_FileExtention Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_FileExtention Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_FileExtention_data(string searchCond)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select device_name,ou_longname,ip,e111filename,e111size,e111extension,convert(varchar,e111epochtime,103)+' ' +convert(varchar,e111epochtime,108) as Datetime from device_linkage dm, e111filehistory fh  where dm.device_id=fh.e111deviceid {0}", searchCond);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select device_name,ou_longname,ip,e111filename,e111size,e111extension,convert(varchar,e111epochtime,103)+' ' +convert(varchar,e111epochtime,108) as Datetime from device_linkage dm, e111filehistory fh  where dm.device_id=fh.e111deviceid {0}", searchCond);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_FileExtention_data Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_FileExtention_data Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public void add_FileExtention_data(string extentionname)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" insert into fileextention (extentionname) values('{0}')", extentionname);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" insert into fileextention (extentionname) values('{0}')", extentionname);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "add_FileExtention_data Query : " + strQuery.ToString());
                this.database.execute(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "add_FileExtention_data Exception : " + ex.Message.ToString());
            }

        }
        public bool check_FileExtention_data(string extentionname)
        {
            bool bl = false;
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select count(*) from fileextention where extentionname='{0}'", extentionname);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select count(*) from fileextention where extentionname='{0}'", extentionname);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "check_FileExtention_data Query : " + strQuery.ToString());
                int intCheck = this.database.getIntValue(strQuery.ToString());
                if (intCheck <= 0)
                    bl = true;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "check_FileExtention_data Exception : " + ex.Message.ToString());
            }
            return bl;
        }
        public void delete_FileExtention_data(string extentionname)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                extentionname = extentionname.Substring(1);
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" delete from fileextention where extentionname in ({0})", extentionname);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" delete from fileextention where extentionname in ({0})", extentionname);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "delete_FileExtention_data Query : " + strQuery.ToString());
                this.database.execute(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "delete_FileExtention_data Exception : " + ex.Message.ToString());
            }

        }
        public void apply_FileExtention_data(string extentionname, string deviceid, string transaction_id)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                //extentionname = extentionname.Substring(1);
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" insert into file_enum_master(device_id,file_extention,file_enum_status,file_enum_time,transaction_id) values({0},'{1}',0,getdate(),{2})", deviceid, extentionname, transaction_id);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" insert into file_enum_master(device_id,file_extention,file_enum_status,file_enum_time,transaction_id) values({0},'{1}',0,now(),{2})", deviceid, extentionname, transaction_id);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "apply_FileExtention_data Query : " + strQuery.ToString());
                this.database.execute(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "apply_FileExtention_data Exception : " + ex.Message.ToString());
            }

        }
        public DataTable Get_FileExtention_scanresult(string searchCond)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        //strQuery.AppendFormat(" select ou_longname ,device_name,ip,file_extention,convert(varchar,file_enum_time,105) + ' ' + convert(varchar,file_enum_time,108) as file_enum_time,case file_enum_status when 0 then 'Not Started' when 1 then 'Running' when 2 then 'Completed' end as status,file_enum_id from device_linkage dl, file_enum_master fem where dl.device_id = fem.device_id {0}", searchCond);
                        strQuery.AppendFormat(" select dl.device_id, ou_longname ,device_name,ip,file_extention,convert(varchar,file_enum_time,105) + ' ' + convert(varchar,file_enum_time,108) as file_enum_time,case file_enum_status when 0 then 'Not Started' when 1 then 'Running' when 2 then 'Completed' end as status,transaction_id as file_enum_id from device_linkage dl, file_enum_master fem where dl.device_id = fem.device_id {0}", searchCond);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select dl.device_id, ou_longname ,device_name,ip,file_extention,cast(date_format(file_enum_time,'%d-%m-%Y %H:%i:%s') as char) as file_enum_time,case file_enum_status when 0 then 'Not Started' when 1 then 'Running' when 2 then 'Completed' end as status,transaction_id as file_enum_id from device_linkage dl, file_enum_master fem where dl.device_id = fem.device_id {0}", searchCond);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_FileExtention_scanresult Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_FileExtention_scanresult Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_FileExtention_scanresult_data(string file_enum_id, string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        //strQuery.AppendFormat(" select e111extension, e111filename, e111size from e111filehistory where e111fileenumid= {0}", file_enum_id);
                        strQuery.AppendFormat(" select e111extension, e111filename,ROUND(e111size/1024,0) as e111size from e111filehistory where e111deviceid = {1} and e111transactionid= {0}", file_enum_id, deviceid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select e111extension, e111filename,ROUND(e111size/1024,0) as e111size from e111filehistory where e111deviceid = {1} and e111transactionid= {0};", file_enum_id, deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_FileExtention_scanresult_data Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_FileExtention_scanresult_data Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_FileExtention_scanresult_device(string file_enum_id, string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select ou_longname ,device_name,ip,convert(varchar,file_enum_time,105)+' ' +convert(varchar,file_enum_time,108) as file_enum_time from device_linkage dl left outer join file_enum_master fem on dl.device_id = fem.device_id where dl.device_id = {1} and transaction_id = {0} ", file_enum_id, deviceid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select ou_longname ,device_name,ip,cast(date_format(file_enum_time,'%d-%m-%Y %H:%i:%s') as char) as file_enum_time from device_linkage dl left outer join file_enum_master fem on dl.device_id = fem.device_id where dl.device_id = {1} and transaction_id = {0}", file_enum_id, deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_FileExtention_scanresult_device Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_FileExtention_scanresult_device Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        #endregion
        #region OU Management
        public string get_root_ouid()
        {
            string root_ouid = "";
            StringBuilder strQuery = new StringBuilder();
            try
            {

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select top 1 ou_nodelinkage_ouid from ou_nodelinkage where ou_nodelinkage_levelid=1 and ou_nodelinkage_active=1");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select ou_nodelinkage_ouid from ou_nodelinkage where ou_nodelinkage_levelid=1 and ou_nodelinkage_active=1 limit 1");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "get_root_ouid Query : " + strQuery.ToString());
                root_ouid = this.database.getValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "get_root_ouid Exception : " + ex.Message.ToString());
            }
            return root_ouid;
        }
        public DataTable Get_OU_Child_Data(string ou_id)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select ou_nodelinkage_ouid,ou_nodelinkage_nodename,ou_nodelinkage_longname,(select count(*) from ou_nodelinkage where ou_nodelinkage_active=1 and ou_nodelinkage_parentouid=nl.ou_nodelinkage_ouid) as childou,'0' as devicelinked  from ou_nodelinkage nl where ou_nodelinkage_active=1 and ou_nodelinkage_parentouid={0}", ou_id);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select ou_nodelinkage_ouid,ou_nodelinkage_nodename,ou_nodelinkage_longname,(select count(*) from ou_nodelinkage where ou_nodelinkage_active=1 and ou_nodelinkage_parentouid=nl.ou_nodelinkage_ouid) as childou,'0' as devicelinked  from ou_nodelinkage nl where ou_nodelinkage_active=1 and ou_nodelinkage_parentouid={0}", ou_id);
                        break;
                }
                data_table = this.database.getDataTable(strQuery.ToString());
                for (int i = 0; i < data_table.Rows.Count; i++)
                {
                    string childouid1 = "";
                    childouid1 = Get_OU_all_child_ids(data_table.Rows[i]["ou_nodelinkage_ouid"].ToString());
                    data_table.Rows[i]["devicelinked"] = Get_OU_all_child_ids_connected_devices(childouid1);
                }
                objcommon.WriteLog("DBQueryHandler", "Get_OU_Child_Data Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_OU_Child_Data Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_OU_self_Data(string ou_id)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select ou_nodelinkage_ouid, ou_nodelinkage_nodename,ou_nodelinkage_longname from ou_nodelinkage where ou_nodelinkage_ouid={0}", ou_id);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select ou_nodelinkage_ouid, ou_nodelinkage_nodename,ou_nodelinkage_longname from ou_nodelinkage where ou_nodelinkage_ouid={0}", ou_id);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_OU_self_Data Query : " + strQuery.ToString());

                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_OU_self_Data Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable getParentOUUID(string ou_id)
        {
            DataTable dt = new DataTable();
            StringBuilder strQuery = new StringBuilder();
            try
            {

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select ou_nodelinkage_parentouid,cast(ou_nodelinkage_ouid as varchar)+','+ou_nodelinkage_nodename as ouidouname from ou_nodelinkage where ou_nodelinkage_ouid={0}", ou_id);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select ou_nodelinkage_parentouid,concat(ou_nodelinkage_ouid,',',ou_nodelinkage_nodename) as ouidouname from ou_nodelinkage where ou_nodelinkage_ouid={0}", ou_id);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "getParentOUUID Query : " + strQuery.ToString());

                dt = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "getParentOUUID Exception : " + ex.Message.ToString());
            }
            return dt;
        }
        public DataTable Get_OU_linked_device_Data(string ou_id)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                string child_ou_id = ou_id;

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select ou_nodelinkage_allchild from ou_nodelinkage where ou_nodelinkage_ouid={0}", ou_id);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select ou_nodelinkage_allchild from ou_nodelinkage where ou_nodelinkage_ouid={0}", ou_id);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_OU_linked_device_Data Query : " + strQuery.ToString());
                child_ou_id = this.database.getValue(strQuery.ToString());
                strQuery.Clear();
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select device_id,device_name,ip from device_linkage where status <> -1 and device_mode in (1,2,3) and ou_id in ({0})", child_ou_id);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select device_id,device_name,ip from device_linkage where status <> -1 and device_mode in (1,2,3) and ou_id in ({0})", child_ou_id);
                        break;
                }
                data_table = this.database.getDataTable(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "Get_OU_linked_device_Data Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_OU_linked_device_Data Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public string unlink_devices_from_ou(string device_ids)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("update device_linkage set ou_id = (select top 1 ou_nodelinkage_ouid from ou_nodelinkage where ou_nodelinkage_levelid=3 and ou_nodelinkage_active=1),ou_node_name = (select top 1 ou_nodelinkage_nodename from ou_nodelinkage where ou_nodelinkage_levelid=3 and ou_nodelinkage_active=1),ou_longname = (select top 1 ou_nodelinkage_longname from ou_nodelinkage where ou_nodelinkage_levelid=3 and ou_nodelinkage_active=1) where device_id in ({0})", device_ids);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("update device_linkage set ou_id = (select top 1 ou_nodelinkage_ouid from ou_nodelinkage where ou_nodelinkage_levelid=3 and ou_nodelinkage_active=1),ou_node_name = (select top 1 ou_nodelinkage_nodename from ou_nodelinkage where ou_nodelinkage_levelid=3 and ou_nodelinkage_active=1),ou_longname = (select top 1 ou_nodelinkage_longname from ou_nodelinkage where ou_nodelinkage_levelid=3 and ou_nodelinkage_active=1) where device_id in ({0})", device_ids);
                        break;
                }
                this.database.execute(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "unlink_devices_from_ou Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "unlink_devices_from_ou Exception : " + ex.Message.ToString());
            }
            return "Unlink devices successfully";
        }
        public long get_max_ouid()
        {
            StringBuilder strQuery = new StringBuilder();
            long maxouid = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select max(ou_nodelinkage_ouid)+1 from ou_nodelinkage");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select max(ou_nodelinkage_ouid)+1 from ou_nodelinkage");
                        break;
                }
                maxouid = this.database.getLongValue(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "get_max_ouid Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "get_max_ouid Exception : " + ex.Message.ToString());
            }
            return maxouid;
        }
        public int get_levelid_of_ouid(string ou_id)
        {
            StringBuilder strQuery = new StringBuilder();
            int levelid = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select ou_nodelinkage_levelid from ou_nodelinkage where ou_nodelinkage_ouid = {0}", ou_id);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select ou_nodelinkage_levelid from ou_nodelinkage where ou_nodelinkage_ouid = {0}", ou_id);
                        break;
                }
                levelid = this.database.getIntValue(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "get_levelid_of_ouid Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "get_levelid_of_ouid Exception : " + ex.Message.ToString());
            }
            return levelid;
        }

        public int get_entity_levelid()
        {
            StringBuilder strQuery = new StringBuilder();
            int entity_levelid = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select max(ou_levelmaster_levelid) from ou_levelmaster");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select max(ou_levelmaster_levelid) from ou_levelmaster");
                        break;
                }
                entity_levelid = this.database.getIntValue(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "get_entity_levelid Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "get_entity_levelid Exception : " + ex.Message.ToString());
            }
            return entity_levelid;
        }

        public int insert_new_ou_branch_unit(string ou_id, string parent_ou_id, string levelid, string parent_levelid, string ou_name)
        {
            StringBuilder strQuery = new StringBuilder();
            int executed = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("insert into ou_nodelinkage(ou_nodelinkage_ouid,ou_nodelinkage_nodename,ou_nodelinkage_levelid,ou_nodelinkage_parentouid,ou_nodelinkage_parentlevelid,ou_nodelinkage_active) values({0},'{1}',{2},{3},{4},1)", ou_id, ou_name, levelid, parent_ou_id, parent_levelid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("insert into ou_nodelinkage(ou_nodelinkage_ouid,ou_nodelinkage_nodename,ou_nodelinkage_levelid,ou_nodelinkage_parentouid,ou_nodelinkage_parentlevelid,ou_nodelinkage_active) values({0},'{1}',{2},{3},{4},1)", ou_id, ou_name, levelid, parent_ou_id, parent_levelid);
                        break;
                }
                executed = this.database.execute(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "insert_new_ou_branch_unit Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "insert_new_ou_branch_unit Exception : " + ex.Message.ToString());
            }
            return executed;
        }

        public int insert_ouuserroll(string ou_id)
        {
            StringBuilder strQuery = new StringBuilder();
            int executed = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("insert into ou_userroll(ou_userroll_ou_id,ou_userroll_user_id) values({0},1)", ou_id);
                        break;
                }
                executed = this.database.execute(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "insert_ouuserroll Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "insert_ouuserroll Exception : " + ex.Message.ToString());
            }
            return executed;
        }
        public int execute_insallchild()
        {
            StringBuilder strQuery = new StringBuilder();
            int executed = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("exec insallchild");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("call insallchild");
                        break;
                }
                executed = this.database.execute(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "execute_insallchild Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "execute_insallchild Exception : " + ex.Message.ToString());
            }
            return executed;
        }
        public int execute_inslongname()
        {
            StringBuilder strQuery = new StringBuilder();
            int executed = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("exec inslogname");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("call inslogname");
                        break;
                }
                executed = this.database.execute(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "execute_inslongname Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "execute_inslongname Exception : " + ex.Message.ToString());
            }
            return executed;
        }
        public string Get_OU_all_child_ids(string ou_id)
        {
            string strAllChildOUID = "";
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select ou_nodelinkage_allchild from ou_nodelinkage where ou_nodelinkage_ouid={0}", ou_id);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select ou_nodelinkage_allchild from ou_nodelinkage where ou_nodelinkage_ouid={0}", ou_id);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_OU_all_child_ids Query : " + strQuery.ToString());
                strAllChildOUID = this.database.getValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_OU_all_child_ids Exception : " + ex.Message.ToString());
            }
            return strAllChildOUID;
        }
        public string Get_OU_all_child_ids_connected_devices(string ou_child_ids)
        {
            string AllChild_connected_devices = "";
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select count(*) from device_linkage where status <> -1 and device_mode in (1,2,3) and ou_id in ({0})", ou_child_ids);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select count(*) from device_linkage where status <> -1 and device_mode in (1,2,3) and ou_id in ({0})", ou_child_ids);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_OU_all_child_ids_connected_devices Query : " + strQuery.ToString());
                AllChild_connected_devices = this.database.getValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_OU_all_child_ids_connected_devices Exception : " + ex.Message.ToString());
            }
            return AllChild_connected_devices;
        }
        public DataTable Get_OU_unlinked_device_Data(string ou_id)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select dm.device_id,dm.device_name,dm.ip,dm.mac from device_master dm left outer join device_linkage dl on dm.device_id = dl.device_id where dm.device_mode in (1, 2, 3) and dm.device_id not in (select device_id from device_linkage where status <> -1 and device_mode in (1, 2, 3) and ou_id not in (select min(ou_nodelinkage_ouid) from ou_nodelinkage where ou_nodelinkage_levelid = 3))");
                        //strQuery.AppendFormat("select dm.device_id,dm.device_name,dm.ip,dm.mac from device_master dm left outer join device_linkage dl on dm.device_id=dl.device_id where dm.device_mode in (1,2,3)");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select dm.device_id,dm.device_name,dm.ip,dm.mac from device_master dm left outer join device_linkage dl on dm.device_id = dl.device_id where dm.device_mode in (1, 2, 3) and dm.device_id not in (select device_id from device_linkage where status <> -1 and device_mode in (1, 2, 3) and ou_id not in (select min(ou_nodelinkage_ouid) from ou_nodelinkage where ou_nodelinkage_levelid = 3))");
                        break;
                }
                data_table = this.database.getDataTable(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "Get_OU_unlinked_device_Data Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_OU_unlinked_device_Data Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public void insert_update_device_linkage(string device_ids, string ou_id)
        {
            string ou_name = "";
            string ou_long_name = "";
            device_ids = device_ids.Substring(1);
            DataTable dtOU = new DataTable();
            DataTable dtdevice = new DataTable();
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select ou_nodelinkage_nodename,ou_nodelinkage_longname from ou_nodelinkage where ou_nodelinkage_ouid={0}", ou_id);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select ou_nodelinkage_nodename,ou_nodelinkage_longname from ou_nodelinkage where ou_nodelinkage_ouid={0}", ou_id);
                        break;
                }
                dtOU = this.database.getDataTable(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "insert_update_device_linkage Query : " + strQuery.ToString());
                if (dtOU.Rows.Count > 0)
                {
                    ou_name = dtOU.Rows[0]["ou_nodelinkage_nodename"].ToString();
                    ou_long_name = dtOU.Rows[0]["ou_nodelinkage_longname"].ToString();
                }
                strQuery.Clear();
            }
            catch (Exception)
            {
            }
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select device_id, device_name,ip from device_master where device_id in ({0})", device_ids);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select device_id, device_name,ip from device_master where device_id in ({0})", device_ids);
                        break;
                }
                dtdevice = this.database.getDataTable(strQuery.ToString());
                strQuery.Clear();
                foreach (DataRow dr in dtdevice.Rows)
                {
                    if (check_device_exist_device_linkage(dr["device_id"].ToString()) > 0)
                    {
                        //exist device in device_linkage table
                        switch (dbtype)
                        {
                            case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                                strQuery.AppendFormat("update device_linkage set device_name='{0}',ip='{1}',ou_id={2} , ou_node_name='{3}', ou_longname='{4}' where device_id={5}", dr["device_name"].ToString(), dr["ip"].ToString(), ou_id, ou_name, ou_long_name, dr["device_id"].ToString());
                                break;
                            case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                                strQuery.AppendFormat("update device_linkage set device_name='{0}',ip='{1}',ou_id={2} , ou_node_name='{3}', ou_longname='{4}' where device_id={5}", dr["device_name"].ToString(), dr["ip"].ToString(), ou_id, ou_name, ou_long_name, dr["device_id"].ToString());
                                break;
                        }
                        this.database.execute(strQuery.ToString());
                        objcommon.WriteLog("DBQueryHandler", "insert_update_device_linkage Query : " + strQuery.ToString());
                        strQuery.Clear();
                    }
                    else
                    {
                        //not exist device in device_linkage table

                        switch (dbtype)
                        {
                            case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                                strQuery.AppendFormat("insert into device_linkage(device_id,device_name,ip,ou_id,ou_node_name,ou_longname,datetime) values({0},'{1}','{2}',{3},'{4}','{5}',getdate())", dr["device_id"].ToString(), dr["device_name"].ToString(), dr["ip"].ToString(), ou_id, ou_name, ou_long_name);
                                break;
                            case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                                strQuery.AppendFormat("insert into device_linkage(device_id,device_name,ip,ou_id,ou_node_name,ou_longname,datetime) values({0},'{1}','{2}',{3},'{4}','{5}',now())", dr["device_id"].ToString(), dr["device_name"].ToString(), dr["ip"].ToString(), ou_id, ou_name, ou_long_name);
                                break;
                        }
                        this.database.execute(strQuery.ToString());
                        objcommon.WriteLog("DBQueryHandler", "insert_update_device_linkage Query : " + strQuery.ToString());
                        strQuery.Clear();
                    }
                }
                strQuery.Clear();
            }
            catch (Exception)
            {
            }
        }
        public int check_device_exist_device_linkage(string device_id)
        {
            int cnt = 0;
            StringBuilder strQuery = new StringBuilder();
            try
            {

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select count(*) from device_linkage where device_id = {0}", device_id);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select count(*) from device_linkage where device_id = {0}", device_id);
                        break;
                }
                cnt = this.database.getIntValue(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "check_device_exist_device_linkage Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "check_device_exist_device_linkage Exception : " + ex.Message.ToString());
            }
            return cnt;
        }
        public DataTable Get_OU_unlinked_user_Data(string ou_id)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select user_id,user_name from user_master");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select user_id,user_name from user_master");
                        break;
                }
                data_table = this.database.getDataTable(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "Get_OU_unlinked_user_Data Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_OU_unlinked_user_Data Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public int link_user_with_ou_branch_unit(string ou_id, string user_ids)
        {
            StringBuilder strQuery = new StringBuilder();
            //string returndata = "";
            DataTable dtuser = new DataTable();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select user_id, user_name from user_master where user_id in ({0})", user_ids);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select user_id, user_name from user_master where user_id in ({0})", user_ids);
                        break;
                }
                dtuser = this.database.getDataTable(strQuery.ToString());
                strQuery.Clear();
                foreach (DataRow dr in dtuser.Rows)
                {
                    if (check_user_ouid(ou_id, dr["user_id"].ToString()) <= 0)
                    {
                        switch (dbtype)
                        {
                            case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                                strQuery.AppendFormat("insert into ou_userroll(ou_userroll_typeofrecord,ou_userroll_user_id,ou_userroll_typeofroll,ou_userroll_roll_desc,ou_userroll_ou_id,ou_userroll_active,ou_userroll_startdate) select 1,user_id,1,1,{0},1,getdate() from user_master where user_id in ({1})", ou_id, user_ids);
                                break;
                            case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                                strQuery.AppendFormat("insert into ou_userroll(ou_userroll_typeofrecord,ou_userroll_user_id,ou_userroll_typeofroll,ou_userroll_roll_desc,ou_userroll_ou_id,ou_userroll_active,ou_userroll_startdate) select 1,user_id,1,1,{0},1,getdate() from user_master where user_id in ({1})", ou_id, user_ids);
                                break;
                        }
                        result = this.database.execute(strQuery.ToString());
                        objcommon.WriteLog("DBQueryHandler", "link_user_with_ou_branch_unit Query : " + strQuery.ToString());
                        strQuery.Clear();
                    }
                }
                strQuery.Clear();
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "link_user_with_ou_branch_unit Exception : " + ex.Message.ToString());
            }
            return result;
        }

        public int check_user_ouid(string ou_id, string user_id)
        {
            int cnt = 0;
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select count(*) from ou_userroll where ou_userroll_ou_id = {0} and ou_userroll_user_id = {1} and ou_userroll_active=1", ou_id, user_id);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select count(*) from ou_userroll where ou_userroll_ou_id = {0} and ou_userroll_user_id = {1} and ou_userroll_active=1 ", ou_id, user_id);
                        break;
                }
                cnt = this.database.getIntValue(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "check_user_ouid Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "check_user_ouid Exception : " + ex.Message.ToString());
            }
            return cnt;
        }
        #endregion

        #region AgentReleaseLicence
        public DataTable Get_Agent_release_licence(string search, string searchdate)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select distinct dl.device_id,isnull(dl.device_name,dl.device_name) as systemname ,dl.ip,dl.ou_longname,convert(varchar,nu.last_poll_time,105)+' '+convert(varchar,nu.last_poll_time,108) as last_poll_time from device_linkage dl inner join node_user_info nu on dl.device_id=nu.device_id where dl.status<>-1 {0} {1} ", search, searchdate);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select distinct dl.device_id,ifnull(dl.device_name,dl.device_name) as systemname ,dl.ip,dl.ou_longname,DATE_FORMAT(nu.last_poll_time,'%d-%m-%Y %H:%i:%s') as last_poll_time from device_linkage dl inner join node_user_info nu on dl.device_id=nu.device_id where dl.status<>-1 {0} {1} ", search, searchdate);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Agent_release_licence Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Agent_release_licence Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        public int delete_Agent_release_licence(string deviceidlist, string uninstallmessage)
        {
            int result = 0;
            try
            {
                StringBuilder strQueryBuilder = new StringBuilder();

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQueryBuilder.AppendFormat("insert into query_log (device_id,query_msg,location_id) select device_id,'{0}',location_id from device_master where device_id= {1}", uninstallmessage, deviceidlist);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat("insert into query_log (device_id,query_msg,location_id) select device_id,'{0}',location_id from device_master where device_id ={1}", uninstallmessage, deviceidlist);
                        break;
                }

                string strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "delete_Agent_release_licence Query : " + strQuery);
                result = this.database.execute(strQuery);
                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "delete_Agent_release_licence Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public void Release_Agent_release_licence(string releasemessage, string deviceid)
        {
            // string strQuery = "";
            try
            {
                StringBuilder strQueryBuilder = new StringBuilder();
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        if (this.database.getIntValue("select count(*) from releaselicense where deviceID = " + deviceid) > 0)
                        {
                            this.database.execute("update ReleaseLicense SET DeleteDate = getdate() where deviceID = " + deviceid);
                        }
                        else
                        {
                            this.database.execute("insert into releaselicense (deviceID,IssueDate,DeleteDate) values (" + deviceid + ",getdate(),getdate())");
                        }
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        if (this.database.getIntValue("select count(*) from releaselicense where deviceID = " + deviceid) > 0)
                        {
                            this.database.execute("update releaselicense SET DeleteDate = now() where deviceID = " + deviceid);
                        }
                        else
                        {
                            this.database.execute("INSERT INTO releaselicense (deviceID,IssueDate,DeleteDate) VALUES (" + deviceid + ",now(),now())");
                        }
                        break;
                }
                strQueryBuilder.Clear();
                //switch (dbtype)
                //{
                //    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                //        strQueryBuilder.AppendFormat("insert into query_log (device_id,query_msg,location_id) select device_id,'{0}',location_id from device_master where device_id in ({1})", releasemessage, deviceidlist);
                //        break;
                //    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                //        strQueryBuilder.AppendFormat("insert into query_log (device_id,query_msg,location_id) select device_id,'{0}',location_id from device_master where device_id in ({1})", releasemessage, deviceidlist);
                //        break;
                //}
                //this.database.execute(strQuery.ToString());
                //strQueryBuilder.Clear();
                //switch (dbtype)
                //{
                //    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                //        strQueryBuilder.AppendFormat("delete from C009DTLNodeInstlStat where C009DeviceID = (select device_id from new_device_details where allocated_deviceid='{0}')", deviceid);
                //        break;
                //    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                //        strQueryBuilder.AppendFormat("delete from C009DTLNodeInstlStat where C009DeviceID = (select device_id from new_device_details where allocated_deviceid='{0}')", deviceid);
                //        break;
                //}
                //this.database.execute(strQuery.ToString());
                //strQueryBuilder.Clear();
                //switch (dbtype)
                //{
                //    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                //        strQueryBuilder.AppendFormat("delete from device_alert_info where device_id ='{0}')", deviceid);
                //        break;
                //    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                //        strQueryBuilder.AppendFormat("delete from device_alert_info where device_id ='{0}')", deviceid);
                //        break;
                //}
                //this.database.execute(strQuery.ToString());
                //strQueryBuilder.Clear();
                //switch (dbtype)
                //{
                //    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                //        strQueryBuilder.AppendFormat("delete from device_performance_trends where device_id ='{0}')", deviceid);
                //        break;
                //    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                //        strQueryBuilder.AppendFormat("delete from device_performance_trends where device_id ='{0}')", deviceid);
                //        break;
                //}
                //this.database.execute(strQuery.ToString());
                //strQueryBuilder.Clear();
                //switch (dbtype)
                //{
                //    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                //        strQueryBuilder.AppendFormat("delete from device_performance_trends_HISTORY where device_id ='{0}')", deviceid);
                //        break;
                //    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                //        strQueryBuilder.AppendFormat("delete from device_performance_trends_HISTORY where device_id ='{0}')", deviceid);
                //        break;
                //}
                //this.database.execute(strQuery.ToString());
                //strQueryBuilder.Clear();
                //switch (dbtype)
                //{
                //    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                //        strQueryBuilder.AppendFormat("delete from e101dtlusergroup where E101DeviceID ='{0}'", deviceid);
                //        break;
                //    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                //        strQueryBuilder.AppendFormat("delete from e101dtlusergroup where E101DeviceID ='{0}'", deviceid);
                //        break;
                //}
                //this.database.execute(strQueryBuilder.ToString());
                //strQueryBuilder.Clear();
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQueryBuilder.AppendFormat("delete from e111filehistory where E111DeviceID ='{0}'", deviceid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat("delete from e111filehistory where E111DeviceID ='{0}'", deviceid);
                        break;
                }
                this.database.execute(strQueryBuilder.ToString());
                strQueryBuilder.Clear();
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQueryBuilder.AppendFormat("delete from query_log where Device_id ='{0}'", deviceid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat("delete from query_log where Device_id ='{0}'", deviceid);
                        break;
                }
                this.database.execute(strQueryBuilder.ToString());
                strQueryBuilder.Clear();
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQueryBuilder.AppendFormat("delete from User_table where Device_ID ='{0}'", deviceid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat("delete from User_table where Device_ID ='{0}'", deviceid);
                        break;
                }
                this.database.execute(strQueryBuilder.ToString());
                strQueryBuilder.Clear();
                //switch (dbtype)
                //{
                //    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                //        strQueryBuilder.AppendFormat("delete from device_url_master where Device_ID='{0}')", deviceid);
                //        break;
                //    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                //        strQueryBuilder.AppendFormat("delete from device_url_master where Device_ID ='{0}')", deviceid);
                //        break;
                //}
                //this.database.execute(strQuery.ToString());
                //strQueryBuilder.Clear();
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQueryBuilder.AppendFormat("delete from node_audit_trail where Device_ID='{0}'", deviceid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat("delete from node_audit_trail where Device_ID ='{0}'", deviceid);
                        break;
                }
                this.database.execute(strQueryBuilder.ToString());
                strQueryBuilder.Clear();
                //switch (dbtype)
                //{
                //    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                //        strQueryBuilder.AppendFormat("delete from device_popup_alert where device_id='{0}')", deviceid);
                //        break;
                //    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                //        strQueryBuilder.AppendFormat("delete from device_popup_alert where device_id ='{0}')", deviceid);
                //        break;
                //}
                //this.database.execute(strQuery.ToString());
                //strQueryBuilder.Clear();
                //switch (dbtype)
                //{
                //    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                //        strQueryBuilder.AppendFormat("DELETE from device_alert_history where device_id='{0}')", deviceid);
                //        break;
                //    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                //        strQueryBuilder.AppendFormat("DELETE from device_alert_history where device_id ='{0}')", deviceid);
                //        break;
                //}
                //this.database.execute(strQuery.ToString());
                //strQueryBuilder.Clear();
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQueryBuilder.AppendFormat("delete from node_user_info where device_id='{0}'", deviceid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat("delete from node_user_info where device_id ='{0}'", deviceid);
                        break;
                }
                this.database.execute(strQueryBuilder.ToString());
                strQueryBuilder.Clear();
                //switch (dbtype)
                //{
                //    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                //        strQueryBuilder.AppendFormat("DELETE from node_general_info where device_id='{0}'", deviceid);
                //        break;
                //    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                //        strQueryBuilder.AppendFormat("DELETE from node_general_info where device_id ='{0}'", deviceid);
                //        break;
                //}
                //this.database.execute(strQueryBuilder.ToString());
                //strQueryBuilder.Clear();
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQueryBuilder.AppendFormat("update new_device_details set status = null,snmp_enabled=0,agent_enabled=0,device_mode=0,device_action=null,allocated_deviceid=null where allocated_deviceid='{0}'", deviceid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat("update new_device_details set status = null,snmp_enabled=0,agent_enabled=0,device_mode=0,device_action=null,allocated_deviceid=null where allocated_deviceid='{0}'", deviceid);
                        break;
                }
                this.database.execute(strQueryBuilder.ToString());
                strQueryBuilder.Clear();
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQueryBuilder.AppendFormat("delete from device_master where device_id ='{0}'", deviceid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat("delete from device_master where device_id  ='{0}'", deviceid);
                        break;
                }
                this.database.execute(strQueryBuilder.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Release_Agent_release_licence Exception : " + ex.Message.ToString());
            }

        }
        #endregion
        #region csat updater
        public DataTable csat_updater_all_task_data()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select utm.task_id,utm.task_name,utm.task_desc,count(utd.job_id) as activity,(select count(distinct device_id) from update_task_applied where task_id=utm.task_id) as applyon ,(select count(distinct device_id) from update_task_applied where task_id=utm.task_id and job_status=2) as appliedsuccess  from update_task_master utm left outer join update_task_details utd on utm.task_id=utd.task_id group by utm.task_id,utm.task_name,utm.task_desc");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select utm.task_id,utm.task_name,utm.task_desc,count(utd.job_id) as activity,(select count(distinct device_id) from update_task_applied where task_id=utm.task_id) as applyon ,(select count(distinct device_id) from update_task_applied where task_id=utm.task_id and job_status=2) as appliedsuccess  from update_task_master utm left outer join update_task_details utd on utm.task_id=utd.task_id group by utm.task_id,utm.task_name,utm.task_desc");
                        break;
                }
                data_table = this.database.getDataTable(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "csat_updater_all_task_data_query Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "csat_updater_all_task_data_query Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public int csat_updater_check_task_exist(string task_name)
        {
            StringBuilder strQuery = new StringBuilder();
            int returncnt = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select count(*) from update_task_master where task_name='{0}'", task_name);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select count(*) from update_task_master where task_name='{0}'", task_name);
                        break;
                }
                returncnt = this.database.getIntValue(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "csat_updater_check_task_exist Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "csat_updater_check_task_exist Exception : " + ex.Message.ToString());
            }
            return returncnt;
        }
        public int csat_updater_add_new_task(string task_name, string task_desc)
        {
            StringBuilder strQuery = new StringBuilder();
            int returncnt = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("insert into update_task_master (task_name,task_desc,create_date) values('{0}','{1}',getdate())", task_name, task_desc);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("insert into update_task_master (task_name,task_desc,create_date) values('{0}','{1}',now())", task_name, task_desc);
                        break;
                }
                returncnt = this.database.execute(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "csat_updater_add_new_task Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "csat_updater_add_new_task Exception : " + ex.Message.ToString());
            }
            return returncnt;
        }
        public DataTable csat_updater_open_activity_new(string task_id)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select task_id,task_name from update_task_master where task_id={0}", task_id);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select task_id,task_name from update_task_master where task_id={0}", task_id);
                        break;
                }
                data_table = this.database.getDataTable(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "csat_updater_open_activity_new Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "csat_updater_open_activity_new Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public int csat_updater_add_activity_new(string task_id, string tasktype, string DownloadURL_32, string DownloadURL_64, string intFileSize_32, string intFileSize_64, string command_32, string command_64, string destination_path_32, string destination_path_64, string LocalFilePath_32, string LocalFilePath_64, string working_directory, string source_folder_path, string source_filename, string server_folder_path, string server_filename)
        {
            StringBuilder strQuery = new StringBuilder();
            int cnt = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("insert into update_task_details(task_id,task_type,download_url_32,download_url_64,download_size_32,download_size_64,task_param_32,task_param_64,update_date,destination_path_32,destination_path_64,localpath_32,localpath_64,working_directory,source_folder_path,source_filename,server_folder_path,server_filename) values({0},{1},'{2}','{3}','{4}','{5}','{6}','{7}',getdate(),'{8}','{9}','{10}','{11}','{12}','{13}','{14}','{15}','{16}')", task_id, tasktype, DownloadURL_32, DownloadURL_64, intFileSize_32, intFileSize_64, command_32, command_64, destination_path_32, destination_path_64, LocalFilePath_32, LocalFilePath_64, working_directory, source_folder_path, source_filename, server_folder_path, server_filename);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("insert into update_task_details(task_id,task_type,download_url_32,download_url_64,download_size_32,download_size_64,task_param_32,task_param_64,update_date,destination_path_32,destination_path_64,localpath_32,localpath_64,working_directory,source_folder_path,source_filename,server_folder_path,server_filename) values({0},{1},'{2}','{3}','{4}','{5}','{6}','{7}',now(),'{8}','{9}','{10}','{11}','{12}','{13}','{14}','{15}','{16}')", task_id, tasktype, DownloadURL_32, DownloadURL_64, intFileSize_32, intFileSize_64, command_32, command_64, destination_path_32, destination_path_64, LocalFilePath_32, LocalFilePath_64, working_directory, source_folder_path, source_filename, server_folder_path, server_filename);
                        break;
                }
                cnt = this.database.execute(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "csat_updater_add_activity_new Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "csat_updater_add_activity_new Exception : " + ex.Message.ToString());
            }
            return cnt;
        }
        public DataTable csat_updater_open_activity_show(string task_id)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select case task_type when 1 then 'Download' when 2 then 'Execute Command' end as task_type,download_url_32,download_url_64,cast(download_size_32 as bigint)/1024 as download_size_32,cast(download_size_64 as bigint)/1024 as download_size_64,destination_path_32,destination_path_64,task_param_32,task_param_64  from update_task_details where task_id={0}", task_id);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select case task_type when 1 then 'Download' when 2 then 'Execute Command' end as task_type,download_url_32,download_url_64,cast(download_size_32 as bigint)/1024 as download_size_32,cast(download_size_64 as bigint)/1024 as download_size_64,destination_path_32,destination_path_64,task_param_32,task_param_64  from update_task_details where task_id={0}", task_id);
                        break;
                }
                data_table = this.database.getDataTable(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "csat_updater_open_activity_show Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "csat_updater_open_activity_show Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable csat_updater_open_activity_devices()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select updater_device_id,device_name,mac,ip from ownyiteeupdaterdevicemaster");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select updater_device_id,device_name,mac,ip from ownyiteeupdaterdevicemaster");
                        break;
                }
                data_table = this.database.getDataTable(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "csat_updater_open_activity_devices Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "csat_updater_open_activity_devices Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable csat_updater_open_activity_devices(string search_cond)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select updater_device_id,device_name,mac,ip from ownyiteeupdaterdevicemaster {0}", search_cond);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select updater_device_id,device_name,mac,ip from ownyiteeupdaterdevicemaster {0}", search_cond);
                        break;
                }
                data_table = this.database.getDataTable(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "csat_updater_open_activity_devices Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "csat_updater_open_activity_devices Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public string csat_updater_task_apply_on_devices(string task_id, string device_ids)
        {
            string strreturn = "";
            StringBuilder strQuery = new StringBuilder();
            try
            {
                string[] strdeviceidarr = device_ids.Split(',');
                for (int i = 0; i < strdeviceidarr.Length; i++)
                {
                    switch (dbtype)
                    {
                        case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                            strQuery.AppendFormat("insert into update_task_applied(task_id,device_id,job_id,job_status,applied_date,sent_to_client) select task_id,{0},job_id,0,getdate(),0 from update_task_details where task_id={1}", strdeviceidarr[i].ToString(), task_id);
                            break;
                        case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                            strQuery.AppendFormat("insert into update_task_applied(task_id,device_id,job_id,job_status,applied_date,sent_to_client) select task_id,{0},job_id,0,now(),0 from update_task_details where task_id={1}", strdeviceidarr[i].ToString(), task_id);
                            break;
                    }
                    this.database.execute(strQuery.ToString());
                    objcommon.WriteLog("DBQueryHandler", "csat_updater_task_apply_on_devices Query : " + strQuery.ToString());
                    strQuery.Clear();
                }
                strreturn = "Task applied successfully";
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "csat_updater_task_apply_on_devices Exception : " + ex.Message.ToString());
                strreturn = "Task not apply successfully";
            }
            return strreturn;
        }
        public DataTable csat_updater_apply_on_device(string task_id)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select device_name,ip,mac from ownyiteeupdaterdevicemaster where Updater_device_id in (select distinct device_id from update_task_applied where task_id={0})", task_id);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select device_name,ip,mac from ownyiteeupdaterdevicemaster where Updater_device_id in (select distinct device_id from update_task_applied where task_id={0})", task_id);
                        break;
                }
                data_table = this.database.getDataTable(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "csat_updater_apply_on_device Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "csat_updater_apply_on_device Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable csat_updater_apply_success_device(string task_id)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select device_name,ip,mac from ownyiteeupdaterdevicemaster where Updater_device_id in (select distinct device_id from update_task_applied where task_id={0} and job_status=2)", task_id);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select device_name,ip,mac from ownyiteeupdaterdevicemaster where Updater_device_id in (select distinct device_id from update_task_applied where task_id={0} and job_status=2)", task_id);
                        break;
                }
                data_table = this.database.getDataTable(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "csat_updater_apply_success_device Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "csat_updater_apply_success_device Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public int csat_updater_delete_task(string task_id)
        {
            int intret = 0;
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("delete from update_task_applied where task_id={0}", task_id);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("delete from update_task_applied where task_id={0}", task_id);
                        break;
                }
                intret = this.database.execute(strQuery.ToString());

                strQuery.Clear();
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("delete from update_task_details where task_id={0}", task_id);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("delete from update_task_details where task_id={0}", task_id);
                        break;
                }
                intret = this.database.execute(strQuery.ToString());

                strQuery.Clear();
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("delete from update_task_master where task_id={0}", task_id);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("delete from update_task_master where task_id={0}", task_id);
                        break;
                }
                intret = this.database.execute(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "csat_updater_delete_task Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "csat_updater_delete_task Exception : " + ex.Message.ToString());
            }
            return intret;
        }
        #endregion
        #region Apply policy report
        public DataTable Get_PolicyType()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select * from policy_type_master");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:

                        strQuery.AppendFormat("select * from policy_type_master");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_PolicyType Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_PolicyType Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        public DataTable Get_policy_data_report(string search, string startdate, string enddate)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        //strQuery.AppendFormat(" select ou_id,device_id,isnull(device_name,'') as device_name,isnull(ip,'') as ip,isnull(ouname,(select top 1 ou_nodelinkage_longname from ou_nodelinkage where ou_nodelinkage_ouid=ou_id)) as ouname,policy_apply_on,policy_name,status,policy_type from (select pm.policy_id,(select top 1 ou_nodelinkage_longname from ou_nodelinkage where ou_nodelinkage_ouid=plm.ou_id) as ouname,case ou_id when 0 then (select ou_id from device_linkage where device_id=plm.device_id) else ou_id end as ou_id,(select top 1 device_name from device_master where device_id=plm.device_id) as device_name,(select top 1 ip from device_master where device_id=plm.device_id) as ip,device_id,user_name,pm.policy_name,ptm.policy_type ,case pm.status when '1' then 'Active' when '2' then 'Deactive'end as status,convert(varchar,plm.start_date,103)+' '+convert(varchar,plm.start_date,108) as policy_apply_on from policy_linkage_master plm, policy_master pm , policy_type_master ptm where plm.policy_id=pm.policy_id and status=1 and pm.policy_type=ptm.policy_type_id  and  plm.start_date > '{0}' and  plm.start_date < '{1}') T {2} ", startdate, enddate, search);
                        strQuery.AppendFormat(" select dl.ou_id, dl.ou_longname as ouname,dl.device_name, dl.ip,plm.device_id,pm.policy_id, pm.policy_name,convert(varchar,plm.start_date,105)+ ' ' + convert(varchar,plm.start_date,108)as policy_apply_on,case pm.status when '1' then 'Active' when '2' then 'Deactive' end as status from policy_linkage_master plm inner join device_linkage dl on dl.device_id=plm.device_id left outer join policy_master pm on pm.policy_id=plm.policy_id {2}", startdate, enddate, search);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        //strQuery.AppendFormat(" select ou_id,device_id,ifnull(device_name,'') as device_name,ifnull(ip,'') as ip,ifnull(ouname,(select ou_nodelinkage_longname from ou_nodelinkage where ou_nodelinkage_ouid=ou_id limit 1)) as ouname,policy_apply_on,policy_name,status,policy_type from (select pm.policy_id,(select ou_nodelinkage_longname from ou_nodelinkage where ou_nodelinkage_ouid=plm.ou_id limit 1) as ouname,case ou_id when 0 then (select ou_id from device_linkage where device_id=plm.device_id) else ou_id end as ou_id,(select device_name from device_master where device_id=plm.device_id limit 1) as device_name,(select ip from device_master where device_id=plm.device_id limit 1) as ip,device_id,user_name,pm.policy_name,ptm.policy_type ,case pm.status when '1' then 'Active' when '2' then 'Deactive'end as status,cast(date_format(plm.start_date,'%d/%m/%Y %H:%i:%s') as char)as policy_apply_on from policy_linkage_master plm, policy_master pm , policy_type_master ptm where plm.policy_id=pm.policy_id and status=1 and pm.policy_type=ptm.policy_type_id  and  plm.start_date > '{0}' and  plm.start_date < '{1}') T {2} ", startdate, enddate, search);
                        strQuery.AppendFormat(" select dl.ou_id, dl.ou_longname as ouname,dl.device_name, dl.ip,plm.device_id,pm.policy_id, pm.policy_name,cast(date_format(plm.start_date,'%d-%m-%Y %H:%i:%s') as char)as policy_apply_on,case pm.status when '1' then 'Active' when '2' then 'Deactive' end as status from policy_linkage_master plm inner join device_linkage dl on dl.device_id=plm.device_id left outer join policy_master pm on pm.policy_id=plm.policy_id {2}", startdate, enddate, search);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_policy_data_report Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_policy_data_report Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        #endregion

        #region DCM
        public DataTable Get_DCM_Policy()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        //strQuery.AppendFormat("select distinct pm.policy_id,policy_name,count(ap.e120policyid) as count from policy_master pm left outer join ");
                        //strQuery.AppendFormat(" e120applypolicy ap on pm.policy_id=ap.e120policyid where policy_type=16 group by pm.policy_id,policy_name ");
                        strQuery.AppendFormat(" select T.policy_id,T.policy_name,T.policy_details,count(S.device_id) as count from(select pm.policy_id, pm.policy_name, pm.policy_details from policy_linkage pl, policy_master pm where pl.policy_id = pm.policy_id and pm.policy_type=16");
                        strQuery.AppendFormat(" group by pm.policy_id,pm.policy_name,pm.policy_details) T left outer join (select distinct dl.device_id, policy_id from device_linkage dl inner join deployment_linkage_master dlm on dl.device_id = dlm.device_id and dl.device_mode in (1,2,3)) S on T.policy_id = S.policy_id group by T.policy_id,T.policy_name,T.policy_details order by T.policy_id desc ");
                        break;

                }
                data_table = this.database.getDataTable(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "Get_DCM_Policy Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_DCM_Policy Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        public void Add_ParameterMasterData()
        {
            StringBuilder strQueryBuilder = new StringBuilder();
            string strHardware = "";
            string strProcessor = "";
            string strSoftware = "";
            string strOS = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        if (Convert.ToInt16(this.database.getIntValue(" select count(*) from parameter_master where parameter_type=11 and parameter_name in('Ram')")) <= 0)
                            strHardware += " select 11,'Ram','Ram',null,null,'GB' union all";
                        if (Convert.ToInt16(this.database.getIntValue(" select count(*) from parameter_master where parameter_type=11 and parameter_name in('HardDisk')")) <= 0)
                            strHardware += " select 11,'HardDisk','HardDisk',null,null,'GB' union all";
                        if (Convert.ToInt16(this.database.getIntValue(" select count(*) from parameter_master where parameter_type=11 and parameter_name in('CDDrive')")) <= 0)
                            strHardware += " select 11,'CDDrive','CDDrive','1',null,null union all";
                        if (Convert.ToInt16(this.database.getIntValue(" select count(*) from parameter_master where parameter_type=11 and parameter_name in('LAN')")) <= 0)
                            strHardware += " select 11,'LAN','LAN','1',null,null union all";
                        if (Convert.ToInt16(this.database.getIntValue(" select count(*) from parameter_master where parameter_type=11 and parameter_name in('WIFI')")) <= 0)
                            strHardware += " select 11,'WIFI','WIFI','1',null,null union all";
                        if (Convert.ToInt16(this.database.getIntValue(" select count(*) from parameter_master where parameter_type=11 and parameter_name in('Antivirus')")) <= 0)
                            strHardware += " select 11,'Antivirus','Antivirus','1',null,null union all";
                        if (strHardware != "")
                        {
                            strHardware = strHardware.Substring(0, strHardware.Length - 9);
                            strHardware = " insert into parameter_master (parameter_type,parameter_name,parameter_value,warning_threshold,error_threshold,unit) " + strHardware;
                        }
                        if (strHardware.Length > 0)
                        {
                            this.database.execute(strHardware);
                        }
                        objcommon.WriteLog("DBQueryHandler", "Add_ParameterMasterData Query : " + strHardware);

                        strProcessor = "insert into parameter_master (parameter_type,parameter_name,parameter_value,warning_threshold,interval_value,value)";
                        //strProcessor += " select  distinct 11,'PROCESSOR','PROCESSOR',null,11,CPU from node_general_info ng,device_linkage dl where ng.device_id=dl.device_id ";
                        //strProcessor += " and dl.status<>-1 and cpu not in (select distinct value from parameter_master where parameter_type=11 and parameter_value='Processor') order by cpu ";
                        strProcessor += " select  distinct 11,'PROCESSOR','PROCESSOR',null,11,details from node_hardware_info ng inner join device_linkage dl on ng.device_id=dl.device_id ";
                        strProcessor += " and dl.status<>-1 and hardware_class='PROCESSOR' and details not in (select distinct value from parameter_master where parameter_type=11 and parameter_value='Processor') order by details ";

                        this.database.execute(strProcessor);
                        objcommon.WriteLog("DBQueryHandler", "Add_ParameterMasterData Processsor Query : " + strProcessor);

                        strSoftware = "insert into parameter_master (parameter_type,parameter_name,parameter_value,warning_threshold,interval_value,value)";
                        strSoftware += " select  distinct 12,'Software','Software',1 as warning_threshold,12,software from nodesoftwaredetails ng,device_linkage dl where ng.deviceid=dl.device_id ";
                        strSoftware += " and dl.status<>-1 and software not in(select distinct value from parameter_master where parameter_type=12)";
                        this.database.execute(strSoftware);
                        objcommon.WriteLog("DBQueryHandler", "Add_ParameterMasterData Software Query : " + strSoftware);

                        strOS = "insert into parameter_master (parameter_type,parameter_name,parameter_value,warning_threshold,interval_value,value)";
                        strOS += " select  distinct 13,'OS','OS',1,13,data1 from node_system_info ng inner join device_linkage dl on ng.device_id=dl.device_id ";
                        strOS += " where dl.status<>-1  and ng.data_type=8 and ng.data_subtype=1 and data1 not in(select distinct value from parameter_master where parameter_type=13) order by data1";
                        this.database.execute(strOS);
                        objcommon.WriteLog("DBQueryHandler", "Add_ParameterMasterData OS Query : " + strOS);
                        break;
                }
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Add_ParameterMasterData Exception : " + ex.Message.ToString());
            }
        }

        public DataTable Get_ParameterProcessorData()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select parameter_value from node_system_info_details where type_name='Processor' and parameter_name='PROCESSORNAME'");
                        break;
                }
                data_table = this.database.getDataTable(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "Get_ParameterProcessorData Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_ParameterProcessorData Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        public DataTable Get_ParameterOSData()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select distinct parameter_value as value from node_system_info_details where type_id=8 and parameter_name='caption' ");
                        break;
                }
                data_table = this.database.getDataTable(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "Get_ParameterOSData Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_ParameterOSData Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        public DataTable Get_ParameterSoftwareData(string search)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select distinct software from node_software_info {0}", search);
                        break;
                }
                data_table = this.database.getDataTable(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "Get_ParameterSoftwareData Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_ParameterSoftwareData Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        public int checkdcmpolicycount(string policyname)
        {
            StringBuilder strQueryBuilder = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat("select count(policy_name) from policy_master where policy_type=11 and policy_name='" + policyname + "'");
                        break;
                }

                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "checkdcmpolicycount Query : " + strQuery);
                result = this.database.getIntValue(strQuery);
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "checkdcmpolicycount Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int checkdcmrulescount(string rulesname, string type, string subtype)
        {
            StringBuilder strQueryBuilder = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat("select count(rules_name) from rules_master where rules_name='" + rulesname + "' and type=" + type + " and subtype=" + subtype + " ", rulesname, type, subtype);
                        break;
                }

                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "checkdcmrulescount Query : " + strQuery);
                result = this.database.getIntValue(strQuery);
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "checkdcmrulescount Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public DataTable Get_Parametervaluesforadd()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select parameter_id,parameter_type,parameter_value,null,null,unit,value,interval_value from parameter_master where parameter_type=11 and parameter_value in('ram','harddisk','cddrive','lan','wifi','antivirus') union all");
                        strQuery.AppendFormat(" select top 1 parameter_id,parameter_type,parameter_value,warning_threshold,error_threshold,unit,value,interval_value from parameter_master where parameter_type=11 and parameter_value in('processor')");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select parameter_id,parameter_type,parameter_value,warning_threshold,error_threshold,unit,value,interval_value from parameter_master where parameter_type=11 and parameter_value in('PROCESSOR') limit 1  union all");
                        strQuery.AppendFormat(" select parameter_id,parameter_type,parameter_value,null,null,unit,value,interval_value from parameter_master where parameter_type=11 and parameter_value in('Ram','HardDisk','CDDrive','LAN','WIFI','Antivirus') ");
                        break;
                }
                data_table = this.database.getDataTable(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "Get_Parametervaluesforadd Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Parametervaluesforadd Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_DCMpolicy_data(string applypolicyid)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select * from policy_parameter_relation where policy_id={0}", applypolicyid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select * from policy_parameter_relation where policy_id={0}", applypolicyid);
                        break;
                }
                data_table = this.database.getDataTable(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "Get_DCMpolicy_data Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_DCMpolicy_data Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_softwarelist_data(string applypolicyid)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select value from policy_parameter_relation where parameter_value='SOFTWARE' and  policy_id={0}", applypolicyid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select value from policy_parameter_relation where parameter_value='SOFTWARE' and  policy_id={0}", applypolicyid);
                        break;
                }
                data_table = this.database.getDataTable(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "Get_DCMpolicy_data Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_DCMpolicy_data Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public string add_dcmrampolicy(string paramid, string paramnum, string paramtype, string paramvalue, string paramunit, string processorvalue, string action)
        {
            string strquery = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strquery = " insert into policy_parameter_relation (policy_id,parameter_id,parameter_type,parameter_value,warning_threshold,unit,interval_value,value,action) ";
                        strquery += " select max(policy_id)," + paramid + "," + paramnum + ",'" + paramtype + "','" + paramvalue + "','" + paramunit + "'," + paramnum + ",'" + processorvalue + "','" + action + "' from policy_master where policy_type=11;";
                        break;
                }

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "add_dcmrampolicy Exception : " + ex.Message.ToString());
            }
            return strquery;
        }
        public int Apply_dcm_policy(string deviceidlist, string strquerymsg)
        {
            int result = 0;
            try
            {
                StringBuilder strQueryBuilder = new StringBuilder();

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQueryBuilder.AppendFormat("insert into query_log (device_id,query_msg,location_id) select device_id,'{0}',location_id from device_master where device_id= {1}", strquerymsg, deviceidlist);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat("insert into query_log (device_id,query_msg,location_id) select device_id,'{0}',location_id from device_master where device_id ={1}", strquerymsg, deviceidlist);
                        break;
                }

                string strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "Apply_dcm_policy Query : " + strQuery);
                result = this.database.execute(strQuery);
                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "delete_Agent_release_licence Exception : " + ex.Message.ToString());
            }
            return result;
        }

        public string edit_dcmrampolicy(string editpolicyid, string paramid, string paramnum, string paramtype, string paramvalue, string paramunit, string processorvalue, string dcmaction)
        {
            string strquery = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strquery = " insert into policy_parameter_relation (policy_id,parameter_id,parameter_type,parameter_value,warning_threshold,unit,interval_value,value,action) ";
                        strquery += " select " + editpolicyid + "," + paramid + "," + paramnum + ",'" + paramtype + "','" + paramvalue + "','" + paramunit + "'," + paramnum + ",'" + processorvalue + "','" + dcmaction + "' from policy_master where policy_type=11 and policy_id=" + editpolicyid + "";
                        break;
                }

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "edit_dcmrampolicy Exception : " + ex.Message.ToString());
            }
            return strquery;
        }

        public int execute_dcmpolicy(string policyname, string sql)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("  begin insert into policy_master (policy_name,policy_type) values ('" + policyname + "',11) " + sql + " end  ");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" insert into policy_master (policy_name,policy_type) values ('" + policyname + "',11); " + sql);
                        break;
                }

                objcommon.WriteLog("DBQueryHandler", "execute_dcmpolicy Query : " + strQuery);
                result = this.database.execute(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "execute_dcmpolicy Exception : " + ex.Message.ToString());
            }
            return result;
        }

        // Edit template Details
        public DataTable Get_DCMTemplatedetails(string edittempid)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select * from policy_parameter_relation where parameter_type in (11,12,13) and policy_id={0}", edittempid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_DCMTemplatedetails Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_DCMTemplatedetails Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        public DataTable Get_DCMParameterProcessorData(string edittempid)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select pm.value,pm.parameter_id, case when pr.parameter_id is null then ' ' else 'checked' end as 'pmid' from parameter_master pm left outer join policy_parameter_relation pr");
                        strQuery.AppendFormat(" on pm.parameter_id= pr.parameter_id and pm.parameter_type=pr.parameter_type and pr.policy_id={0} where pm.parameter_type=11  and pm.parameter_value ='PROCESSOR' ", edittempid);
                        break;
                }
                data_table = this.database.getDataTable(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "Get_DCMParameterProcessorData Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_DCMParameterProcessorData Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_DCMParameterOSData(string edittempid)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select pm.value,pm.parameter_id, case when pr.parameter_id is null then ' ' else 'checked' end as 'pmid' from parameter_master pm left outer join policy_parameter_relation pr");
                        strQuery.AppendFormat(" on pm.parameter_id= pr.parameter_id and pm.parameter_type=pr.parameter_type and pr.policy_id={0} where pm.parameter_type=13  and pm.parameter_value ='OS' ", edittempid);
                        break;
                }
                data_table = this.database.getDataTable(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "Get_DCMParameterOSData Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_DCMParameterOSData Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        public DataTable Get_DCMParameterSoftData(string edittempid, string search)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select pm.value,pm.parameter_id,pr.warning_threshold,case when pr.parameter_id is null then ' ' else 'checked' end as 'pmid'");
                        strQuery.AppendFormat(" from parameter_master pm left outer join policy_parameter_relation pr on  pm.parameter_id= pr.parameter_id ");
                        strQuery.AppendFormat(" and pm.parameter_type=pr.parameter_type and pr.policy_id={0} where pm.parameter_type=12  and pm.parameter_value ='SOFTWARE' {1}", edittempid, search);
                        break;
                }
                data_table = this.database.getDataTable(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "Get_DCMParameterSoftData Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_DCMParameterSoftData Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        public string Delete_DCMParameterData(string policyid)
        {
            string strQuery = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery = "delete from policy_parameter_relation where policy_id=" + policyid + " and parameter_type in(11,12,13);";
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Delete_DCMParameterData Query : " + strQuery);
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Delete_DCMParameterData Exception : " + ex.Message.ToString());
            }
            return strQuery;
        }

        public int execute_editdcmpolicy(string sql)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("  begin " + sql + " end  ");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(sql);
                        break;
                }

                objcommon.WriteLog("DBQueryHandler", "execute_editdcmpolicy Query : " + strQuery);
                result = this.database.execute(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "execute_editdcmpolicy Exception : " + ex.Message.ToString());
            }
            return result;
        }

        public string applydeletedcmpolicy(string policyid)
        {
            string strQuery = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery = "delete from e120applypolicy where e120ruletype=9 and e120policyid=" + policyid + ";";
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "applydeletedcmpolicy Query : " + strQuery);
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "applydeletedcmpolicy Exception : " + ex.Message.ToString());
            }
            return strQuery;
        }
        public string applydeletedcmpolicymaster(string policyid)
        {
            string strQuery = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery = "delete from e122appliedpolicymaster where ruletype=9 and param2=" + policyid + ";";
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "applydeletedcmpolicymaster Query : " + strQuery);
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "applydeletedcmpolicymaster Exception : " + ex.Message.ToString());
            }
            return strQuery;
        }
        //public string deletedcmpolicy(string policyid)
        //{
        //    string strQuery = "";
        //    try
        //    {
        //        switch (dbtype)
        //        {
        //            case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
        //            case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
        //                strQuery = "delete from e120applypolicy where e120ruletype=9 and e120policyid=" + policyid + ";";
        //                break;
        //        }
        //        objcommon.WriteLog("DBQueryHandler", "applydeletedcmpolicy Query : " + strQuery);
        //    }
        //    catch (Exception ex)
        //    {
        //        objcommon.WriteLog("DBQueryHandler", "applydeletedcmpolicy Exception : " + ex.Message.ToString());
        //    }
        //    return strQuery;
        //}
        public DataTable Get_DCMsyatemname_ip(string ou_id, string policyid, string device_name, string ip)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                string strSearchCond = "";
                if (ou_id != null && ou_id != "-1" && ou_id.Trim().Length > 0)
                {
                    string ou_child_ids = this.database.getValue("select ou_nodelinkage_allchild from ou_nodelinkage where ou_nodelinkage_ouid=" + ou_id);
                    strSearchCond = " where ou_id in (" + ou_child_ids + ")";
                }
                if (device_name != null && device_name != "-1")
                {
                    if (strSearchCond.Trim().Length > 0)
                        strSearchCond = strSearchCond + " and device_name='" + device_name + "'";
                    else
                        strSearchCond = " where device_name='" + device_name + "'";
                }
                if (ip != null && ip != "-1")
                {
                    if (strSearchCond.Trim().Length > 0)
                        strSearchCond = strSearchCond + " and ip='" + ip + "'";
                    else
                        strSearchCond = " where ip='" + ip + "'";
                }
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select device_id,device_name,ip,ou_id,ou_longname,ou_node_name, ");
                        strQuery.AppendFormat(" case when ap.e120deviceid is null then '' else 'checked' end as 'cid' ");
                        strQuery.AppendFormat(" from device_linkage dl left outer join e120applypolicy ap on dl.device_id=ap.e120deviceid  and ap.e120policyid='{0}'", policyid);
                        strQuery.AppendFormat(" {0} and  dl.status<>-1 ", strSearchCond);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_DCMsyatemname_ip Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_DCMsyatemname_ip Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public string applydcmpolicydevice(string ouid, string deviceid, string policyid)
        {
            string strsql = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strsql = " insert into e120applypolicy (e120ouid,e120deviceid,e120policyid,e120ruletype) values (" + ouid + "," + deviceid + "," + policyid + ",9);";
                        break;
                }
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "applydcmpolicydevice Exception : " + ex.Message.ToString());
            }
            return strsql;
        }

        public string applydcmpolicymasterdevice(string ouid, string deviceid, string policyid)
        {
            StringBuilder strsql = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strsql.AppendFormat("insert into e122appliedpolicymaster (ouid,deviceid,ruletype,param1,param2,param3,param4,param5,param6,applytime) ");
                        strsql.AppendFormat(" select {0} as ouid,{1} as deviceid,9 as ruletype,e120relid as param1,{2} as param2,parameter_value as param3", ouid, deviceid, policyid);
                        strsql.AppendFormat(" ,warning_threshold as param4,case (parameter_value) when 'processor' then value when 'software' then value when 'os' then value else cast(error_threshold as varchar) end as param5,interval_value as param6,getdate()");
                        strsql.AppendFormat(" from e120applypolicy,policy_parameter_relation where e120ruletype=9 and e120deviceid={0} and e120policyid={1}", deviceid, policyid);
                        strsql.AppendFormat(" and parameter_type in(11,12,13) and e120policyid=policy_id and e120deviceid is not null");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strsql.AppendFormat("insert into e122appliedpolicymaster (ouid,deviceid,ruletype,param1,param2,param3,param4,param5,param6,applytime) ");
                        strsql.AppendFormat(" select {0} as ouid,{1} as deviceid,9 as ruletype,e120relid as param1,{2} as param2,parameter_value as param3", ouid, deviceid, policyid);
                        strsql.AppendFormat(" ,warning_threshold as param4,case (parameter_value) when 'processor' then value when 'software' then value when 'os' then value else cast(error_threshold as char) end as param5,interval_value as param6,now()");
                        strsql.AppendFormat(" from e120applypolicy,policy_parameter_relation where e120ruletype=9 and e120deviceid={0} and e120policyid={1}", deviceid, policyid);
                        strsql.AppendFormat(" and parameter_type in(11,12,13) and e120policyid=policy_id and e120deviceid is not null;");
                        break;
                }
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "applydcmpolicymasterdevice Exception : " + ex.Message.ToString());
            }
            return strsql.ToString();
        }

        public string applydcmpolicyucmrdevice(string policyid)
        {
            StringBuilder strsql = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strsql.AppendFormat(" insert into umdevicelist (device_id,device_ip,device_mac,device_name,device_timestamp,device_type,device_active,source) ");
                        strsql.AppendFormat(" select distinct dl.device_id,ip,mac,device_name,getdate(),0,1,param6 from e122appliedpolicymaster e,device_master dl");
                        strsql.AppendFormat(" where ruletype=9 and param2={0} and param6 in(11,12,13) and deviceid=device_id and dl.status<>-1 ", policyid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strsql.AppendFormat(" insert into umdevicelist (device_id,device_ip,device_mac,device_name,device_timestamp,device_type,device_active,source) ");
                        strsql.AppendFormat(" select distinct dl.device_id,ip,mac,device_name,now(),0,1,param6 from e122appliedpolicymaster e,device_master dl");
                        strsql.AppendFormat(" where ruletype=9 and param2={0} and param6 in(11,12,13) and deviceid=device_id and dl.status<>-1; ", policyid);
                        break;
                }
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "applydcmpolicyucmrdevice Exception : " + ex.Message.ToString());
            }
            return strsql.ToString();
        }

        public int Delete_DCMTemplate(string policyid)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("  begin insert into umdevicelist (device_id,device_ip,device_mac,device_name,device_timestamp,device_type,device_active,source) ");
                        strQuery.AppendFormat(" select distinct dm.device_id,ip,mac,device_name,getdate(),0,1,param6 from e122appliedpolicymaster e,device_master dm ");
                        strQuery.AppendFormat(" where ruletype=9 and param2= {0}  and param6 in(11,12,13) and deviceid=device_id", policyid);
                        strQuery.AppendFormat(" and dm.status<>-1 delete from policy_master where policy_id={0} and policy_type=11", policyid);
                        strQuery.AppendFormat(" delete from policy_parameter_relation where policy_id={0}", policyid);
                        strQuery.AppendFormat(" delete from e122appliedpolicymaster where ruletype=9 and param2={0}", policyid);
                        strQuery.AppendFormat("  delete from e120applypolicy where e120ruletype=9 and e120policyid={0} end", policyid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" insert into umdevicelist (device_id,device_ip,device_mac,device_name,device_timestamp,device_type,device_active,source) ");
                        strQuery.AppendFormat(" select distinct dm.device_id,ip,mac,device_name,now(),0,1,param6 from e122appliedpolicymaster e,device_master dm ");
                        strQuery.AppendFormat(" where ruletype=9 and param2= {0}  and param6 in(11,12,13) and deviceid=device_id", policyid);
                        strQuery.AppendFormat(" and dm.status<>-1 ; delete from policy_master where policy_id={0} and policy_type=11;", policyid);
                        strQuery.AppendFormat(" delete from policy_parameter_relation where policy_id={0};", policyid);
                        strQuery.AppendFormat(" delete from e122appliedpolicymaster where ruletype=9 and param2={0};", policyid);
                        strQuery.AppendFormat("  delete from e120applypolicy where e120ruletype=9 and e120policyid={0}; ", policyid);
                        break;
                }

                objcommon.WriteLog("DBQueryHandler", "Delete_DCMTemplate Query : " + strQuery);
                result = this.database.execute(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Delete_DCMTemplate Exception : " + ex.Message.ToString());
            }
            return result;
        }

        public DataTable ShowDCMCountdata(string policyid)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select device_name,ip,ou_longname ");
                        strQuery.AppendFormat(" from device_linkage dl inner join e120applypolicy ap  ");
                        strQuery.AppendFormat(" on dl.device_id=ap.e120deviceid and ap.e120policyid='{0}' where dl.status<>-1 ", policyid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "ShowDCMCountdata Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "ShowDCMCountdata Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        public int Add_SoftCompliance(string softaction)
        {
            int cnt = 0;
            StringBuilder strQuery = new StringBuilder();
            switch (dbtype)
            {
                case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                    strQuery.AppendFormat("update ownyit_configuration set software_compliance='" + softaction + "'");
                    break;
            }
            objcommon.WriteLog("DBQueryHandler", "Add_SoftCompliance Query : " + strQuery.ToString());
            cnt = this.database.execute(strQuery.ToString());
            return cnt;
        }
        public DataTable GetGroupData()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select distinct group_id,group_type,group_name,item_type from dcm_group");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select distinct group_id,group_type,group_name,item_type from dcm_group");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "GetGroupData Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "GetGroupData Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public int Get_group_item_count(string group_type, string item_type)
        {
            int cnt = 0;
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select count(*) from dcm_group where group_type = '{0}' and item_type = '{1}'", group_type, item_type);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select count(*) from dcm_group where group_type = '{0}' and item_type = '{1}'", group_type, item_type);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_group_item_count Query : " + strQuery.ToString());
                cnt = this.database.getIntValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_group_item_count Exception : " + ex.Message.ToString());
            }
            return cnt;
        }
        public int get_max_groupid()
        {
            StringBuilder strQuery = new StringBuilder();
            int groupid = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select isnull(max(group_id), 0)+1 from dcm_group ");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select ifnull(max(group_id), 0)+1 from dcm_group ");
                        break;
                }
                groupid = this.database.getIntValue(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "get_max_groupid Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "get_max_groupid Exception : " + ex.Message.ToString());
            }
            return groupid;
        }
        public int addgroup(string group_type, string group_name, string item_type, int group_id)
        {
            int cnt = 0;
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("insert into dcm_group(group_id,group_type,group_name,item_type) values({0},'{1}','{2}','{3}') ", group_id, group_type, group_name, item_type);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("insert into dcm_group(group_id,group_type,group_name,item_type) values({0},'{1}','{2}','{3}') ", group_id, group_type, group_name, item_type);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "addgroup Query : " + strQuery.ToString());
                cnt = this.database.execute(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "addgroup Exception : " + ex.Message.ToString());
            }
            return cnt;
        }
        public int deletegroup(string groupid)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" delete from dcm_group where group_id = {0} ", groupid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" delete from dcm_group where group_id = {0} ", groupid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "deletegroup Query : " + strQuery);
                result = this.database.execute(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "deletegroup Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public DataTable GetItemData(string group_id)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select item_id,item_name from dcm_group where group_id = {0} and item_id != '' ", group_id);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select item_id,item_name from dcm_group where group_id = {0} and item_id != '' ", group_id);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "GetItemData Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "GetItemData Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public int get_max_itemid(string group_id)
        {
            StringBuilder strQuery = new StringBuilder();
            int itemid = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select isnull(max(item_id), 0)+1 from dcm_group where group_id = {0} ", group_id);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select ifnull(max(item_id), 0)+1 from dcm_group where group_id = {0} ", group_id);
                        break;
                }
                itemid = this.database.getIntValue(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "get_max_itemid Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "get_max_itemid Exception : " + ex.Message.ToString());
            }
            return itemid;
        }
        public int Get_group_item_count_check(string group_type, string item_type, string item_name)
        {
            int cnt = 0;
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select count(*) from dcm_group where group_type = '{0}' and item_type = '{1}' and item_name = '{2}'", group_type, item_type, item_name);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select count(*) from dcm_group where group_type = '{0}' and item_type = '{1}' and item_name = '{2}'", group_type, item_type, item_name);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_group_item_count_check Query : " + strQuery.ToString());
                cnt = this.database.getIntValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_group_item_count_check Exception : " + ex.Message.ToString());
            }
            return cnt;
        }
        public int additem(string group_id, string group_type, string group_name, string item_type, int item_id, string item_name)
        {
            int cnt = 0;
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("insert into dcm_group(group_id,group_type,group_name,item_type,item_id,item_name) values({0},'{1}','{2}','{3}',{4},'{5}') ", group_id, group_type, group_name, item_type, item_id, item_name);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("insert into dcm_group(group_id,group_type,group_name,item_type,item_id,item_name) values({0},'{1}','{2}','{3}',{4},'{5}') ", group_id, group_type, group_name, item_type, item_id, item_name);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "additem Query : " + strQuery.ToString());
                cnt = this.database.execute(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "additem Exception : " + ex.Message.ToString());
            }
            return cnt;
        }
        public int updateitem(string group_id, string group_type, string group_name, string item_type, int item_id, string item_name)
        {
            int cnt = 0;
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("update dcm_group set item_id = {4},item_name = '{5}' where group_id = {0} and group_type = '{1}' and group_name = '{2}' and item_type = '{3}'", group_id, group_type, group_name, item_type, item_id, item_name);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("update dcm_group set item_id = {4},item_name = '{5}' where group_id = {0} and group_type = '{1}' and group_name = '{2}' and item_type = '{3}'", group_id, group_type, group_name, item_type, item_id, item_name);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "updateitem Query : " + strQuery.ToString());
                cnt = this.database.execute(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "updateitem Exception : " + ex.Message.ToString());
            }
            return cnt;
        }
        public int deleteitem(string groupid, string itemid)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" delete from dcm_group where group_id = {0} and item_id = {1} ", groupid, itemid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" delete from dcm_group where group_id = {0} and item_id = {1} ", groupid, itemid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "deleteitem Query : " + strQuery);
                result = this.database.execute(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "deleteitem Exception : " + ex.Message.ToString());
            }
            return result;
        }
        #endregion

        #region Process Authentication
        public DataTable csat_process_data(string strsearch)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                if (strsearch.Trim().Length > 0)
                    strsearch = " and npi.process_name like '%" + strsearch + "%'";
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select distinct npi.process_name,npi.process_desc,pa.authorizetype from node_process_info npi left outer join authorizedata pa on npi.process_name=pa.typename  and datatype=2  where process_name<>'0' {0}", strsearch);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select distinct npi.process_name,npi.process_desc,pa.authorizetype from node_process_info npi left outer join authorizedata pa on npi.process_name=pa.typename and datatype=2  where process_name<>'0' {0}", strsearch);
                        break;
                }
                data_table = this.database.getDataTable(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "csat_process_data Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "csat_process_data Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public int csat_process_auth_apply(string processlistremove, string processlistapply)
        {
            int cnt = 1;
            StringBuilder strQuery = new StringBuilder();
            try
            {
                if (processlistremove != null)
                {
                    if (processlistremove.Length > 2)
                    {
                        processlistremove = "'" + processlistremove.Substring(1).Replace(",", "','") + "'";
                        switch (dbtype)
                        {
                            case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                                strQuery.AppendFormat("delete from process_authentication where process_name in ({0})", processlistremove);
                                break;
                            case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                                strQuery.AppendFormat("delete from process_authentication where process_name in ({0})", processlistremove);
                                break;
                        }
                        this.database.execute(strQuery.ToString());
                        objcommon.WriteLog("DBQueryHandler", "csat_process_auth_remove Query : " + strQuery.ToString());
                    }
                }
                if (processlistapply != null)
                {
                    if (processlistapply.Length > 2)
                    {
                        processlistapply = processlistapply.Substring(1);
                        string[] strProcessArr = processlistapply.Split(',');
                        for (int i = 0; i < strProcessArr.Length; i++)
                        {
                            string[] strProcessallow = strProcessArr[i].Split(':');
                            if (check_process_exist(strProcessallow[0].ToString()) > 0)
                            {
                                update_process_auth(strProcessallow[0].ToString(), strProcessallow[1].ToString());
                            }
                            else
                            {
                                insert_process_auth(strProcessallow[0].ToString(), strProcessallow[1].ToString());
                            }
                        }
                    }
                }
                objcommon.WriteLog("DBQueryHandler", "csat_process_auth_apply Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "csat_process_auth_apply Exception : " + ex.Message.ToString());
                cnt = 0;
            }
            return cnt;
        }
        private int check_process_exist(string process_name)
        {
            int cnt = 0;
            StringBuilder strQuery = new StringBuilder();
            switch (dbtype)
            {
                case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    strQuery.AppendFormat("select count(*) from process_authentication where process_name='{0}'", process_name);
                    break;
                case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                    strQuery.AppendFormat("select count(*) from process_authentication where process_name='{0}'", process_name);
                    break;
            }
            cnt = this.database.getIntValue(strQuery.ToString());
            return cnt;
        }
        private void update_process_auth(string process_name, string process_auth)
        {
            //int cnt = 0;
            StringBuilder strQuery = new StringBuilder();
            switch (dbtype)
            {
                case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    strQuery.AppendFormat("update process_authentication set authorize={0} where process_name='{1}'", process_auth, process_name);
                    break;
                case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                    strQuery.AppendFormat("update process_authentication set authorize={0} where process_name='{1}'", process_auth, process_name);
                    break;
            }
            objcommon.WriteLog("DBQueryHandler", "update_process_auth Query : " + strQuery.ToString());
            this.database.execute(strQuery.ToString());
        }
        private void insert_process_auth(string process_name, string process_auth)
        {
            //int cnt = 0;
            StringBuilder strQuery = new StringBuilder();
            switch (dbtype)
            {
                case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    strQuery.AppendFormat("insert into process_authentication(process_name,authorize) values('{0}',{1})", process_name, process_auth);
                    break;
                case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                    strQuery.AppendFormat("insert into process_authentication(process_name,authorize) values('{0}',{1})", process_name, process_auth);
                    break;
            }
            objcommon.WriteLog("DBQueryHandler", "insert_process_auth Query : " + strQuery.ToString());
            this.database.execute(strQuery.ToString());
        }
        #endregion

        #region Software Authentication
        public DataTable csat_software_data(string strsearch)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                if (strsearch.Trim().Length > 0)
                    strsearch = " and nsi.software like '%" + strsearch + "%'";
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        //strQuery.AppendFormat("select distinct nsi.software_guid,nsi.software,nsi.publisher,sa.authorize from node_software_info nsi left outer join software_authentication sa on nsi.software=sa.software_name {0}", strsearch);
                        strQuery.AppendFormat("select distinct nsi.software,nsi.publisher,sa.authorizetype from nodesoftwaredetails nsi left outer join authorizedata sa on nsi.software=sa.typename and datatype=1 where software<>'0'  {0}", strsearch);
                        break;
                }
                data_table = this.database.getDataTable(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "csat_software_data Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "csat_software_data Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public int csat_software_auth_apply(string softwarelistremove, string softwarelistapply)
        {
            int cnt = 1;
            StringBuilder strQuery = new StringBuilder();
            try
            {
                if (softwarelistremove != null)
                {
                    if (softwarelistremove.Length > 2)
                    {
                        softwarelistremove = "'" + softwarelistremove.Substring(1).Replace(",", "','") + "'";
                        switch (dbtype)
                        {
                            case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                            case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                                //strQuery.AppendFormat("delete from software_authentication where software_name in ({0})", softwarelistremove);
                                strQuery.AppendFormat("delete from authorizedata where typename in ({0}) and datatype=1 ", softwarelistremove);
                                break;
                        }
                        this.database.execute(strQuery.ToString());
                        objcommon.WriteLog("DBQueryHandler", "csat_process_auth_remove Query : " + strQuery.ToString());
                    }
                }
                if (softwarelistapply != null)
                {
                    if (softwarelistapply.Length > 2)
                    {
                        softwarelistapply = softwarelistapply.Substring(1);
                        string[] strSoftwareArr = softwarelistapply.Split(',');
                        for (int i = 0; i < strSoftwareArr.Length; i++)
                        {
                            string[] strSoftwareallow = strSoftwareArr[i].Split(':');
                            if (check_process_exist(strSoftwareallow[0].ToString()) > 0)
                            {
                                update_software_auth(strSoftwareallow[0].ToString(), strSoftwareallow[1].ToString());
                            }
                            else
                            {
                                insert_software_auth("1", strSoftwareallow[0].ToString(), strSoftwareallow[1].ToString());
                            }
                        }
                    }
                }
                objcommon.WriteLog("DBQueryHandler", "csat_software_auth_apply Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "csat_software_auth_apply Exception : " + ex.Message.ToString());
                cnt = 0;
            }
            return cnt;
        }
        //private int check_software_exist(string software_name)
        //{
        //    int cnt = 0;
        //    StringBuilder strQuery = new StringBuilder();
        //    switch (dbtype)
        //    {
        //        case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
        //            strQuery.AppendFormat("select count(*) from software_authentication where software_name='{0}'", software_name);
        //            break;
        //        case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
        //            strQuery.AppendFormat("select count(*) from software_authentication where software_name='{0}'", software_name);
        //            break;
        //    }
        //    cnt = this.database.getIntValue(strQuery.ToString());
        //    objcommon.WriteLog("DBQueryHandler", "check_software_exist Query : " + strQuery.ToString());
        //    return cnt;
        //}
        private void update_software_auth(string software_name, string software_auth)
        {
            //int cnt = 0;
            StringBuilder strQuery = new StringBuilder();
            switch (dbtype)
            {
                case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:

                    //strQuery.AppendFormat("update software_authentication set authorize={0} where software_name='{1}'", software_auth, software_name);
                    strQuery.AppendFormat("update authorizedata set authorizetype={0},datetime=getdate() where typename='{1}' and datatype=1 ", software_auth, software_name);
                    break;
                case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                    strQuery.AppendFormat("update authorizedata set authorizetype={0},datetime=now() where typename='{1}' and datatype=1 ", software_auth, software_name);
                    break;
            }
            objcommon.WriteLog("DBQueryHandler", "update_software_auth Query : " + strQuery.ToString());
            this.database.execute(strQuery.ToString());
        }
        private void insert_software_auth(string type, string software_name, string software_auth)
        {
            //int cnt = 0;
            StringBuilder strQuery = new StringBuilder();
            switch (dbtype)
            {
                case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:

                    //strQuery.AppendFormat("insert into software_authentication(software_name,authorize) values('{0}',{1})", software_name, software_auth);
                    strQuery.AppendFormat("insert into authorizedata(datatype,typename,authorizetype,datetime) values('{0}','{1}','{2}',getdate())", type, software_name, software_auth);
                    break;
                case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                    strQuery.AppendFormat("insert into authorizedata(datatype,typename,authorizetype,datetime) values('{0}','{1}','{2}',now())", type, software_name, software_auth);
                    break;
            }
            objcommon.WriteLog("DBQueryHandler", "insert_software_auth Query : " + strQuery.ToString());
            this.database.execute(strQuery.ToString());
        }
        #endregion
        #region Event Monitoring
        public DataTable csat_event_data()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select e124ruleid as rule_id,e124eventid as event_id ,case e124type  when 1 then 'Application' when 2 then 'Security' when 3 then 'System' when 4 then 'Setup' else '' end event_type,e124description as event_desc ,count(D.e125device_id) as applyon,(select count(*) from e125eventdetailtable where e125ruleid=e124ruleid and e125status=1) as applysuccess from e124eventmaster M left outer join e125eventdetailtable D on M.e124ruleid=D.e125ruleid group by e124ruleid,e124eventid,e124type,e124description");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select e124ruleid as rule_id,e124eventid as event_id ,case e124type  when 1 then 'Application' when 2 then 'Security' when 3 then 'System' when 4 then 'Setup' else '' end event_type,e124description as event_desc ,count(D.e125device_id) as applyon,(select count(*) from e125eventdetailtable where e125ruleid=e124ruleid and e125status=1) as applysuccess from e124eventmaster M left outer join e125eventdetailtable D on M.e124ruleid=D.e125ruleid group by e124ruleid,e124eventid,e124type,e124description");
                        break;
                }
                data_table = this.database.getDataTable(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "csat_event_data Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "csat_event_data Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public int csat_event_new_create(string event_type, string event_id, string event_desc)
        {
            StringBuilder strQuery = new StringBuilder();
            int cnt = 0;
            try
            {
                if (csat_event_check_exist(event_type, event_id) <= 0)
                {
                    long ruleid = 0;
                    ruleid = csat_event_get_max_event_id();
                    switch (dbtype)
                    {
                        case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                            strQuery.AppendFormat("insert into e124eventmaster(e124ruleid,e124eventid,e124type,e124description) values('{0}','{1}','{2}','{3}')", ruleid, event_id, event_type, event_desc);
                            break;
                        case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                            strQuery.AppendFormat("insert into e124eventmaster(e124ruleid,e124eventid,e124type,e124description) values('{0}','{1}','{2}','{3}')", ruleid, event_id, event_type, event_desc);
                            break;
                    }
                    cnt = this.database.execute(strQuery.ToString());
                    objcommon.WriteLog("DBQueryHandler", "csat_event_new_create Query : " + strQuery.ToString());
                }
                else
                {
                    cnt = 0;
                }
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "csat_event_new_create Exception : " + ex.Message.ToString());
            }
            return cnt;
        }
        public int csat_event_check_exist(string event_type, string event_id)
        {
            StringBuilder strQuery = new StringBuilder();
            int cnt = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select count(*) from e124eventmaster where e124type='{0}' and e124eventid='{1}'", event_type, event_id);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select count(*) from e124eventmaster where e124type='{0}' and e124eventid='{1}'", event_type, event_id);
                        break;
                }
                cnt = this.database.getIntValue(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "csat_event_check_exist Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "csat_event_check_exist Exception : " + ex.Message.ToString());
            }
            return cnt;
        }
        public long csat_event_get_max_event_id()
        {
            StringBuilder strQuery = new StringBuilder();
            long rule_id = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select isnull(max(E124ruleID)+1,cast((select prefix from C155rlyserverlocation C, location_master l where l.location_id = C.locationid) as varchar)+'001') from E124EventMaster");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select ifnull(max(E124ruleID)+1,cast((select prefix from C155rlyserverlocation C, location_master l where l.location_id = C.locationid) as varchar)+'001') from E124EventMaster");
                        break;
                }
                rule_id = this.database.getLongValue(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "csat_event_get_max_event_id Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "csat_event_get_max_event_id Exception : " + ex.Message.ToString());
            }
            return rule_id;
        }
        public DataTable csat_event_edit_data(string rule_id)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select top 1 e124type,e124eventid,e124description from e124eventmaster where e124ruleid={0}", rule_id);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select e124type,e124eventid,e124description from e124eventmaster where e124ruleid={0} limit 1", rule_id);
                        break;
                }
                data_table = this.database.getDataTable(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "csat_event_edit_data Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "csat_event_edit_data Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public int csat_event_delete_event_id(string rule_id)
        {
            StringBuilder strQuery = new StringBuilder();
            int cnt = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("delete from e125eventdetailtable where e125ruleid={0}", rule_id);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("delete from e125eventdetailtable where e125ruleid={0}", rule_id);
                        break;
                }
                cnt = this.database.execute(strQuery.ToString());
                strQuery.Clear();
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("delete from e124eventmaster where e124ruleid={0}", rule_id);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("delete from e124eventmaster where e124ruleid={0}", rule_id);
                        break;
                }
                cnt = this.database.execute(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "csat_event_delete_event_id Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "csat_event_delete_event_id Exception : " + ex.Message.ToString());
            }
            return cnt;
        }
        public int csat_event_save_event(string rule_id, string event_desc)
        {
            StringBuilder strQuery = new StringBuilder();
            int cnt = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("update e124eventmaster set e124description='{0}' where e124ruleid={1}", event_desc, rule_id);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("update e124eventmaster set e124description='{0}' where e124ruleid={1}", event_desc, rule_id);
                        break;
                }
                data_table = this.database.getDataTable(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "csat_event_save_event Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "csat_event_save_event Exception : " + ex.Message.ToString());
            }
            return cnt;
        }
        public DataTable csat_event_single_data(string rule_id)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select top 1 case e124type  when 1 then 'Application' when 2 then 'Security' when 3 then 'System' when 4 then 'Setup' else '' end as e124type,e124eventid,e124description from e124eventmaster where e124ruleid={0}", rule_id);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select case e124type  when 1 then 'Application' when 2 then 'Security' when 3 then 'System' when 4 then 'Setup' else '' end as e124type,e124eventid,e124description from e124eventmaster where e124ruleid={0} limit 1", rule_id);
                        break;
                }
                data_table = this.database.getDataTable(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "csat_event_single_data Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "csat_event_single_data Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable csat_event_single_apply_device(string rule_id)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select device_id,device_name,ip,ou_id,ou_longname,ou_node_name,isnull(e125device_id,0) as e125device_id from device_linkage dl left outer join e125eventdetailtable edt on dl.device_id=edt.e125device_id and e125ruleid={0}", rule_id);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select device_id,device_name,ip,ou_id,ou_longname,ou_node_name,ifnull(e125device_id,0) as e125device_id from device_linkage dl left outer join e125eventdetailtable edt on dl.device_id=edt.e125device_id and e125ruleid={0}", rule_id);
                        break;
                }
                data_table = this.database.getDataTable(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "csat_event_single_apply_device Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "csat_event_single_apply_device Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable csat_event_single_apply_device(string rule_id, string ou_id, string device_name, string ip)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                string strSearchCond = "";
                if (ou_id != null && ou_id.Trim().Length > 0)
                {
                    string ou_child_ids = this.database.getValue("select ou_nodelinkage_allchild from ou_nodelinkage where ou_nodelinkage_ouid=" + ou_id);
                    strSearchCond = " where ou_id in (" + ou_child_ids + ")";
                }
                if (device_name != null && device_name != "-1")
                {
                    if (strSearchCond.Trim().Length > 0)
                        strSearchCond = strSearchCond + " and device_name='" + device_name + "'";
                    else
                        strSearchCond = " where device_name='" + device_name + "'";
                }
                if (ip != null && ip != "-1")
                {
                    if (strSearchCond.Trim().Length > 0)
                        strSearchCond = strSearchCond + " and ip='" + ip + "'";
                    else
                        strSearchCond = " where ip='" + ip + "'";
                }
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select device_id,device_name,ip,ou_id,ou_longname,ou_node_name,isnull(e125device_id,0) as e125device_id from device_linkage dl left outer join e125eventdetailtable edt on dl.device_id=edt.e125device_id and e125ruleid={0} {1}", rule_id, strSearchCond);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select device_id,device_name,ip,ou_id,ou_longname,ou_node_name,ifnull(e125device_id,0) as e125device_id from device_linkage dl left outer join e125eventdetailtable edt on dl.device_id=edt.e125device_id and e125ruleid={0} {1}", rule_id, strSearchCond);
                        break;
                }
                data_table = this.database.getDataTable(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "csat_event_single_apply_device Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "csat_event_single_apply_device Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public int csat_event_single_apply_submit(string rule_id, string deviceids)
        {
            int cnt = 0;
            StringBuilder strQuery = new StringBuilder();
            try
            {
                string event_id = get_eventid_from_ruleid(rule_id);
                string str_message = "#817@1!" + event_id + "!@817#";
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("Insert Into Query_Log(device_id,QUERY_MSG,location_id,Message_priority) select device_id,'{0}' as QUERY_MSG,location_id,-1 from device_linkage dl where device_id in ({1}) and device_id not in (select e125device_id from e125eventdetailtable where e125ruleid={2})", str_message, deviceids, rule_id);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("Insert Into Query_Log(device_id,QUERY_MSG,location_id,Message_priority) select device_id,'{0}' as QUERY_MSG,location_id,-1 from device_linkage dl where device_id in ({1}) and device_id not in (select e125device_id from e125eventdetailtable where e125ruleid={2})", str_message, deviceids, rule_id);
                        break;
                }
                cnt = this.database.execute(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "csat_event_single_apply_submit Query : " + strQuery.ToString());
                strQuery.Clear();
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("insert into e125eventdetailtable(e125ruleid,e125device_id,e125time,e125status) select {0},device_id,getdate(),0 from device_linkage where device_id in ({1}) and device_id not in (select e125device_id from e125eventdetailtable where e125ruleid={0})", rule_id, deviceids);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("insert into e125eventdetailtable(e125ruleid,e125device_id,e125time,e125status) select {0},device_id,now(),0 from device_linkage where device_id in ({1}) and device_id not in (select e125device_id from e125eventdetailtable where e125ruleid={0})", rule_id, deviceids);
                        break;
                }
                cnt = this.database.execute(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "csat_event_single_apply_submit Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "csat_event_single_apply_submit Exception : " + ex.Message.ToString());
            }
            return cnt;
        }
        private string get_eventid_from_ruleid(string rule_id)
        {
            string event_id = "";
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select e124eventid from e124eventmaster where e124ruleid = {0}", rule_id);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select e124eventid from e124eventmaster where e124ruleid = {0}", rule_id);
                        break;
                }
                event_id = this.database.getValue(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "get_eventid_from_ruleid Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "get_eventid_from_ruleid Exception : " + ex.Message.ToString());
            }
            return event_id;
        }
        public DataTable csat_event_multiple_data(string rule_id)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                rule_id = rule_id.Substring(1);
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select case e124type  when 1 then 'Application' when 2 then 'Security' when 3 then 'System' when 4 then 'Setup' else '' end as e124type,e124eventid,e124description from e124eventmaster where e124ruleid in ({0})", rule_id);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select case e124type  when 1 then 'Application' when 2 then 'Security' when 3 then 'System' when 4 then 'Setup' else '' end as e124type,e124eventid,e124description from e124eventmaster where e124ruleid in ({0}) ", rule_id);
                        break;
                }
                data_table = this.database.getDataTable(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "csat_event_multiple_data Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "csat_event_multiple_data Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable csat_event_multiple_apply_device()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select device_id,device_name,ip,ou_id,ou_longname,ou_node_name from device_linkage");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select device_id,device_name,ip,ou_id,ou_longname,ou_node_name from device_linkage");
                        break;
                }
                data_table = this.database.getDataTable(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "csat_event_multiple_apply_device Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "csat_event_multiple_apply_device Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable csat_event_multiple_apply_device(string ou_id, string device_name, string ip)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                string strSearchCond = "";
                if (ou_id != null && ou_id.Trim().Length > 0)
                {
                    string ou_child_ids = this.database.getValue("select ou_nodelinkage_allchild from ou_nodelinkage where ou_nodelinkage_ouid=" + ou_id);
                    strSearchCond = " where ou_id in (" + ou_child_ids + ")";
                }
                if (device_name != null && device_name != "-1")
                {
                    if (strSearchCond.Trim().Length > 0)
                        strSearchCond = strSearchCond + " and device_name='" + device_name + "'";
                    else
                        strSearchCond = " where device_name='" + device_name + "'";
                }
                if (ip != null && ip != "-1")
                {
                    if (strSearchCond.Trim().Length > 0)
                        strSearchCond = strSearchCond + " and ip='" + ip + "'";
                    else
                        strSearchCond = " where ip='" + ip + "'";
                }
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select device_id,device_name,ip,ou_id,ou_longname,ou_node_name from device_linkage {0}", strSearchCond);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select device_id,device_name,ip,ou_id,ou_longname,ou_node_name from device_linkage {0}", strSearchCond);
                        break;
                }
                data_table = this.database.getDataTable(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "csat_event_multiple_apply_device Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "csat_event_multiple_apply_device Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable csat_event_apply_on(string rule_id)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select device_name,ou_longname,ip from device_linkage where device_id in (select e125device_id from e125eventdetailtable where e125ruleid={0})", rule_id);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select device_name,ou_longname,ip from device_linkage where device_id in (select e125device_id from e125eventdetailtable where e125ruleid={0})", rule_id);
                        break;
                }
                data_table = this.database.getDataTable(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "csat_event_apply_on Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "csat_event_apply_on Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable csat_event_apply_success(string rule_id)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select device_name,ou_longname,ip from device_linkage where device_id in (select e125device_id from e125eventdetailtable where e125ruleid={0} and e125status=1)", rule_id);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select device_name,ou_longname,ip from device_linkage where device_id in (select e125device_id from e125eventdetailtable where e125ruleid={0} and e125status=1)", rule_id);
                        break;
                }
                data_table = this.database.getDataTable(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "csat_event_apply_success Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "csat_event_apply_success Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        #endregion

        #region Network On Off report      
        public DataTable Get_network_on_off_report(string search, string startdate, string enddate)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("SELECT distinct device_id,device_name,ou_longname as ou_nodelinkage_LongName ,ip,convert(varchar,E114offTime,103) + ' ' + convert(varchar,E114offTime,108) as E114offTime,convert(varchar,E114onTime,103) + ' ' + convert(varchar,E114onTime,108)as E114onTime,convert(varchar,E114offTime,103) as E114offTime1,convert(varchar,E114onTime,108)as E114onTime1,ou_id   FROM device_linkage dl, E114DeviceNWStatus NW  where NW.E114deviceid=dl.Device_id and (E114OnTime between '{0}' and '{1}' or E114OffTime between '{0}' and '{1}') {2}  order by device_Name Asc", startdate, enddate, search);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("SELECT distinct device_id,device_name,ou_longname as ou_nodelinkage_LongName ,ip,DATE_FORMAT(E114offTime,'%d/%m/%Y %H:%i:%s')  as E114offTime,DATE_FORMAT(E114onTime,'%d/%m/%Y %H:%i:%s')  as E114onTime,DATE_FORMAT(E114offTime,'%d/%m/%Y %H:%i:%s') as E114offTime1,DATE_FORMAT(E114onTime,'%d/%m/%Y %H:%i:%s')as E114onTime1,ou_id  FROM device_linkage dl, E114DeviceNWStatus NW  where NW.E114deviceid=dl.Device_id and (E114OnTime between '{0}' and '{1}' or E114OffTime between '{0}' and '{1}') {2} order by device_Name Asc", startdate, enddate, search);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_network_on_off_report Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_network_on_off_report Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        public DataTable Get_network_on_off_selected_data(string DeviceId)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select top 1 dl.device_id,(device_name) as 'DeviceName', IP as 'IP' ,ou_longname as 'OUName' from node_audit_trail nat ,device_linkage dl where dl.device_id = '{0}'and dl.device_id = nat.device_id  order by device_id desc", DeviceId);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select dl.device_id,(device_name) as 'DeviceName', IP as 'IP' ,ou_longname as 'OUName' from node_audit_trail nat ,device_linkage dl where dl.device_id = '{0}'and dl.device_id = nat.device_id  order by device_id desc limit 1", DeviceId);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_network_on_off_selected_data Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_network_on_off_selected_data Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_network_on_off_report_details(string DeviceId, string strstartdate, string strenddate)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select distinct dl.device_id,(device_name) as 'DeviceName', IP as 'IP' ,ou_longname as 'OUName',case nat.category_type when 2 then 'Policy' when 1 then 'Device' when 2 then 'Policy' when 3 then 'Compliance' when 9 then 'OwnYIT' when 10 then 'Remote' when 11 then 'Hardware' when 12 then 'Software' when 13 then 'Performance' when 14 then 'Storage' when 15 then 'User' when 16 then 'Login' when 17 then 'Time' when 18 then 'Process' when 19 then 'Service' when 20 then 'Share' when 21 then 'Virus' else '-' end as Type,case nat.category_subtype when 101 then 'IP' when 102 then 'Host' when 103 then 'MAC' when 104 then 'Firewall' when 105 then 'N/W Printer' when 106 then 'Show hidden file/folder' when 107 then 'Simple file sharing' when 111 then 'CPU' when 112 then 'RAM' when 121 then 'Removable' when  122 then 'Disk' when 123 then 'ROM' when 131 then 'System32' when 132 then 'Control Panel' when 133 then 'Registry' when 134 then 'Login Attempt' when 135 then 'Service' when 136 then 'Guest' when 10 then 'Remote' when 11 then 'Hardware' when 15 then 'User' when 20 then 'Share' when 110 then 'Event' when 18 then 'Process' else '-' end ");
                        strQuery.AppendFormat("as SubType,case nat.category_status when -2 then 'Failed' when -1 then 'Removed' when 0 then 'Down' when 1 then 'Added' when 2 then 'Running' when 3 then 'Warning' when 4 then 'Error' when 5 then 'Violation' when 6 then 'Time Difference' when 7 then 'Enabled' when 8 then 'Disabled' when 9 then 'Implement' when 10 then 'Access' when 11 then 'Attend' when 12 then 'Changed' when 13 then 'Detect' when 14 then 'Activation Code Already Exists' when 15 then 'Invalid Activation Code' when 16 then 'Client Limit Exceeded' when 17 then 'Updated' when 99 then 'General' else '-' end as Status ,nat.Details,convert(varchar,nat.device_timestamp,103)+ ' ' + convert(varchar,nat.device_timestamp,108) as 'Timestamp' from node_audit_trail nat ,device_linkage dl where dl.device_id = '{0}' and  dl.status = 1 and nat.category_type in ('99','0','1','2','3','11','9','10','12','13','14','16','20','21','15','17','18','19') and nat.alert_status = 1 and nat.device_timestamp between '{1}' and '{2}' and nat.details not like 'pnp entity%' and nat.details not like 'OS Error 1645%' and dl.device_id = nat.device_id  order by Timestamp desc", DeviceId, strstartdate, strenddate);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select distinct dl.device_id,(device_name) as 'Device Name', IP as 'IP Address' ,ou_longname as	 'OU Name',case nat.category_type when 2 then 'Policy' when 1 then 'Device' when 2 then 'Policy' when 3 then 'Compliance' when 9 then 'OwnYIT' when 10 then 'Remote' when 11 then 'Hardware' when 12 then 'Software' when 13 then 'Performance' when 14 then 'Storage' when 15 then 'User' when 16 then 'Login' when 17 then 'Time' when 18 then 'Process' when 19 then 'Service' when 20 then 'Share' when 21 then 'Virus' else '-' end as Type,case nat.category_subtype when 101 then 'IP' when 102 then 'Host' when 103 then 'MAC' when 104 then 'Firewall' when 105 then 'N/W Printer' when 106 then 'Show hidden file/folder' when 107 then 'Simple file sharing' when 111 then 'CPU' when 112 then 'RAM' when 121 then 'Removable' when  122 then 'Disk' when 123 then 'ROM' when 131 then 'System32' when 132 then 'Control Panel' when 133 then 'Registry' when 134 then 'Login Attempt' when 135 then 'Service' when 136 then 'Guest' when 10 then 'Remote' when 11 then 'Hardware' when 15 then 'User' when 20 then 'Share' when 110 then 'Event' when 18 then 'Process' else '-' end ");
                        strQuery.AppendFormat("as SubType,case nat.category_status when -2 then 'Failed' when -1 then 'Removed' when 0 then 'Down' when 1 then 'Added' when 2 then 'Running' when 3 then 'Warning' when 4 then 'Error' when 5 then 'Violation' when 6 then 'Time Difference' when 7 then 'Enabled' when 8 then 'Disabled' when 9 then 'Implement' when 10 then 'Access' when 11 then 'Attend' when 12 then 'Changed' when 13 then 'Detect' when 14 then 'Activation Code Already Exists' when 15 then 'Invalid Activation Code' when 16 then 'Client Limit Exceeded' when 17 then 'Updated' when 99 then 'General' else '-' end as Status ,nat.Details,DATE_FORMAT(nat.device_timestamp,'%d/%m/%Y %H:%i:%s') as 'Timestamp' from node_audit_trail nat ,device_linkage dl where dl.device_id = '{0}' and  dl.status = 1 and nat.category_type in ('99','0','1','2','3','11','9','10','12','13','14','16','20','21','15','17','18','19') and nat.alert_status = 1  and nat.device_timestamp between '{1}' and '{2}' and nat.details not like 'pnp entity%' and nat.details not like 'OS Error 1645%' and dl.device_id = nat.device_id  order by Timestamp desc", DeviceId, strstartdate, strenddate);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_network_on_off_report_details Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_network_on_off_report_details Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        public DataTable Get_network_on_off_dataleakage_report(string DeviceId, string strstartdate, string strenddate)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select convert(varchar,server_time,105) + ' ' + convert(varchar,server_time,108) as 'TimeStamp',dl.device_name as 'SystemName', dl.ip as IP,parsename(destination_path,1) as 'Filetype',case type when 1 then 'HDD to USB' when 2 then 'USB to HDD' when 3 then 'Share to HDD' when 4 then 'Share to Removable' when 5 then 'HDD to CDDrive' end as Media,'' as 'deviceused',source_path,destination_path,  isnull(cast(size as bigint)/1024,'0') as Size ,dl.ou_node_name from node_data_leakage e, device_linkage dl where dl.device_id = e.device_id  and dl.status <>-1 and dl.device_id={0} and size != 0 and server_time between '{1}' and '{2}'", DeviceId, strstartdate, strenddate);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select cast(date_format(server_time,'%d-%m-%Y %H:%i:%s') as char) as 'TimeStamp',dl.device_name as 'SystemName', dl.ip as IP,SUBSTRING_INDEX(destination_path,'.',-1) as 'Filetype',case type when 1 then 'HDD to USB' when 2 then 'USB to HDD' when 3 then 'Share to HDD' when 4 then 'Share to Removable' when 5 then 'HDD to CDDrive' end as Media,'' as 'deviceused',source_path,destination_path,  isnull(cast(size as bigint)/1024,'0') as Size ,dl.ou_node_name from node_data_leakage e, device_linkage dl where dl.device_id = e.device_id  and dl.status <>-1 and dl.device_id={0} and size != 0 and server_time between '{1}' and '{2}'", DeviceId, strstartdate, strenddate);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_network_on_off_dataleakage_report Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_network_on_off_dataleakage_report Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        public DataTable Get_network_on_off_printer_report(string DeviceId, string strstartdate, string strenddate)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select convert(varchar,device_timestamp,120) as device_timestamp,dl.device_name,ip,user_name,printer_name,doc,ou_node_name,total_pages,location_name from node_printer_info p, device_linkage dl where p.device_id = dl.device_id and dl.status<>-1 and dl.device_id={0} and device_timestamp between '{1}' and '{2}'", DeviceId, strstartdate, strenddate);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select DATE_FORMAT(device_timestamp,'%d/%m/%Y %H:%i:%s') as device_timestamp,dl.device_name,ip,user_name,printer_name,doc,ou_node_name,total_pages,location_name from node_printer_info p, device_linkage dl where p.device_id = dl.device_id and dl.status<>-1 and dl.device_id={0} and device_timestamp between '{1}' and '{2}'", DeviceId, strstartdate, strenddate);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_network_on_off_printer_report Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_network_on_off_printer_report Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        #endregion
        #region Antivirus update report  
        public DataTable Get_antivirus_data_report(string startdate, string enddate, string ou_id, string search, string FieldSerach)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select ou_id,T.device_id,ou_longname,device_name,ip,antivirus_name,installed_date,agent_version,engine_version,update_time,ptnfile_version ,case COUNT(*) when (select count(*) from antivirus_configuration ) then 'Yes' else 'No' end as antivirus_Status from (select distinct dl.ou_id,dl.device_id,ou_longname,device_name,ip,antivirus_name,SUBSTRING(convert(varchar,installed_date), 7, 2) +'-'+ SUBSTRING(convert(varchar,installed_date), 5, 2)  +'-'+ SUBSTRING(convert(varchar,installed_date), 1, 4) as installed_date,antivirus_version+'.'+build_number as agent_version, engine_version,convert(date,SUBSTRING(convert(varchar,update_time), 7, 2) +'-'+ SUBSTRING(convert(varchar,update_time), 5, 2)  +'-'+ SUBSTRING(convert(varchar,update_time), 1, 4),105) as update_time ,SUBSTRING(ptnfile_version, 1, 2) +'.'+ SUBSTRING(ptnfile_version, 3, 3) +'.'+ SUBSTRING(ptnfile_version, 6, 2) as ptnfile_version from node_antivirus_updates nu,device_linkage dl where nu.device_id=dl.device_id)T left outer join node_service_info nsi on T.device_id=nsi.device_id and display_name in (select antivirus_service_name from antivirus_configuration ) where  update_time >= '{0}' and  update_time <= '{1}'  {2} {3} {4}  group by ou_id,T.device_id,ou_longname,device_name,ip,antivirus_name,installed_date,agent_version,engine_version,update_time,ptnfile_version", startdate, enddate, ou_id, search, FieldSerach);
                        //strQuery.AppendFormat("select ou_id,device_id,ou_longname,device_name,ip,antivirus_name,installed_date,agent_version,engine_version,update_time,ptnfile_version from(select distinct dl.ou_id,dl.device_id,ou_longname,device_name,ip,antivirus_name,SUBSTRING(convert(varchar,installed_date), 7, 2) +'-'+ SUBSTRING(convert(varchar,installed_date), 5, 2)  +'-'+ SUBSTRING(convert(varchar,installed_date), 1, 4) as installed_date,antivirus_version+'.'+build_number as agent_version,engine_version,convert(date,SUBSTRING(convert(varchar,update_time), 7, 2) +'-'+ SUBSTRING(convert(varchar,update_time), 5, 2)  +'-'+ SUBSTRING(convert(varchar,update_time), 1, 4),105) as update_time ,SUBSTRING(ptnfile_version, 1, 2) +'.'+ SUBSTRING(ptnfile_version, 3, 3) +'.'+ SUBSTRING(ptnfile_version, 6, 2) as ptnfile_version from node_antivirus_updates nu,device_linkage dl where nu.device_id=dl.device_id) T where  update_time >= '{0}' and  update_time <= '{1}'  {2} {3} {4}", startdate, enddate, ou_id, search, FieldSerach);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select dl.ou_longname,dl.device_id,dl.device_name as 'DeviceName',dl.ip, DATE_FORMAT(Device_timestamp,'%d/%m/%Y %H:%i:%s')  as 'Date',antivirus_name as 'AntivirusName', av.status as 'Status', AVUpdateDate, AVVersion,'NA' as AVVersion from device_antivirus_updates av,device_linkage dl where dl.device_id=av.device_id  and device_timestamp>='{0}' and  device_timestamp<='{1}' and dl.status<>-1 {3} {4}  order by dl.Device_name  Asc", startdate, enddate, ou_id, search, FieldSerach);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_antivirus_data_report Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_antivirus_data_report Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        #endregion

        #region Set Unstall Password
        public int csat_set_unstall_password(string oldpassword, string newpassword)
        {
            int cnt = 0;
            StringBuilder strQuery = new StringBuilder();
            try
            {
                if (csat_set_unstall_check_exist() > 0)
                {
                    if (csat_set_unstall_check_old_password(oldpassword) > 0)
                    {
                        switch (dbtype)
                        {
                            case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                                strQuery.AppendFormat("update ownyit_configuration set uninstall_password='{0}')", newpassword);
                                break;
                            case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                                strQuery.AppendFormat("update ownyit_configuration set uninstall_password='{0}')", newpassword);
                                break;
                        }
                    }
                    else
                    {
                        cnt = -1;
                    }
                }
                else
                {
                    switch (dbtype)
                    {
                        case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                            strQuery.AppendFormat("insert into ownyit_configuration(rdv_password,rdv_full_password,uninstall_password,master_password) values('full','full','{0}','tectona')", newpassword);
                            break;
                        case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                            strQuery.AppendFormat("insert into ownyit_configuration(rdv_password,rdv_full_password,uninstall_password,master_password) values('full','full','{0}','tectona')", newpassword);
                            break;
                    }
                }
                if (strQuery.ToString().Length > 10)
                    cnt = this.database.execute(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "csat_set_unstall_password Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                cnt = -2;
                objcommon.WriteLog("DBQueryHandler", "csat_set_unstall_password Exception : " + ex.Message.ToString());
            }
            return cnt;
        }
        public int csat_set_unstall_check_exist()
        {
            int cnt = 0;
            StringBuilder strQuery = new StringBuilder();
            try
            {

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select count(*) from ownyit_configuration");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select count(*) from ownyit_configuration");
                        break;
                }
                cnt = this.database.getIntValue(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "csat_set_unstall_check_exist Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "csat_set_unstall_check_exist Exception : " + ex.Message.ToString());
            }
            return cnt;
        }
        public int csat_set_unstall_check_old_password(string oldpassword)
        {
            int cnt = 0;
            StringBuilder strQuery = new StringBuilder();
            try
            {

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select count(*) from ownyit_configuration where uninstall_password='{0}'", oldpassword);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select count(*) from ownyit_configuration where uninstall_password='{0}'", oldpassword);
                        break;
                }
                cnt = this.database.getIntValue(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "csat_set_unstall_check_old_password Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "csat_set_unstall_check_old_password Exception : " + ex.Message.ToString());
            }
            return cnt;
        }
        #endregion

        #region Port Authorize report  
        public string portinfo_serching_list(string search, string value)
        {

            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        if (search == "T.local_port")
                            result = " T.local_port like '%" + value + "%'";
                        else if (search == "T.remote_port")
                            result = " T.remote_port like '%" + value + "%'";
                        else
                            result += search + " like '%" + value + "%'";

                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        if (search == "T.local_port")
                            result = " cast(concat(local_port,concat('/',LocalportDetails)) as char) like '%" + value + "%'";
                        else if (search == "T.remote_port")
                            result = " cast(concat(remote_port,concat('/',remortportDetails)) as char) like '%" + value + "%'";
                        else
                            result += search + " like '%" + value + "%'";
                        break;

                }


            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "portinfo_serching_list Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public DataTable port_authentication_report(string Startdate, string Enddate, string search)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select distinct dl.ou_longname,dl.ou_id,dl.device_name as systemname ,dl.ip, case nc.l2_protocol when 'NA' then '' when 'NULL' then '' when null then '' else nc.l2_protocol end as protocol, nc.local_ip, nc.local_port as localport, nc.remote_ip, nc.remote_port as remoteport, nc.status,");
                        strQuery.AppendFormat(" case convert(varchar,dateadd(s, nc.start_time,'1970-01-01 00:00:00'),120) when 'NULL' then '' when null then '' else convert(varchar,dateadd(s, nc.start_time,'1970-01-01 00:00:00'),105) + ' ' + convert(varchar,dateadd(s, nc.start_time,'1970-01-01 00:00:00'),108) end as stimestamp, case nc.end_time when '-1' then '' else  case convert(varchar,dateadd(s, nc.end_time,'1970-01-01 00:00:00'),120) when '-1' then '' when 'NA' then '' when 'NULL' then '' when null then '' else convert(varchar,dateadd(s, nc.end_time,'1970-01-01 00:00:00'),105) + ' ' + convert(varchar,dateadd(s, nc.end_time,'1970-01-01 00:00:00'),108) end end as etimestamp, ");
                        strQuery.AppendFormat(" case local_auth when 1 then 'Authorize' when 0 then 'UnAuthorize' else '' end as LocalAuth,case remote_auth when 1 then 'Authorize' when 0 then 'UnAuthorize' else '' end as RemoteAuth from device_linkage dl inner join node_network_connection_history nc on dl.device_id = nc.device_id ");
                        strQuery.AppendFormat(" where dl.status<>-1 and len(nc.local_ip) <= 15 and len(nc.remote_ip) <= 15 and nc.local_port <> '0' and nc.remote_port <> '0' ");
                        strQuery.AppendFormat(" and nc.remote_ip <> '0' and nc.local_ip <> '0' {0} ", search);
                        //1
                        //strQuery.AppendFormat(" select distinct dl.ou_longname,dl.ou_id,dl.device_name as systemname ,dl.ip, case nc.l2_protocol when 'NA' then '' when 'NULL' then '' when null then '' else nc.l2_protocol end as protocol, nc.local_ip, nc.local_port as localport, nc.remote_ip, nc.remote_port as remoteport, nc.status,");
                        //strQuery.AppendFormat(" case convert(varchar,dateadd(s, nc.start_time,'1970-01-01 00:00:00'),120) when 'NULL' then '' when null then '' else convert(varchar,dateadd(s, nc.start_time,'1970-01-01 00:00:00'),105) + ' ' + convert(varchar,dateadd(s, nc.start_time,'1970-01-01 00:00:00'),108) end as stimestamp, case convert(varchar,dateadd(s, nc.end_time,'1970-01-01 00:00:00'),120) when '-1' then '' when 'NULL' then '' when null then '' else convert(varchar,dateadd(s, nc.end_time,'1970-01-01 00:00:00'),105) + ' ' + convert(varchar,dateadd(s, nc.end_time,'1970-01-01 00:00:00'),108) end as etimestamp,");
                        //strQuery.AppendFormat(" case local_auth when 1 then 'Authorize' when 0 then 'UnAuthorize' else '' end as LocalAuth,case remote_auth when 1 then 'Authorize' when 0 then 'UnAuthorize' else '' end as RemoteAuth from device_linkage dl inner join node_network_connection_history nc on dl.device_id = nc.device_id ");
                        //strQuery.AppendFormat(" where dl.status<>-1 and nc.remote_ip <> '0.0.0.0' and nc.remote_ip <> '*' and nc.remote_ip <> '[::]' and nc.remote_ip <> '[::1]' and nc.local_ip <> '0.0.0.0' and nc.local_ip <> '*' and nc.local_ip <> '[::]' and nc.local_ip <> '[::1]' and nc.local_port <> '0' and nc.remote_port <> '0' ");
                        //strQuery.AppendFormat(" and nc.remote_ip <> '0' and nc.local_ip <> '0' {0} ", search);
                        //2
                        //strQuery.AppendFormat(" select device_name as systemname,ip,protocol,local_ip,cast(local_port as varchar) + isnull( (select distinct top 1 ' / '+port_discription from PortDesc P where  P.port=Local_Port and P.Port_Protocol=Protocol),'') as localport,remote_ip,cast(remote_port as varchar) + isnull( (select distinct top 1 ' /' +port_discription from PortDesc P where  P.port=remote_port and P.Port_Protocol=Protocol) ,'')as remoteport,stimestamp,etimestamp,status,ou_longname,ou_id,dlstatus,case authorize when 1 then 'Authorize' when 0 then 'UnAuthorize' else '' end as authorize  ");
                        //strQuery.AppendFormat("from (select dl.device_id,dl.device_name,ip,local_ip,local_port,remote_ip,remote_port,protocol,pit.status ,convert(varchar,DATEADD(mi,DATEDIFF(mi, GetUtcDate(), GetDate()),DATEADD(ss,pit.sockstarttime/1000,'1970-01-01 00:00:00')),104) + ' ' + convert(varchar,DATEADD(mi,DATEDIFF(mi, GetUtcDate(), GetDate()),DATEADD(ss,pit.sockstarttime/1000,'1970-01-01 00:00:00')),108) as stimestamp,");
                        //strQuery.AppendFormat("convert(varchar,DATEADD(mi,DATEDIFF(mi, GetUtcDate(), GetDate()),DATEADD(ss,pit.sockendtime/1000,'1970-01-01 00:00:00')),104) + ' ' + convert(varchar,DATEADD(mi,DATEDIFF(mi, GetUtcDate(), GetDate()),DATEADD(ss,pit.sockendtime/1000,'1970-01-01 00:00:00')),108)  as etimestamp ,ou_longname,ou_id,dl.status as dlstatus from port_info_table pit , device_linkage dl where pit.device_id=dl.device_id )T left outer join portauthorize pa on T.local_port=pa.port where remote_ip <> '0' and dlstatus<>-1 and etimestamp between '{0}' and '{1}' and {2} ", Startdate, Enddate, search);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select distinct dl.ou_longname,dl.ou_id,dl.device_name as systemname ,dl.ip, case nc.l2_protocol when 'NA' then '' when 'NULL' then '' when null then '' else nc.l2_protocol end as protocol, nc.local_ip, nc.local_port as localport, nc.remote_ip, nc.remote_port as remoteport, nc.status,");
                        strQuery.AppendFormat(" case cast(date_format(from_unixtime(nc.start_time),'%d-%m-%Y %H:%i:%s') as char) when 'NULL' then '' when null then '' else cast(date_format(from_unixtime(nc.start_time),'%d-%m-%Y %H:%i:%s') as char) end as stimestamp, case nc.end_time when '-1' then '' else case cast(date_format(from_unixtime(nc.end_time),'%d-%m-%Y %H:%i:%s') as char) when '-1' then '' when 'NULL' then '' when null then '' else cast(date_format(from_unixtime(nc.end_time),'%d-%m-%Y %H:%i:%s') as char) end end as etimestamp,");
                        strQuery.AppendFormat(" case local_auth when 1 then 'Authorize' when 0 then 'UnAuthorize' else '' end as LocalAuth,case remote_auth when 1 then 'Authorize' when 0 then 'UnAuthorize' else '' end as RemoteAuth from device_linkage dl inner join node_network_connection_history nc on dl.device_id = nc.device_id ");
                        strQuery.AppendFormat(" where dl.status<>-1 and len(nc.local_ip) <= 15 and len(nc.remote_ip) <= 15 and nc.local_port <> '0' and nc.remote_port <> '0' ");
                        strQuery.AppendFormat(" and nc.remote_ip <> '0' and nc.local_ip <> '0' {0} ", search);
                        //1
                        //strQuery.AppendFormat(" select distinct dl.ou_longname,dl.ou_id,dl.device_name as systemname ,dl.ip, case nc.l2_protocol when 'NA' then '' when 'NULL' then '' when null then '' else nc.l2_protocol end as protocol, nc.local_ip, nc.local_port as localport, nc.remote_ip, nc.remote_port as remoteport, nc.status,");
                        //strQuery.AppendFormat(" case cast(date_format(from_unixtime(nc.start_time),'%d-%m-%Y %H:%i:%s') as char) when 'NULL' then '' when null then '' else cast(date_format(from_unixtime(nc.start_time),'%d-%m-%Y %H:%i:%s') as char) end as stimestamp, case cast(date_format(from_unixtime(nc.end_time),'%d-%m-%Y %H:%i:%s') as char) when '-1' then '' when 'NULL' then '' when null then '' else cast(date_format(from_unixtime(nc.end_time),'%d-%m-%Y %H:%i:%s') as char) end as etimestamp,");
                        //strQuery.AppendFormat(" case local_auth when 1 then 'Authorize' when 0 then 'UnAuthorize' else '' end as LocalAuth,case remote_auth when 1 then 'Authorize' when 0 then 'UnAuthorize' else '' end as RemoteAuth from device_linkage dl inner join node_network_connection_history nc on dl.device_id = nc.device_id ");
                        //strQuery.AppendFormat(" where dl.status<>-1 and nc.remote_ip <> '0.0.0.0' and nc.remote_ip <> '*' and nc.remote_ip <> '[::]' and nc.remote_ip <> '[::1]' and nc.local_ip <> '0.0.0.0' and nc.local_ip <> '*' and nc.local_ip <> '[::]' and nc.local_ip <> '[::1]' and nc.local_port <> '0' and nc.remote_port <> '0' ");
                        //strQuery.AppendFormat(" and nc.remote_ip <> '0' and nc.local_ip <> '0' {0} ", search);
                        //2
                        //strQuery.AppendFormat(" select device_name as systemname,ip,protocol,local_ip,convert(local_port , char(10)) + ifnull( (select distinct ' / '+port_discription from PortDesc P where  P.port=Local_Port and P.Port_Protocol=Protocol limit 1),'') as localport,remote_ip,convert(remote_port , char(10)) + ifnull( (select distinct ' /' +port_discription from PortDesc P where  P.port=remote_port and P.Port_Protocol=Protocol limit 1) ,'')as remoteport,");
                        //strQuery.AppendFormat(" stimestamp,etimestamp,status,ou_longname,ou_id,status,case authorize when 1 then 'Authorize' when 0 then 'UnAuthorize' else '' end as authorize from (select dl.device_id,dl.device_name,ip,local_ip,local_port,remote_ip,remote_port,protocol,pit.status ,cast(concat(date_format(DATE_ADD(DATE_ADD('1970-01-01 00:00:00',interval cast(pit.sockstarttime as unsigned)/1000 second),interval timestampdiff(minute, UTC_TIMESTAMP(), now()) minute),'%Y-%m-%d'),");
                        //strQuery.AppendFormat(" date_format(DATE_ADD(DATE_ADD('1970-01-01 00:00:00',interval cast(pit.sockstarttime as unsigned)/1000 second), interval timestampdiff(minute, UTC_TIMESTAMP(), now()) minute),' %H:%i:%s')) as char) as stimestamp,cast(concat(date_format(DATE_ADD(DATE_ADD('1970-01-01 00:00:00',interval cast(pit.sockstarttime as unsigned)/1000 second),interval timestampdiff(minute, UTC_TIMESTAMP(), now()) minute),'%Y-%m-%d'),date_format(DATE_ADD(DATE_ADD('1970-01-01 00:00:00',interval cast(pit.sockstarttime as unsigned)/1000 second),");
                        //strQuery.AppendFormat(" interval timestampdiff(minute, UTC_TIMESTAMP(), now()) minute),' %H:%i:%s')) as char)   as etimestamp,ou_longname,ou_id,dl.status as dlstatus from port_info_table pit , device_linkage dl where pit.device_id=dl.device_id )T left outer join portauthorize pa on T.local_port=pa.port where remote_ip <> '0' and dlstatus<>-1 and etimestamp between '{0}' and '{1}' and {2} ", Startdate, Enddate, search);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "port_authentication_report Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "port_authentication_report Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable port_authentication_setting_data()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select  distinct port,case port_type when 1 then 'Local port' when 0 then 'Remote Port' end as port_type,case authorize when 1 then 'Authorize' when 0 then 'UnAuthorize' end as authorize ,port_name from portauthorize order by port asc ");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select  distinct port,case port_type when 1 then 'Local port' when 0 then 'Remote Port' end as port_type,case authorize when 1 then 'Authorize' when 0 then 'UnAuthorize' end as authorize ,port_name from portauthorize order by port asc ");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "port_authentication_setting_data Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "port_authentication_setting_data Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public int port_authorized_add_data(string authport, string portnumber, string portname)
        {
            int cnt = 0;
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" insert into portauthorize(port,authorize,port_name,port_type) values('{0}','{1}','{2}',1)", portnumber, authport, portname);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" insert into portauthorize(port,authorize,port_name,port_type) values('{0}','{1}','{2}',1)", portnumber, authport, portname);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "port_authorized_add_data Query : " + strQuery.ToString());
                cnt = this.database.execute(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "port_authorized_add_data Exception : " + ex.Message.ToString());
            }
            return cnt;
        }
        public int port_authorized_local_authorize(string authport, string portnumber)
        {
            int cnt = 0;
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("update node_network_connection set local_auth={0} where local_port='{1}';", authport, portnumber);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("update node_network_connection set local_auth={0} where local_port='{1}';", authport, portnumber);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "port_authorized_local_authorize Query : " + strQuery.ToString());
                cnt = this.database.execute(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "port_authorized_local_authorize Exception : " + ex.Message.ToString());
            }
            return cnt;
        }
        public int port_authorized_remote_authorize(string authport, string portnumber)
        {
            int cnt = 0;
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("update node_network_connection set remote_auth={0} where remote_port='{1}';", authport, portnumber);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("update node_network_connection set remote_auth={0} where remote_port='{1}';", authport, portnumber);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "port_authorized_remote_authorize Query : " + strQuery.ToString());
                cnt = this.database.execute(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "port_authorized_remote_authorize Exception : " + ex.Message.ToString());
            }
            return cnt;
        }
        public int Delete_auth_port(string portid)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" delete from portauthorize where port={0} ", portid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" delete from portauthorize where port={0} ", portid);
                        break;
                }

                objcommon.WriteLog("DBQueryHandler", "Delete_auth_port Query : " + strQuery);
                result = this.database.execute(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Delete_auth_port Exception : " + ex.Message.ToString());
            }
            return result;
        }
        #endregion


        #region service Settings  
        public DataTable Get_servicename()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select distinct service_name from node_service_info");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_servicename Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_servicename Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_displayname()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select distinct display_name from node_service_info");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_displayname Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_displayname Exception : " + ex.Message.ToString());
            }
            return data_table;
        }


        public DataTable service_setting_data(string search)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" SELECT distinct device_Name,ou_longname,ip,nis.service_name AS 'Servicename',nis.display_name as 'DisplayName',nis.startname as 'StartName' ,nis.state as 'servicestatus',nis.startmode as 'servicetype',dl.device_id,dl.ou_id  FROM node_service_info nis,device_linkage dl where nis.device_id=dl.Device_id  and dl.status<>-1 {0} order by device_name Asc ", search);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" SELECT distinct device_Name,ou_longname,ip,nis.service_name AS 'Servicename',nis.display_name as 'DisplayName',nis.startname as 'StartName' ,nis.state as 'servicestatus',nis.startmode as 'servicetype',dl.device_id,dl.ou_id  FROM node_service_info nis,device_linkage dl where nis.device_id=dl.Device_id and dl.status<>-1 {0} order by device_name Asc ", search);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "service_setting_data Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "service_setting_data Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        public void service_setting_appy(string Deviceid, string strmsg)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" insert into query_log (device_id,query_msg,location_id,message_priority) select device_id,'{0}',location_id,'-1' from device_linkage where device_id in ({1})", strmsg, Deviceid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" insert into query_log (device_id,query_msg,location_id,message_priority) select device_id,'{0}',location_id,'-1' from device_linkage where device_id in ({1})", strmsg, Deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "service_setting_appy Query : " + strQuery.ToString());
                this.database.execute(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "service_setting_appy Exception : " + ex.Message.ToString());
            }
        }
        #endregion

        #region ManageDiskCleanup

        public DataTable Get_diskcleanup()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select ou_node_name,device_name,ip,case scantype when 1 then 'Daily' when 2 then 'Weekly' when 3 then 'Monthly' end as type,scandetails,scantime,lastscantime from disk_schedular ds inner join device_linkage dl on ds.deviceid=dl.device_id");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_diskcleanup Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_diskcleanup Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        public DataTable Get_device(string ou_id, string device_name, string ip)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                string strSearchCond = "";
                if (ou_id != null && ou_id.Trim().Length > 0)
                {
                    string ou_child_ids = this.database.getValue("select ou_nodelinkage_allchild from ou_nodelinkage where ou_nodelinkage_ouid=" + ou_id);
                    strSearchCond = " where ou_id in (" + ou_child_ids + ")";
                }
                else
                    strSearchCond = " where ou_id in (null)";

                if (device_name != null && device_name != "-1")
                {
                    if (strSearchCond.Trim().Length > 0)
                        strSearchCond = strSearchCond + " and device_name='" + device_name + "'";
                    else
                        strSearchCond = " where device_name='" + device_name + "'";
                }
                if (ip != null && ip != "-1")
                {
                    if (strSearchCond.Trim().Length > 0)
                        strSearchCond = strSearchCond + " and ip='" + ip + "'";
                    else
                        strSearchCond = " where ip='" + ip + "'";
                }
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select device_id,device_name,ip,ou_id,ou_longname,ou_node_name from device_linkage {0}", strSearchCond);
                        break;
                }
                data_table = this.database.getDataTable(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "Get_device Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_device Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        public int Check_DiskDeviceSchedulercount(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select count(*) from disk_schedular where deviceid={0}", deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Check_DiskDeviceSchedulercount Query : " + strQuery.ToString());
                result = this.database.getIntValue(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Check_DiskDeviceSchedulercount Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int Add_diskschedule(string deviceid, string backuptype, string backupdetails, string backuptime)
        {
            int result = 0;
            string strQuery = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery = "insert into disk_schedular(deviceid,scantype,scandetails,scantime) values(" + deviceid + "," + backuptype + ",'" + backupdetails + "','" + backuptime + "')";
                        break;

                }

                objcommon.WriteLog("DBQueryHandler", "Add_diskschedule Query : " + strQuery);
                result = this.database.execute(strQuery);
                strQuery = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Add_diskschedule Exception : " + ex.Message.ToString());
            }
            return result;
        }


        public int Update_diskschedule(string deviceid, string backuptype, string backupdetails, string backuptime)
        {
            int result = 0;
            StringBuilder strQueryBuilder = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" update disk_schedular set scantype='{0}',scandetails='{1}',scantime='{2}' where deviceid='{3}' ", backuptype, backupdetails, backuptime, deviceid);
                        break;
                }

                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "Update_diskschedule Query : " + strQuery);
                result = this.database.execute(strQuery);
                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Update_diskschedule Exception : " + ex.Message.ToString());
            }
            return result;
        }

        #endregion

        #region ProcessLog Report
        public DataTable Get_ProcessLog(string startdate, string enddate, string search, string FieldSerach)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select distinct dl.device_id,dl.device_name,dl.ou_longname,dl.ip,login_user,process,convert(varchar,starttime,105) + ' ' + convert(varchar,starttime,108) as starttime,");
                        strQuery.AppendFormat(" case when endtime is null then 'Running' else convert(varchar,endtime,105) + ' ' + convert(varchar,endtime,108) end as endtime,case convert(varchar(20), (convert(datetime,endtime,108) - convert(datetime,starttime,108)), 108) when null then '' else convert(varchar(20), (convert(datetime,endtime,108) - convert(datetime,starttime,108)), 108) end as duration,pad.authorizetype ");
                        strQuery.AppendFormat(" from node_process_log pl inner join device_linkage dl on dl.device_id = pl.device_id left outer join process_category_relation p on p.process_name = pl.process ");
                        strQuery.AppendFormat(" left outer join authorizedata pad on pl.process=pad.typename and datatype=2 where ((starttime between convert(datetime,'{0}',120) and convert(datetime,'{1}',120)", startdate, enddate);
                        strQuery.AppendFormat(" or endtime between '{0}'  and  '{0}') ", startdate);
                        strQuery.AppendFormat(" or (starttime < '{0}' and endtime > '{1}' ) or (starttime < '{0}' and endtime is null )) and dl.status <> -1 {2} {3}", startdate, enddate, search, FieldSerach);
                        strQuery.AppendFormat(" order by device_id,login_user,process,starttime desc");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select distinct dl.device_id,dl.device_name,dl.ou_longname,dl.ip,login_user,process,cast(date_format(starttime,'%d-%m-%Y %H:%i:%s') as char) as starttime,");
                        strQuery.AppendFormat(" case when cast(endtime as char) is null then 'Running' else cast(date_format(endtime,'%d-%m-%Y %H:%i:%s') as char) end as endtime,case TIMEDIFF(endtime,starttime) when null then '' else TIMEDIFF(endtime,starttime) end as duration,pad.authorizetype");
                        strQuery.AppendFormat(" from node_process_log pl inner join device_linkage dl on dl.device_id = pl.device_id left outer join process_category_relation p on p.process_name = pl.process ");
                        strQuery.AppendFormat(" left outer join authorizedata pad on pl.process=pad.typename and datatype=2 where ((starttime between date_format(cast('{0}' as datetime),'%Y-%m-%d 00:00:00')  and date_format(cast('{1}' as datetime),'%Y-%m-%d 23:59:59') ", startdate, enddate);
                        strQuery.AppendFormat(" or endtime between date_format(cast('{0}' as datetime),'%Y-%m-%d 00:00:00')   and  date_format(cast('{0}' as datetime),'%Y-%m-%d 23:59:59')) ", startdate);
                        strQuery.AppendFormat(" or (starttime < date_format(cast('{0}' as datetime),'%Y-%m-%d 00:00:00') and endtime > date_format(cast('{1}' as datetime),'%Y-%m-%d 23:59:59')) or (starttime < date_format(cast('{0}' as datetime),'%Y-%m-%d 00:00:00') and endtime is null )) and dl.status <> -1 {2} {3}", startdate, enddate, search, FieldSerach);
                        strQuery.AppendFormat(" order by device_id,login_user,process,starttime desc");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_ProcessLog Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_ProcessLog Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public int Delete_ProcessLog(string startdate, string enddate, string search, string FieldSerach)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" delete from assertyit1.dbo.node_process_log where starttime between convert(datetime,'{0}',120) and convert(datetime, '{1}', 120) ", startdate, enddate);
                        strQuery.AppendFormat(" or endtime between '{0}'  and  '{0}'", startdate);
                        strQuery.AppendFormat(" or (starttime < '{0}' and endtime > '{1}' ) or (starttime < '{0}' and endtime is null )", startdate, enddate);
                        strQuery.AppendFormat("  {0} {1}", search, FieldSerach);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        //strQuery.AppendFormat(" delete from assertyit1.dbo.node_process_log where starttime between cast(date_format(" + startdate + ",'%Y-%d-%m %H:%i:%s') as char) ");
                        //strQuery.AppendFormat(" and ccast(date_format(" + enddate + ",'%Y-%d-%m %H:%i:%s') as char) {0}{1}", search, FieldSerach);
                        break;
                }

                objcommon.WriteLog("DBQueryHandler", "Delete_ProcessLog Query : " + strQuery);
                result = this.database.execute(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Delete_ProcessLog Exception : " + ex.Message.ToString());
            }
            return result;
        }

        #endregion

        #region UnAuthorise IP Log Report
        public string portinfo_searching_log(string search, string value)
        {

            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        if (search == "local_port")
                            result = " convert(varchar,local_port +'/'+LocalportDetails) like '%" + value + "%'";
                        else if (search == "remote_port")
                            result = " convert(varchar,remote_port+'/'+remortportDetails) like '%" + value + "%'";
                        else
                            result += search + " like '%" + value + "%'";

                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        if (search == "local_port")
                            result = " cast(concat(local_port,concat('/',LocalportDetails)) as char) like '%" + value + "%'";
                        else if (search == "remote_port")
                            result = " cast(concat(remote_port,concat('/',remortportDetails)) as char) like '%" + value + "%'";
                        else
                            result += search + " like '%" + value + "%'";
                        break;
                }
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "portinfo_searching_log Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int Delete_unauthipLog(string startdate, string enddate, string search, string FieldSerach)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" delete from port_info_table where sockendtime between cast(DATEDIFF(s, '1970-01-01 00:00:00.000', '" + startdate + "' ) as bigint) *1000 ");
                        strQuery.AppendFormat(" and cast(DATEDIFF(s, '1970-01-01 00:00:00.000', '" + enddate + "' ) as bigint) *1000  {0}{1}", search, FieldSerach);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" delete from port_info_table where date_add(date_add('1970-01-01 00:00:00',interval cast(sockendtime  as unsigned)/1000 second), interval timestampdiff(minute, utc_timestamp(), now()) minute)  between '" + startdate + "' and '" + enddate + "' ");
                        strQuery.AppendFormat(" {0}{1}", search, FieldSerach);
                        break;
                }

                objcommon.WriteLog("DBQueryHandler", "Delete_unauthipLog Query : " + strQuery);
                result = this.database.execute(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Delete_unauthipLog Exception : " + ex.Message.ToString());
            }
            return result;
        }
        #endregion


        #region Manage Agent Registry Asset Management
        public DataTable Get_DeviceRegistry(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select c057deviceid,c057path,c057key,c057keyvalue,case c057keytype when 0 then 'String' when 1 then 'Integer' when 2 then 'Binary' end as keytype,");
                        strQuery.AppendFormat(" case c057action when 0 then 'Delete' when 1 then 'New' when 2 then 'Modify' end as action,");
                        strQuery.AppendFormat(" case c057status when 0 then 'Fail' when 1 then 'Success' else '' end as status,");
                        strQuery.AppendFormat(" device_name,ip,ou_longname,convert(varchar,c057timestamp,105)+' '+convert(varchar,c057timestamp,108) as timestamp ");
                        strQuery.AppendFormat(" from C057RegistryEdit,device_linkage dl where c057deviceid=dl.device_id and dl.status<>-1 ");
                        strQuery.AppendFormat(" and c057deviceid in({0}) order by timestamp desc,device_name", deviceid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select c057deviceid,c057path,c057key,c057keyvalue,case c057keytype when 0 then 'String' when 1 then 'Integer' when 2 then 'Binary' end as keytype,");
                        strQuery.AppendFormat(" case c057action when 0 then 'Delete' when 1 then 'New' when 2 then 'Modify' end as action,");
                        strQuery.AppendFormat(" case c057status when 0 then 'Fail' when 1 then 'Success' else '' end as status,");
                        strQuery.AppendFormat(" device_name,ip,ou_longname,cast(date_format(c057timestamp,'%d-%m-%Y %H:%i:%s') as char) as timestamp ");
                        strQuery.AppendFormat(" from C057RegistryEdit,device_linkage dl where c057deviceid=dl.device_id and dl.status<>-1 ");
                        strQuery.AppendFormat(" and c057deviceid in({0}) order by timestamp desc,device_name", deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_DeviceRegistry Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_DeviceRegistry Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        public string Get_LocationIDForDeviceRegIns(string deviceid, string key, string path, string keytype, string keyvalue, string action)
        {
            string strMsg = "";
            StringBuilder strQuery = new StringBuilder();
            StringBuilder strQuery1 = new StringBuilder();
            string str = "";
            int strres;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select distinct device_id,location_id from device_linkage where ");
                        strQuery.AppendFormat(" device_id not in(select c057deviceid from C057RegistryEdit");
                        strQuery.AppendFormat(" where c057key='{0}' and c057path='{1}') {2} and status<>-1", key, path, deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_LocationIDForDeviceRegIns Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
                strQuery.Clear();
                for (int i = 0; i < data_table.Rows.Count; i++)
                {
                    switch (dbtype)
                    {
                        case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                            strMsg = "#2011@" + data_table.Rows[i]["device_id"].ToString() + "!" + path.Trim().Replace(@"\", "\\") + "!" + key.Trim() + "!" + keyvalue.Trim() + "!" + keytype + "!" + action + "!@2011#";
                            strQuery1.AppendFormat(" begin insert into C057RegistryEdit(c057deviceid,c057path,c057key,c057keyvalue,c057keytype,c057action,c057timestamp)");
                            strQuery1.AppendFormat(" values (" + data_table.Rows[i]["device_id"].ToString() + ",'" + path + "','" + key + "','" + keyvalue + "'," + keytype + "," + action + ",getdate())");
                            strQuery1.AppendFormat(" insert into query_log (device_id,query_msg,location_id,message_priority) values (" + data_table.Rows[i]["device_id"].ToString() + ",'" + strMsg + "','" + data_table.Rows[i]["location_id"].ToString() + "','2') end");
                            break;
                        case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                            strMsg = "#2011@" + data_table.Rows[i]["device_id"].ToString() + "!" + path.Trim().Replace(@"\", "\\\\") + "!" + key.Trim() + "!" + keyvalue.Trim() + "!" + keytype + "!" + action + "!@2011#";
                            strQuery1.AppendFormat(" insert into C057RegistryEdit(c057deviceid,c057path,c057key,c057keyvalue,c057keytype,c057action,c057timestamp)");
                            strQuery1.AppendFormat(" values (" + data_table.Rows[i]["device_id"].ToString() + ",'" + path + "','" + key + "','" + keyvalue + "'," + keytype + "," + action + ",now());");
                            strQuery1.AppendFormat(" insert into query_log (device_id,query_msg,location_id,message_priority) values (" + data_table.Rows[i]["device_id"].ToString() + ",'" + strMsg + "','" + data_table.Rows[i]["location_id"].ToString() + "','2')");
                            break;
                    }
                }
                objcommon.WriteLog("DBQueryHandler", "Insert Get_LocationIDForDeviceRegIns Query : " + strQuery1.ToString());

                // Update 

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select distinct device_id,location_id from device_linkage where");
                        strQuery.AppendFormat(" device_id in(select c057deviceid from C057RegistryEdit");
                        strQuery.AppendFormat(" where c057key='{0}' and c057path='{1}'", key, path);
                        strQuery.AppendFormat(" and (c057keyvalue<>'" + keyvalue.Trim() + "' or c057keytype<>'" + keytype + "' or c057action<>'" + action + "')");
                        strQuery.AppendFormat(" ) {0} and status<>-1", deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_LocationIDForDeviceRegUpdateQuery : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
                strQuery.Clear();
                for (int i = 0; i < data_table.Rows.Count; i++)
                {
                    switch (dbtype)
                    {
                        case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                            strMsg = "#2011@" + data_table.Rows[i]["device_id"].ToString() + "!" + path.Trim().Replace(@"\", "\\") + "!" + key.Trim() + "!" + keyvalue.Trim() + "!" + keytype + "!" + action + "!@2011#";
                            strQuery1.AppendFormat(" begin update C057RegistryEdit set c057keyvalue='" + keyvalue + "',c057keytype='" + keytype + "',c057action='" + action + "',c057timestamp=getdate(),c057status=null where c057key='" + key + "' and c057path='" + path + "'");
                            strQuery1.AppendFormat(" insert into query_log (device_id,query_msg,location_id,message_priority) values (" + data_table.Rows[i]["device_id"].ToString() + ",'" + strMsg + "','" + data_table.Rows[i]["location_id"].ToString() + "','2') end");
                            break;
                        case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                            strMsg = "#2011@" + data_table.Rows[i]["device_id"].ToString() + "!" + path.Trim().Replace(@"\", "\\\\") + "!" + key.Trim() + "!" + keyvalue.Trim() + "!" + keytype + "!" + action + "!@2011#";
                            strQuery1.AppendFormat(" update C057RegistryEdit set c057keyvalue='" + keyvalue + "',c057keytype='" + keytype + "',c057action='" + action + "',c057timestamp=now(),c057status=null where c057key='" + key + "' and c057path='" + path + "';");
                            strQuery1.AppendFormat(" insert into query_log (device_id,query_msg,location_id,message_priority) values (" + data_table.Rows[i]["device_id"].ToString() + ",'" + strMsg + "','" + data_table.Rows[i]["location_id"].ToString() + "','2')");
                            break;
                    }
                }
                objcommon.WriteLog("DBQueryHandler", "Update Get_LocationIDForDeviceRegIns Query : " + strQuery1.ToString());
                str = strQuery1.ToString();
                if (str == " BEGIN  END " || str == "")
                {
                    str = " Registry already edited for selected Device";
                    return str;
                }
                strres = this.database.execute(str);
                if (strres > 1)
                    str = " Registry edited successfully";

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_LocationIDForDeviceRegIns Exception : " + ex.Message.ToString());
            }
            return str;

        }

        public DataTable Show_DeviceRegistry(string search, string fieldserach)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select c057deviceid,ou_longname,device_name,ip,convert(varchar,c057timestamp,105)+' '+convert(varchar,c057timestamp,108) as timestamp,c057path,c057key,c057keyvalue, ");
                        strQuery.AppendFormat("case c057keytype when 0 then 'String' when 1 then 'Integer' when 2 then 'Binary' end as keytype,case c057action when 0 then 'Delete' when 1 then 'New' when 2 then 'Modify' end as action,case c057status when 0 then 'Fail' when 1 then 'Success' else '' end as status ");
                        strQuery.AppendFormat("from C057RegistryEdit,device_linkage dl where c057deviceid=dl.device_id and dl.status<>-1 {0} {1} order by timestamp desc,device_name ", search, fieldserach);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select c057deviceid,ou_longname,device_name,ip,cast(date_format(c057timestamp,'%d-%m-%Y %H:%i:%s') as char) as timestamp,c057path,c057key,c057keyvalue, ");
                        strQuery.AppendFormat("case c057keytype when 0 then 'String' when 1 then 'Integer' when 2 then 'Binary' end as keytype,case c057action when 0 then 'Delete' when 1 then 'New' when 2 then 'Modify' end as action,case c057status when 0 then 'Fail' when 1 then 'Success' else '' end as status ");
                        strQuery.AppendFormat("from C057RegistryEdit,device_linkage dl where c057deviceid=dl.device_id and dl.status<>-1 {0} {1} order by timestamp desc,device_name ", search, fieldserach);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Show_DeviceRegistry Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Show_DeviceRegistry Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        #endregion
        #region GetConfiguration
        public DataTable GetSection()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        //strQuery.AppendFormat("select distinct sectionname from configuration_setting");
                        strQuery.AppendFormat("select distinct sectionname, case sectionname  when 'DBSettings' then 'Database Setting' when 'BGService' then 'NOCDesk Service Configuration' when 'Config' then 'Config Setting' when 'FTPServer' then 'FTP Setting' when 'GUISetting' then 'OwnYIT GUI Setting'  when 'MailServer' then 'Mail Server setting' when 'NOCDesk' then 'NOCDesk GUI Setting' when 'Proxy' then 'Proxy Setting' when 'Settings' then 'OwnYIT server setting' when 'SMS' then 'SMS setting' when 'StartApplication' then 'Applications Setting' end as sectiondisplayname from configuration_setting where sectionname not in ('OwnYitInstaller', 'Mirroring', 'ServerListener', 'CustomerFeedback', 'IVRDBSetting', 'MailReader', 'DataConfig', 'RelayServer', 'SecurityEvent')");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "GetSection Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "GetSection Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable GetConfiguration(string sectionname)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select sectionname,propertyname,propertyvalue,case when propertyvalue='1' then 'checked' else '' end as 'chk' from configuration_setting where sectionname='" + sectionname + "'");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select sectionname,propertyname,propertyvalue,case when propertyvalue='1' then 'checked' else '' end as 'chk' from configuration_setting where sectionname='" + sectionname + "'");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "GetConfiguration Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "GetConfiguration Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public int Update_configuration(string sec, string prop, string propval)
        {
            string strQuery = "";
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery = " update configuration_setting set propertyvalue='" + propval + "' where sectionname = '" + sec + "' and propertyname='" + prop + "'";
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery = " update configuration_setting set propertyvalue='" + propval + "' where sectionname = '" + sec + "' and propertyname='" + prop + "'";
                        break;

                }
                objcommon.WriteLog("DBQueryHandler", "Update_configuration Query : " + strQuery);
                result = this.database.execute(strQuery);

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Update_configuration Exception : " + ex.Message.ToString());
            }
            return result;
        }
        #endregion

        #region GetAssetInformation
        public DataTable Get_AssetInfo(string search)
        {
            StringBuilder strQuery = new StringBuilder();

            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" exec getassetinformationreport");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" call getassetinformationreport();");
                        //strQuery.AppendFormat(" select * from (select distinct device_id,device_name,ip,mac,status,ou_id,ou_longname,emailid,departmentname,device_type,warranty_from_date,warranty_to_date,amc_from_date,amc_to_date,amc_vendor_name,amc_cost,vendore_location as vendor_location,insurance_party,insurance_party_name,");
                        //strQuery.AppendFormat(" insurance_from_date,insurance_to_date,insurance_amount,login_user,os,osdate,cost,order_no,invoice_no,attachment,remark,(select distinct details from node_hardware_info nh where T.device_id=nh.device_id and hardware_class='Motherboard' and hardware_type=12) as Motherboard,");
                        //strQuery.AppendFormat(" (select distinct manufacture from node_hardware_info nh where T.device_id=nh.device_id and hardware_class='Motherboard' and hardware_type=12) as Manufacture,(select distinct model_name from node_hardware_info nh where T.device_id=nh.device_id and hardware_class='Motherboard' and hardware_type=12) as Model,");
                        //strQuery.AppendFormat(" (select distinct details from node_hardware_info nh where T.device_id=nh.device_id and hardware_class='Keyboard' ) as Keyboard,");
                        //strQuery.AppendFormat(" (select count(device_id) from node_hardware_info nh where T.device_id=nh.device_id and hardware_class='Storage' and subtype_name='Fixed hard disk media' ) as hdd,(select sum(ifnull(cast(capacity as char) div (1024*1024*1024),'0')) from node_hardware_info nh where T.device_id=nh.device_id and hardware_class='Storage' and subtype_name='Fixed hard disk media' ) as hddsize,");
                        //strQuery.AppendFormat(" (select distinct subtype_name from node_hardware_info nh where T.device_id=nh.device_id and hardware_class='Motherboard' and details='Physical Memory') as ram,(select sum(ifnull(cast(capacity as char) div (1024*1024*1024),'0'))  from node_hardware_info nh where T.device_id=nh.device_id and hardware_class='Motherboard' and details='Physical Memory' ) as ramsize,");
                        //strQuery.AppendFormat(" (select count(slot_connector)  from node_hardware_info nh where T.device_id=nh.device_id and hardware_class='Motherboard' and details='Physical Memory' ) as slotcount,(select distinct details from node_hardware_info nh where T.device_id=nh.device_id and hardware_class='Floppydrive' and hardware_type=51 ) as Floppy,");
                        //strQuery.AppendFormat(" (select distinct details from node_hardware_info nh where T.device_id=nh.device_id and hardware_class='PointingDevice' ) as Mouse,(select distinct details from node_hardware_info nh where T.device_id=nh.device_id and hardware_class='CDROM' and hardware_type=52  ) as CDROM,");
                        //strQuery.AppendFormat(" (select distinct details from node_hardware_info nh where T.device_id=nh.device_id and hardware_class='DesktopMonitor' and hardware_type=52  ) as Monitor from ( ");
                        //strQuery.AppendFormat(" select dl.device_id,dl.device_name,dl.ip,dl.ou_id,dl.status,dm.mac,ou_longname,emailid,departmentname,dm.device_type,cost,order_no,invoice_no,attachment,remark,cast(date_format(warranty_from_date,'%m-%d-%Y') as char) as warranty_from_date,cast(date_format(warranty_to_date,'%m-%d-%Y') as char) as warranty_to_date,cast(date_format(amc_from_date,'%m-%d-%Y') as char) as amc_from_date,cast(date_format(amc_to_date,'%m-%d-%Y') as char) as amc_to_date,amc_vendor_name,amc_cost,vendore_location,insurance_party,insurance_party_name,");
                        //strQuery.AppendFormat(" cast(date_format(insurance_from_date,'%m-%d-%Y') as char) as insurance_from_date,cast(date_format(insurance_to_date,'%m-%d-%Y') as char) as insurance_to_date,insurance_amount,login_user,os,DATE_ADD(DATE_ADD('1970-01-01 00:00:00', interval cast(os_installation_date as unsigned)*1000/1000 second), interval timestampdiff(minute,UTC_TIMESTAMP(), now()) minute) as osdate from device_linkage dl left outer join amc_master am on dl.device_id = am.device_id left outer join insurance_master im on dl.device_id=im.device_id left outer join node_user_info nui on dl.device_id=nui.device_id left outer join node_general_info  ng on dl.device_id=ng.device_id");
                        //strQuery.AppendFormat(" left outer join device_master dm on dl.device_id=dm.device_id left outer join purchase_master pm on dl.device_id=pm.device_id )T where status<>-1 ) T1 {0} ", search);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_AssetInfo Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_AssetInfo Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_AssetInfo_new(string search)
        {
            StringBuilder strQuery = new StringBuilder();

            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select distinct ou_id, ou_longname, device_id, device_name, ip, mac, ");
                        strQuery.AppendFormat(" isnull (login_user, '') as login_user, isnull (departmentname, '') as departmentname, ");
                        strQuery.AppendFormat(" isnull (device_type, '') as device_type, isnull(Biosdate,'') as bios_date, isnull (emailid, '') as emailid, ");
                        strQuery.AppendFormat(" isnull (Motherboard, '') as Motherboard, isnull (Processor, '') as Processor, ");
                        strQuery.AppendFormat(" isnull (Manufacture, '') as Manufacture, isnull (Model, '') as Model, isnull(Service_tag,'') as service_tag,");
                        strQuery.AppendFormat(" isnull (os, '') as os, isnull (osarch, '') as osarchitecture, isnull (osversion, '') as osversion, ");
                        strQuery.AppendFormat(" case osdate when 'NA' then '' else isnull (convert (varchar, (cast(left(cast(convert(bigint,floor(substring(osdate,0,case charindex('+',osdate,0) when 0 then charindex('-',osdate,0) else charindex('+',osdate,0) end))) as char(14)), 8) as datetime) + cast(stuff(stuff(right(cast(convert(bigint,floor(substring(osdate,0,case charindex('+',osdate,0) when 0 then charindex('-',osdate,0) else charindex('+',osdate,0) end))) as char(14)), 6), 5, 0, ':'), 3, 0, ':') as datetime)),105), '') end as osdate, ");
                        strQuery.AppendFormat(" isnull (oslicense, '') as oslicense, '' as antivirus, isnull(Printer,'') as printer, ");
                        strQuery.AppendFormat(" isnull (convert (varchar, hdd, 0), '') as hdd, isnull (hddsize, '') as hddsize, ");
                        strQuery.AppendFormat(" isnull(Total_Drive,'') as hdd_total_drive, isnull(Disk_C + ' %','')  as disk_c, isnull(Disk_D + ' %','') as disk_d, ");
                        strQuery.AppendFormat(" isnull(Disk_E + ' %','') as disk_e, isnull(Disk_F + ' %','') as disk_f,");
                        strQuery.AppendFormat(" isnull (slotcount, '') as slotcount, isnull (ram, '') as ram, isnull (ramsize, '') as ramsize, ");
                        strQuery.AppendFormat(" isnull (Keyboard, '') as Keyboard, isnull (Mouse, '') as Mouse, isnull (cdrom, '') as CDROM, ");
                        strQuery.AppendFormat(" isnull (Monitor, '') as Monitor, isnull(Total_Software,'') as total_software, isnull(Total_Share,'') as total_shared, ");
                        strQuery.AppendFormat(" isnull(Total_User,'') as total_user,");
                        strQuery.AppendFormat(" isnull (cost, '') as cost, isnull (order_no, '') as order_no, isnull (invoice_no, '') as invoice_no, ");
                        strQuery.AppendFormat(" isnull (attachment, '') as attachment, isnull (remark, '') as remark,");
                        strQuery.AppendFormat(" isnull (convert(varchar, warranty_from_date, 105), '') as warranty_from_date,");
                        strQuery.AppendFormat(" isnull (convert (varchar, warranty_to_date, 105), '') as warranty_to_date, ");
                        strQuery.AppendFormat(" isnull (convert (varchar, amc_from_date, 105), '') as amc_from_date, ");
                        strQuery.AppendFormat(" isnull (convert (varchar, amc_to_date, 105), '') as amc_to_date, ");
                        strQuery.AppendFormat(" isnull (amc_vendor_name, '') as amc_vendor_name, ");
                        strQuery.AppendFormat(" isnull (amc_cost, '') as amc_cost, isnull (vendor_location, '') as vendor_location, ");
                        strQuery.AppendFormat(" isnull (insurance_party, '') as insurance_party, isnull (insurance_party_name, '') as insurance_party_name, ");
                        strQuery.AppendFormat(" isnull (convert (varchar, insurance_from_date, 105), '') as insurance_from_date, ");
                        strQuery.AppendFormat(" isnull (convert (varchar, insurance_to_date, 105), '') as insurance_to_date, ");
                        strQuery.AppendFormat(" isnull (insurance_amount, '') as insurance_amount, ");
                        strQuery.AppendFormat(" isnull (floppy, '') as Floppy, isnull (NICCard, '') as NICCard, status,");
                        strQuery.AppendFormat(" isnull (Virtual_Name, '') as virtual_name");
                        strQuery.AppendFormat(" from asset_info_report_table");
                        if (search.Length > 5)
                            strQuery.AppendFormat(" where {0}", search);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" call getassetinformationreport();");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_AssetInfo Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_AssetInfo Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        #endregion

        #region AgentConnectivity Report
        public DataTable Get_AgentConnectivity(string column, string search)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select distinct dl.device_id,dl.device_name,dl.ou_longname,dl.ip,isnull(convert(varchar,{0},105)+' '+convert(varchar,{0},108),'') as hardware from device_linkage dl,agent_connectivity_log al", column);
                        strQuery.AppendFormat(" where dl.device_id=al.device_id and status <> -1  {0}", search);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select distinct dl.device_id,dl.device_name,dl.ou_longname,dl.ip,ifnull(cast(date_format({0},'%d-%m-%Y %H:%i:%s') as char),'') as hardware from device_linkage dl,agent_connectivity_log al", column);
                        strQuery.AppendFormat(" where dl.device_id=al.device_id and status <> -1  {0}", search);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_AgentConnectivity Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_AgentConnectivity Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_AgentConnectivitySyswise(string search)
        {
            StringBuilder strQuery = new StringBuilder();

            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select isnull(convert(varchar,al.hardware_info,105)+' '+convert(varchar,al.hardware_info,108),'') as hardware,isnull(convert(varchar,al.software_info,105)+' '+convert(varchar,al.software_info,108),'') as software, ");
                        strQuery.AppendFormat(" isnull(convert(varchar,al.share_info,105)+' '+convert(varchar,al.share_info,108),'') as share,isnull(convert(varchar,al.user_category_info,105)+' '+convert(varchar,al.user_category_info,108),'') as user1,");
                        strQuery.AppendFormat(" isnull(convert(varchar,al.service_info,105)+' '+convert(varchar,al.service_info,108),'') as service,isnull(convert(varchar,al.process_info,105)+' '+convert(varchar,al.process_info,108),'') as process, ");
                        strQuery.AppendFormat(" isnull(convert(varchar,al.drive_info,105)+' '+convert(varchar,al.drive_info,108),'') as drive,isnull(convert(varchar,al.system_info,105)+' '+convert(varchar,al.system_info,108),'') as system,isnull(convert(varchar,al.network_info,105)+' '+convert(varchar,al.network_info,108),'') as network ");
                        strQuery.AppendFormat(" from device_linkage dl, agent_connectivity_log al where dl.device_id = al.device_id and status <> -1 {0}", search);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select ifnull(cast(date_format(al.hardware_info,'%d-%m-%Y %H:%i:%s') as char),'') as hardware,ifnull(cast(date_format(al.software_info,'%d-%m-%Y %H:%i:%s') as char),'') as software, ");
                        strQuery.AppendFormat(" ifnull(cast(date_format(al.share_info,'%d-%m-%Y %H:%i:%s') as char),'') as share,ifnull(cast(date_format(al.user_category_info,'%d-%m-%Y %H:%i:%s') as char),'') as user1,");
                        strQuery.AppendFormat(" ifnull(cast(date_format(al.service_info,'%d-%m-%Y %H:%i:%s')as char),'') as service,ifnull(cast(date_format(al.process_info,'%d-%m-%Y %H:%i:%s') as char),'') as process, ");
                        strQuery.AppendFormat(" ifnull(cast(date_format(al.drive_info,'%d-%m-%Y %H:%i:%s') as char),'') as drive,ifnull(cast(date_format(al.system_info,'%d-%m-%Y %H:%i:%s') as char),'')  as system,ifnull(cast(date_format(al.network_info,'%d-%m-%Y %H:%i:%s') as char),'')  as network ");
                        strQuery.AppendFormat(" from device_linkage dl, agent_connectivity_log al where dl.device_id = al.device_id and status <> -1 {0}", search);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_AgentConnectivitySyswise Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_AgentConnectivitySyswise Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        #endregion

        #region RDV

        public string Get_TunnelIP()
        {
            StringBuilder strQueryBuilder = new StringBuilder();
            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat("select top 1 server_ip from location_master where activestatus = 1");
                        break;
                }

                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "Get_TunnelIP Query : " + strQuery);
                result = this.database.getValue(strQuery);
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_TunnelIP Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public string Get_RDVClientType(string deviceid)
        {
            StringBuilder strQueryBuilder = new StringBuilder();
            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat("select top 1 c154clienttype from c154clientstatus where c154deviceid = '" + deviceid + "'");
                        break;
                }

                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "Get_RDVClientType Query : " + strQuery);
                result = this.database.getValue(strQuery);
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_RDVClientType Exception : " + ex.Message.ToString());
            }
            return result;
        }

        public string Get_RDVAuth(string deviceid, string ip)
        {
            StringBuilder strQueryBuilder = new StringBuilder();
            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat("select rdvauth from device_master where ip='" + ip + "' and device_id = '" + deviceid + "'");
                        break;
                }

                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "Get_RDVAuth Query : " + strQuery);
                result = this.database.getValue(strQuery);
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_RDVAuth Exception : " + ex.Message.ToString());
            }
            return result;
        }

        public string Get_RDVIP(string deviceid)
        {
            StringBuilder strQueryBuilder = new StringBuilder();
            string result = "";
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat("select server_ip from location_master where location_id =(");
                        strQueryBuilder.AppendFormat(" select location_id from device_master where device_id = '" + deviceid + "')");
                        break;
                }

                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "Get_RDVIP Query : " + strQuery);
                result = this.database.getValue(strQuery);
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_RDVIP Exception : " + ex.Message.ToString());
            }
            return result;
        }


        #endregion


        #region Dashboard Charts
        public DataTable Getpolicychartpopup(string fieldsearch, string categorytype)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select devicename,ipaddress,ouname,devicetimestamp,servertime,message from  ");
                        strQuery.AppendFormat(" (select dl.device_name as devicename,dl.ip as ipaddress,dl.ou_longname as ouname, convert(varchar,nt.servertime,105)+ ' ' + convert(varchar,nt.servertime,108) as servertime,convert(varchar,nt.device_timestamp,105)+ ' ' + convert(varchar,nt.device_timestamp,108) as devicetimestamp, ");
                        strQuery.AppendFormat(" nt.category_status,case nt.details when 'NA' then '' when null then '' when 'NULL' then '' else nt.details end as Message from device_master dm,node_audit_trail nt,device_linkage dl ");
                        strQuery.AppendFormat(" where dm.device_id=dl.device_id and dm.status<>-1   and dm.device_id = nt.device_id and dl.status<>-1 and nt.category_type <> 0 and nt.category_type in (13,14) and ");
                        strQuery.AppendFormat(" nt.category_subtype in ({1}) {0} ", fieldsearch, categorytype);
                        strQuery.AppendFormat(" ) T  order by devicetimestamp asc ");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select devicename,ipaddress,ouname,devicetimestamp,servertime,message from  ");
                        strQuery.AppendFormat(" (select dl.device_name as devicename,dl.ip as ipaddress,dl.ou_longname as ouname, convert(varchar,nt.servertime,105)+ ' ' + convert(varchar,nt.servertime,108) as servertime,convert(varchar,nt.device_timestamp,105)+ ' ' + convert(varchar,nt.device_timestamp,108) as devicetimestamp, ");
                        strQuery.AppendFormat(" nt.category_status,case nt.details when 'NA' then '' when null then '' when 'NULL' then '' else nt.details end as Message from device_master dm,node_audit_trail nt,device_linkage dl ");
                        strQuery.AppendFormat(" where dm.device_id=dl.device_id and dm.status<>-1   and dm.device_id = nt.device_id and dl.status<>-1 and nt.category_type <> 0 and nt.category_type in (13,14) and ");
                        strQuery.AppendFormat(" nt.category_subtype in ({1}) {0} ", fieldsearch, categorytype);
                        strQuery.AppendFormat(" ) T  order by devicetimestamp asc ");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Getpolicychartpopup Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Getpolicychartpopup Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable GetCompliancechartpopup(string fieldsearch, string SearchCond)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select device_name as devicename,ip as ipaddress,ou_longname as ouname ");
                        strQuery.AppendFormat(" from device_linkage  where device_id in (select device_id from compliance_management_summary where {0}) {1}", SearchCond, fieldsearch);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select device_name as devicename,ip as ipaddress,ou_longname as ouname ");
                        strQuery.AppendFormat(" from device_linkage  where device_id in (select device_id from compliance_management_summary where {0}) {1}", SearchCond, fieldsearch);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "GetCompliancechartpopup Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "GetCompliancechartpopup Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable GetCompliancechartpopupDomain(string fieldsearch)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select distinct device_name as devicename,ip as ipaddress,ou_longname as ouname,data1 as DomainName from node_system_info ns,device_linkage dl  where ns.device_id=dl.device_id   and dl.status <>-1  and  data_type=1  and data_subtype=2  and data1 not like 'NSG%' {0}", fieldsearch);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select distinct device_name as devicename,ip as ipaddress,ou_longname as ouname,data1 as DomainName from node_system_info ns,device_linkage dl  where ns.device_id=dl.device_id   and dl.status <>-1  and  data_type=1  and data_subtype=2  and data1 not like 'NSG%' {0}", fieldsearch);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "GetCompliancechartpopupDomain Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "GetCompliancechartpopupDomain Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable GetCompliancechartpopupShare(string fieldsearch)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select distinct device_name as devicename,ip as ipaddress,ou_longname as ouname from device_linkage dl, node_share_info nsi where dl.device_id=nsi.device_id and dl.status <> -1 {0}", fieldsearch);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select distinct device_name as devicename,ip as ipaddress,ou_longname as ouname from device_linkage dl, node_share_info nsi where dl.device_id=nsi.device_id and dl.status <> -1 {0}", fieldsearch);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "GetCompliancechartpopupShare Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "GetCompliancechartpopupShare Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_HWaudittrail(string fieldsearch, string categorytype)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        //strQuery.AppendFormat(" select devicename,ipaddress,ouname,status,devicetimestamp,servertime,message from ( ");
                        //strQuery.AppendFormat(" select dl.device_name as devicename,dl.ip as ipaddress,dl.ou_longname as ouname, ");
                        //strQuery.AppendFormat(" case nt.category_type when 1 then 'Device' when 2 then 'Policy' when 3 then 'Compliance' when 9 then 'OwnYIT' when 10 then 'Remote' when 11 then 'Hardware' when 12 then 'Software' when 13 then 'Performance Monitoring' when 14 then 'Storage' when 15 then 'User' when 16 then 'Login' when 17 then 'Time' when 18 then 'Process' when 19 then 'Service' when 20 then 'Share' when 21 then 'Virus' end as Type,");
                        //strQuery.AppendFormat(" case nt.category_status when -2 then 'Failed' when -1 then 'Removed'  ");
                        //strQuery.AppendFormat(" when 0 then 'Down' when 1 then 'Added' when 2 then 'Running' when 3 then 'Warning' when 4 then 'Error' when 5 then 'Violation'  ");
                        //strQuery.AppendFormat(" when 6 then 'Time Difference' when 7 then 'Enabled' when 8 then 'Disabled' when 9 then 'Implement / Set' when 10 then 'Access'  ");
                        //strQuery.AppendFormat(" when 11 then 'Attempt' when 12 then 'Changed' when 13 then 'Detect' when 14 then 'Activation Code Already Exists'  ");
                        //strQuery.AppendFormat(" when 15 then 'Invalid Activation Code' when 16 then 'Client Limit Exceeded' when 17 then 'Updated' when 99 then 'General' end as Status, ");
                        //strQuery.AppendFormat(" convert(varchar,nt.servertime,105)+ ' ' + convert(varchar,nt.servertime,108) as servertime,convert(varchar,nt.device_timestamp,105)+ ' ' + convert(varchar,nt.device_timestamp,108) as devicetimestamp,nt.category_status,case nt.details when 'NA' then '' when null then '' when 'NULL' then '' else nt.details end as Message ");
                        //strQuery.AppendFormat(" from device_master dm,node_audit_trail nt,device_linkage dl where dm.device_id=dl.device_id and dm.status<>-1  ");
                        //strQuery.AppendFormat(" and dm.device_id = nt.device_id and dl.status<>-1   ");
                        //strQuery.AppendFormat(" and nt.category_type <> 0 and nt.category_type in ({1}) and nt.category_subtype in (0,101,111,112,113,134) and nt.details not like 'pnp entity%' {0} ", fieldsearch, categorytype);
                        //strQuery.AppendFormat(" ) T  order by devicetimestamp asc  ");

                        strQuery.AppendFormat(" select devicename,ipaddress,ouname,status,devicetimestamp,servertime,message from ( ");
                        strQuery.AppendFormat(" select dl.device_name as devicename,dl.ip as ipaddress,dl.ou_longname as ouname, ");
                        strQuery.AppendFormat(" case nt.category_type when 1 then 'Device' when 2 then 'Policy' when 3 then 'Compliance' when 9 then 'OwnYIT' when 10 then 'Remote' when 11 then 'Hardware' when 12 then 'Software' when 13 then 'Performance Monitoring' when 14 then 'Storage' when 15 then 'User' when 16 then 'Login' when 17 then 'Time' when 18 then 'Process' when 19 then 'Service' when 20 then 'Share' when 21 then 'Virus' end as Type,");
                        strQuery.AppendFormat(" case nt.category_status when -2 then 'Failed' when -1 then 'Removed'  ");
                        strQuery.AppendFormat(" when 0 then 'Down' when 1 then 'Added' when 2 then 'Running' when 3 then 'Warning' when 4 then 'Error' when 5 then 'Violation'  ");
                        strQuery.AppendFormat(" when 6 then 'Time Difference' when 7 then 'Enabled' when 8 then 'Disabled' when 9 then 'Implement / Set' when 10 then 'Access'  ");
                        strQuery.AppendFormat(" when 11 then 'Attempt' when 12 then 'Changed' when 13 then 'Detect' when 14 then 'Activation Code Already Exists'  ");
                        strQuery.AppendFormat(" when 15 then 'Invalid Activation Code' when 16 then 'Client Limit Exceeded' when 17 then 'Updated' when 99 then 'General' end as Status, ");
                        strQuery.AppendFormat(" convert(varchar,nt.servertime,105)+ ' ' + convert(varchar,nt.servertime,108) as servertime,convert(varchar,nt.device_timestamp,105)+ ' ' + convert(varchar,nt.device_timestamp,108) as devicetimestamp,nt.category_status,case nt.details when 'NA' then '' when null then '' when 'NULL' then '' else nt.details end as Message ");
                        strQuery.AppendFormat(" from device_master dm,node_audit_trail nt,device_linkage dl,ou_nodelinkage ou where dm.device_id=dl.device_id and dm.status<>-1  ");
                        strQuery.AppendFormat(" and dm.device_id = nt.device_id and dl.status<>-1  and dl.ou_id = ou.ou_nodelinkage_ouid ");
                        strQuery.AppendFormat(" and nt.category_type <> 0 and nt.category_type in ({1}) and nt.category_subtype in (0,101,111,112,113,134) and nt.details not like 'pnp entity%' {0} ", fieldsearch, categorytype);
                        strQuery.AppendFormat(" ) T  order by devicetimestamp asc  ");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select devicename,ipaddress,ouname,status,devicetimestamp,servertime,message from ( ");
                        strQuery.AppendFormat(" select dl.device_name as devicename,dl.ip as ipaddress,dl.ou_longname as ouname, ");
                        strQuery.AppendFormat(" case nt.category_type when 1 then 'Device' when 2 then 'Policy' when 3 then 'Compliance' when 9 then 'OwnYIT' when 10 then 'Remote' when 11 then 'Hardware' when 12 then 'Software' when 13 then 'Performance Monitoring' when 14 then 'Storage' when 15 then 'User' when 16 then 'Login' when 17 then 'Time' when 18 then 'Process' when 19 then 'Service' when 20 then 'Share' when 21 then 'Virus' end as Type,");
                        strQuery.AppendFormat(" case nt.category_status when -2 then 'Failed' when -1 then 'Removed'  ");
                        strQuery.AppendFormat(" when 0 then 'Down' when 1 then 'Added' when 2 then 'Running' when 3 then 'Warning' when 4 then 'Error' when 5 then 'Violation'  ");
                        strQuery.AppendFormat(" when 6 then 'Time Difference' when 7 then 'Enabled' when 8 then 'Disabled' when 9 then 'Implement / Set' when 10 then 'Access'  ");
                        strQuery.AppendFormat(" when 11 then 'Attempt' when 12 then 'Changed' when 13 then 'Detect' when 14 then 'Activation Code Already Exists'  ");
                        strQuery.AppendFormat(" when 15 then 'Invalid Activation Code' when 16 then 'Client Limit Exceeded' when 17 then 'Updated' when 99 then 'General' end as Status, ");
                        strQuery.AppendFormat(" cast(date_format(nt.servertime,'%d-%m-%Y %H:%i:%s') as char) as servertime,cast(date_format(nt.device_timestamp,'%d-%m-%Y %H:%i:%s') as char) as device_timestamp,nt.category_status,case nt.details when 'NA' then '' when null then '' when 'NULL' then '' else nt.details end as Message ");
                        strQuery.AppendFormat(" from device_master dm,node_audit_trail nt,device_linkage dl where dm.device_id=dl.device_id and dm.status<>-1  ");
                        strQuery.AppendFormat(" and dm.device_id = nt.device_id and dl.status<>-1   ");
                        strQuery.AppendFormat(" and nt.category_type <> 0 and nt.category_type in ({1}) and nt.category_subtype in (0,101,111,112,113,134) and nt.details not like 'pnp entity%' {0} ", fieldsearch, categorytype);
                        strQuery.AppendFormat(" ) T  order by devicetimestamp asc  ");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_HWaudittrail Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_HWaudittrail Exception : " + ex.Message.ToString());
            }
            return data_table;
        }



        public string get_ouid(string ou)
        {
            string ouid = "";
            StringBuilder strQuery = new StringBuilder();
            try
            {

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select top 1 ou_nodelinkage_ouid from ou_nodelinkage where ou_nodelinkage_nodename='" + ou + "'");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select ou_nodelinkage_ouid from ou_nodelinkage where ou_nodelinkage_nodename='" + ou + "'");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "get_ouid Query : " + strQuery.ToString());
                ouid = this.database.getValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "get_ouid Exception : " + ex.Message.ToString());
            }
            return ouid;
        }

        public DataTable GetRawDataLeakagechartdata(string FieldSerach)
        {
            StringBuilder strQuery = new StringBuilder();

            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        //strQuery.AppendFormat(" select convert(varchar,server_time,105) + ' ' + convert(varchar,server_time,108) as 'TimeStamp',dl.device_name as 'SystemName', dl.ip as IP,case destination_path when 'NA' then '' when null then '' else parsename(destination_path,1) end as 'Filetype',case type when 1 then 'HDD to USB' when 2 then 'USB to HDD' when 3 then 'Share to HDD' when 4 then 'Share to Removable' when 5 then 'HDD to CDDrive' end as Media,case source_path when 'NA' then '' when null then '' else source_path end as source_path,case destination_path when 'NA' then '' when null then '' else destination_path end as destination_path, ");
                        //strQuery.AppendFormat(" cast(isnull(cast(size as decimal)/1024,'0') as decimal(18,3)) as size ,dl.ou_longname from node_data_leakage e, device_linkage dl where dl.device_id = e.device_id  and dl.status <>-1 and size!=0  {0}", FieldSerach);

                        //strQuery.AppendFormat(" select convert(varchar,server_time,105) + ' ' + convert(varchar,server_time,108) as 'TimeStamp',dl.device_name as 'SystemName', dl.ip as IP,case source_path when 'NA' then '' when null then '' else parsename(source_path,1) end as 'Filetype',case type when 1 then 'Create' when 2 then 'Change' when 3 then 'Rename' when 4 then 'Delete' end as type1, case type when 3 then source_path + ' to ' + destination_path else source_path end as filepath,case source_path when 'NA' then '' when null then '' else source_path end as source_path,case destination_path when 'NA' then '' when null then '' else destination_path end as destination_path, ");
                        //strQuery.AppendFormat(" cast(isnull(cast(size as decimal)/1024,'0') as decimal(18,3)) as size ,dl.ou_longname from node_data_leakage e, device_linkage dl where dl.device_id = e.device_id  and dl.status <>-1 and size!=0  {0}", FieldSerach);

                        //strQuery.AppendFormat(" select convert(varchar,server_time,105) + ' ' + convert(varchar,server_time,108) as 'TimeStamp',dl.device_name as 'SystemName', dl.ip as IP,case source_path when 'NA' then '' when null then '' else parsename(source_path,1) end as 'Filetype',case type when 1 then 'Create' when 2 then 'Change' when 3 then 'Rename' when 4 then 'Delete' end as type1, case type when 3 then source_path + ' to ' + destination_path else source_path end as filepath,case source_path when 'NA' then '' when null then '' else source_path end as source_path,case destination_path when 'NA' then '' when null then '' else destination_path end as destination_path, ");
                        //strQuery.AppendFormat(" cast(isnull(cast(size as decimal)/1024,'0') as decimal(18,3)) as size ,dl.ou_longname from node_data_leakage e, device_linkage dl where dl.device_id = e.device_id  and dl.status <>-1 and e.type in (1,2,3,4) {0}", FieldSerach);

                        strQuery.AppendFormat(" select distinct convert(varchar,server_time,105) + ' ' + substring(convert(varchar,server_time,108),1,5) as 'TimeStamp',dl.device_name as 'SystemName', dl.ip as IP,case source_path when 'NA' then '' when null then '' else parsename(source_path,1) end as 'Filetype',case type when 1 then 'Create' when 2 then 'Change' when 3 then 'Rename' when 4 then 'Delete' end as type1, case type when 3 then source_path + ' to ' + destination_path else source_path end as filepath,case source_path when 'NA' then '' when null then '' else source_path end as source_path,case destination_path when 'NA' then '' when null then '' else destination_path end as destination_path, ");
                        strQuery.AppendFormat(" cast(isnull(cast(size as decimal)/1024,'0') as decimal(18,3)) as size ,dl.ou_longname from node_data_leakage e, device_linkage dl where dl.device_id = e.device_id  and dl.status <>-1 and e.type in (1,2,3,4) {0}", FieldSerach);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select cast(date_format(server_time,'%d-%m-%Y %H:%i:%s') as char) as 'TimeStamp',dl.device_name as 'SystemName', dl.ip as IP,case destination_path when 'NA' then '' when null then '' else SUBSTRING_INDEX(destination_path,'.',-1) end as 'Filetype',case type when 1 then 'HDD to USB' when 2 then 'USB to HDD' when 3 then 'Share to HDD' when 4 then 'Share to Removable' when 5 then 'HDD to CDDrive' end as Media,case source_path when 'NA' then '' when null then '' else source_path end as source_path,case destination_path when 'NA' then '' when null then '' else destination_path end as destination_path, ");
                        strQuery.AppendFormat(" cast(ifnull(cast(size as decimal)/1024,'0') as decimal(18,3)) as size ,dl.ou_longname from node_data_leakage e, device_linkage dl where dl.device_id = e.device_id  and dl.status <>-1 and size!=0  {0}", FieldSerach);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "GetRawDataLeakagechartdata Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "GetRawDataLeakagechartdata Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        public DataTable GetPrinterUsagechartdata(string FieldSerach)
        {
            StringBuilder strQuery = new StringBuilder();

            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select convert(varchar,device_timestamp,105) + ' ' + convert(varchar,device_timestamp,108) as device_timestamp,dl.device_name,ip,user_name,printer_name,doc,ou_node_name,total_pages,location_name from node_printer_info p, device_linkage dl  ");
                        strQuery.AppendFormat(" where p.device_id = dl.device_id and dl.status<>-1  {0}", FieldSerach);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select cast(date_format(device_timestamp,'%d-%m-%Y %H:%i:%s') as char) as device_timestamp,dl.device_name,ip,user_name,printer_name,doc,ou_node_name,total_pages,location_name from node_printer_info p, device_linkage dl ");
                        strQuery.AppendFormat(" where p.device_id = dl.device_id and dl.status<>-1  {0}", FieldSerach);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "GetPrinterUsagechartdata Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "GetPrinterUsagechartdata Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        public DataTable GetModemUsagechartdata(string FieldSerach)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "GetModemUsagechartdata Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "GetModemUsagechartdata Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        public DataTable GetRemovableMediachartdata(string FieldSerach, string startdate, string enddate)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        //strQuery.AppendFormat("select ou_id,ou_node_name,device_name,ip,login_user,e110deviceused,e110activity,e110starttime,e110endtime,case diff when null then '' else cast(diff/3600 as varchar) + ':' + cast((diff%3600)/60 as varchar) + ':' + cast(diff%60 as varchar) end as duration,diff,e110serverstarttime, e110serverendtime ");
                        //strQuery.AppendFormat("from ( select dl.ou_id, dl.ou_node_name, dl.device_name, dl.ip, case nui.login_user when 'NA' then '' when null then '' else nui.login_user end as login_user,e110deviceused, e110activity, convert(varchar, e110starttime, 105) + ' ' + convert(varchar, e110starttime, 108) as e110starttime, ");
                        //strQuery.AppendFormat("case convert(varchar, e110endtime, 120) when null then '' else convert(varchar, e110endtime, 105) + ' ' + convert(varchar, e110endtime, 108) end as e110endtime, datediff(ss,isnull(e110starttime,'{0}'),isnull(e110endtime,case when ('{1}' > convert(varchar, getdate(),120)) then getdate() end )) as diff, e110serverstarttime, e110serverendtime ", startdate, enddate);
                        //strQuery.AppendFormat("from e110userremovable r, device_linkage dl, node_user_info nui where dl.device_id = r.e110deviceid and nui.device_id = r.e110deviceid and dl.status <> -1 and e110deviceused <> 'modem' {0} ) t1 ", FieldSerach);

                        //strQuery.AppendFormat("select ou_id,ou_node_name,device_name,ip,login_user,e110deviceused,e110activity,e110starttime,e110endtime,case diff when null then '' else cast(diff/3600 as varchar) + ':' + cast((diff%3600)/60 as varchar) + ':' + cast(diff%60 as varchar) end as duration,diff,e110serverstarttime, e110serverendtime ");
                        //strQuery.AppendFormat("from ( select dl.ou_id, dl.ou_node_name, dl.device_name, dl.ip, case nui.login_user when 'NA' then '' when null then '' else nui.login_user end as login_user,e110deviceused, e110activity, convert(varchar, e110starttime, 105) + ' ' + convert(varchar, e110starttime, 108) as e110starttime, ");
                        //strQuery.AppendFormat("case convert(varchar, e110endtime, 120) when null then '' else convert(varchar, e110endtime, 105) + ' ' + convert(varchar, e110endtime, 108) end as e110endtime, datediff(ss,isnull(e110starttime,'{0}'),isnull(e110endtime,case when ('{1}' > convert(varchar, getdate(),120)) then getdate() end )) as diff, e110serverstarttime, e110serverendtime ", startdate, enddate);
                        //strQuery.AppendFormat("from e110userremovable r, device_linkage dl, node_user_info nui where dl.device_id = r.e110deviceid and nui.device_id = r.e110deviceid and dl.status <> -1 and e110deviceused <> 'modem' {0} ) t1 ", FieldSerach);

                        strQuery.AppendFormat("select dl.ou_id,dl.ou_node_name,device_name,ip,login_user,e110deviceused,e110activity,e110serverstarttime,e110serverendtime  ");
                        strQuery.AppendFormat(" from e110userremovable r ,device_linkage dl ,node_user_info nui ");
                        strQuery.AppendFormat(" where r.e110deviceid= dl.device_id and r.e110deviceid= nui.device_id  and dl.status <> -1 and E110DeviceUsed <> 'Modem' ");
                        strQuery.AppendFormat(" and ((E110ServerStartTime > '{0}' and E110ServerStartTime < '{1}') or (E110ServerEndTime >'{0}'  and E110ServerEndTime <'{1}' )  )", startdate,enddate);
                        


                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select ou_id,ou_node_name,device_name,ip,login_user,e110deviceused,e110activity,e110starttime,e110endtime,case diff when null then '' else concat(floor(diff/3600) , ':' , floor((diff%3600)/60) , ':' , floor(diff%60)) end as duration,diff,e110serverstarttime, e110serverendtime ");
                        strQuery.AppendFormat("from ( select dl.ou_id, dl.ou_node_name, dl.device_name, dl.ip, case nui.login_user when 'NA' then '' when null then '' else nui.login_user end as login_user,e110deviceused, e110activity, cast(date_format(e110starttime,concat('%d-%m-%y %H:%i:%s')) as char) as e110starttime, ");
                        strQuery.AppendFormat("case cast(date_format(e110endtime,concat('%y-%m-%d %H:%i:%s')) as char) when null then '' else cast(date_format(e110endtime,concat('%d-%m-%y %H:%i:%s')) as char) end as e110endtime, timestampdiff(second,ifnull(e110starttime,'{0}'),ifnull(e110endtime,case when ('{1}' > date_format(now(),'%y-%m-%d 23:59:59')) then now() end )) as diff, e110serverstarttime, e110serverendtime ", startdate, enddate);
                        strQuery.AppendFormat("from e110userremovable r, device_linkage dl, node_user_info nui where dl.device_id = r.e110deviceid and nui.device_id = r.e110deviceid and dl.status <> -1 and e110deviceused <> 'modem' {0} ) t1 ", FieldSerach);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "GetRemovableMediachartdata Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "GetRemovableMediachartdata Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        // Get PCConnectivity chart data
        public DataTable GetPCConnectivitychartdata(string FieldSerach)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select  distinct  convert(varchar,dl.datetime,105) + ' ' + convert(varchar,dl.datetime,108) as datetime,dl.ou_longname,dl.device_name,dl.ip,");
                        strQuery.AppendFormat("isnull((select top 1 parameter_value from node_system_info_details nsd where nsd.type_id=8 and nsd.parameter_name='caption' and nsd.device_id=dl.device_id),'') + ' ' +");
                        strQuery.AppendFormat("isnull((select top 1 parameter_value from node_system_info_details nsd where nsd.type_id=8 and nsd.parameter_name='OSArchitecture' and nsd.device_id=dl.device_id),'') as os_name from device_linkage dl inner join device_master dm on dm.device_id=dl.device_id  ");
                        strQuery.AppendFormat("inner join ou_userroll ur  on dl.ou_id=ur.ou_userroll_ou_id left outer join node_system_info_details  nsd on dl.device_id=nsd.device_id ");
                        strQuery.AppendFormat(" where dl.status<> -1  and ur.ou_userroll_active = 1 and dm.device_typeint = '1'  and ur.ou_userroll_user_id=1  and dm.active = 1  and dm.device_mode in (1,2,3)  and dm.status not in (-1,90)  {0}", FieldSerach);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select  distinct cast(date_format(dl.datetime,'%d-%m-%Y %H:%i:%s') as char) as datetime,ou_longname,dl.device_name,dl.ip,ifnull(nsd.parameter_value,'') as os_name from device_linkage dl inner join device_master dm on dm.device_id=dl.device_id  ");
                        strQuery.AppendFormat(" inner join ou_userroll ur  on dl.ou_id=ur.ou_userroll_ou_id left outer join node_system_info_details  nsd on dl.device_id=nsd.device_id and nsd.type_id=8 and parameter_name='caption'");
                        strQuery.AppendFormat(" where dl.status<> -1  and ur.ou_userroll_active = 1 and dm.device_typeint = '1'  and ur.ou_userroll_user_id=1  and dm.active = 1  and dm.device_mode in (1,2,3)  and dm.status not in (-1,90)  {0}", FieldSerach);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "GetPCConnectivitychartdata Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "GetPCConnectivitychartdata Exception : " + ex.Message.ToString());
            }
            return data_table;
        }


        public DataTable GetPCConnectivitychartdata1(string FieldSerach)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        //strQuery.AppendFormat(" select distinct dl.device_name,dl.ip from new_device_details dl where dl.status=1 and mac not in (select distinct mac from device_master) and activedevice=1 {0} ", FieldSerach);
                        strQuery.AppendFormat(" select distinct dl.device_name,dl.ip from new_device_details dl where dl.status=1 and mac not in (select distinct mac from device_master where device_mode <> 0) and activedevice=1 and len(dl.device_name) > 0 and status<> -1 {0} ", FieldSerach);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        //strQuery.AppendFormat(" select distinct dl.device_name,dl.ip from new_device_details dl where dl.status=1 and mac not in (select distinct mac from device_master) and activedevice=1 {0} ", FieldSerach);
                        strQuery.AppendFormat(" select distinct dl.device_name,dl.ip from new_device_details dl where dl.status=1 and mac not in (select distinct mac from device_master where device_mode <> 0) and activedevice=1 and length(dl.device_name) > 0 and status<> -1 {0} ", FieldSerach);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "GetPCConnectivitychartdata1 Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "GetPCConnectivitychartdata1 Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        public DataTable GetCSATAuditProcesschartdata1(string FieldSerach)
        {
            StringBuilder strQuery = new StringBuilder();

            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select dl.ou_longname,dl.device_name,dl.ip,npi.process_name,case npi.process_exec_path when '0' then '' else npi.process_exec_path end as process_exec_path,npi.process_desc,");
                        strQuery.AppendFormat(" case pa.authorizetype when '0' then 'Unauthorise' when '1' then 'Authorise' else 'Remaining' end as 'Status' from node_process_info npi left outer join authorizedata pa ");
                        strQuery.AppendFormat(" on npi.process_name=pa.typename inner join device_linkage dl  on dl.device_id=npi.device_id {0} ", FieldSerach);
                        break;

                }
                objcommon.WriteLog("DBQueryHandler", "GetCSATAuditProcesschartdata1 Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "GetCSATAuditProcesschartdata1 Exception : " + ex.Message.ToString());
            }
            return data_table;
        }


        public DataTable GetCSATAuditSoftwarechartdata1(string FieldSerach)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select dl.ou_longname,dl.device_name,dl.ip,npi.software,case npi.publisher when '0' then '' else npi.publisher end as publisher,case convert(varchar, npi.date,120) when 'NA' then '' when '0' then '' when null then '' else convert(varchar, convert(varchar,npi.date + ' 00:00:00',120),105) end as date,");
                        strQuery.AppendFormat(" case pa.authorizetype when '0' then 'Unauthorise' when '1' then 'Authorise' else 'Remaining' end as 'Status' from nodesoftwaredetails npi left outer join authorizedata pa ");
                        strQuery.AppendFormat(" on npi.software=pa.typename inner join device_linkage dl  on dl.device_id=npi.deviceid and npi.software <> '0' {0} ", FieldSerach);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select dl.ou_longname,dl.device_name,dl.ip,npi.software,case npi.publisher when '0' then '' else npi.publisher end as publisher,case cast(date_format(npi.date,'%Y-%m-%d') as char) when 'NA' then '' when '0' then '' when null then '' else cast(date_format(npi.date,'%d-%m-%Y') as char) end as date,");
                        strQuery.AppendFormat(" case pa.authorizetype when '0' then 'Unauthorise' when '1' then 'Authorise' else 'Remaining' end as 'Status' from nodesoftwaredetails npi left outer join authorizedata pa ");
                        strQuery.AppendFormat(" on npi.software=pa.typename inner join device_linkage dl  on dl.device_id=npi.deviceid and npi.software <> '0' {0} ", FieldSerach);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "GetCSATAuditSoftwarechartdata1 Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "GetCSATAuditSoftwarechartdata1 Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        public DataTable GetCSATAuditUserchartdata1(string FieldSerach)
        {
            StringBuilder strQuery = new StringBuilder();

            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select dl.ou_longname,dl.device_name,dl.ip,ut.username,case ut.domain_name when '0' then '' else ut.domain_name end as domain_name,ut.status,case ut.description when 'NA' then '' else ut.description end as description, ");
                        strQuery.AppendFormat(" case ut.username when 'Administrator' then 'Admin' else 'User' end as 'usertype' from user_table ut ");
                        strQuery.AppendFormat(" inner join device_linkage dl  on dl.device_id=ut.device_id where local_account='-1' {0} ", FieldSerach);
                        break;

                }
                objcommon.WriteLog("DBQueryHandler", "GetCSATAuditUserchartdata1 Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "GetCSATAuditUserchartdata1 Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        #endregion
        #region Hardware Information Report
        public DataTable Get_Hardware_detaildata(string search)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select details,sum(occurance) as occurance,hardware_class from (");
                        strQuery.AppendFormat(" select distinct  t.details ,count( t.device_id)as occurance,t.hardware_class,ip,device_name,ou_id from ");
                        strQuery.AppendFormat(" ( select distinct  nh.Device_id,nh.details,case hardware_class when 'Port/MotherBoard' then 'PortMotherBoard' else hardware_class end as hardware_class,dl.ip,dl.device_name,dl.ou_id ");
                        strQuery.AppendFormat(" from node_hardware_info nh,device_linkage dl where dl.device_id=nh.device_id and dl.status <>-1 and  hardware_class not in ('Account', ");
                        strQuery.AppendFormat(" 'POTSModem','DisplayConfiguration','Desktop') and hw_json <>'' ) t group by t.details,t.hardware_class,ip,device_name,ou_id ");
                        strQuery.AppendFormat(" union select distinct t.details,count(t.device_id) as occurance, t.hardware_class,ip,device_name,ou_id from (select distinct drive_type as details,dl.device_id, 'HardDisk' as hardware_class,dl.ip,dl.device_name,dl.ou_id ");
                        strQuery.AppendFormat(" from node_drive_info ndi , device_linkage dl  where disk_size > 0  and ndi.device_id=dl.device_id) t group by t.details, t.hardware_class,ip,device_name,ou_id union ");
                        strQuery.AppendFormat(" select distinct t.details,count(t.mac) as occurance, t.hardware_class,ip,device_name,ou_id from (select distinct name as details,nnci.mac, 'NicCard' as hardware_class,dl.ip,dl.device_name,dl.ou_id ");
                        strQuery.AppendFormat(" from node_networkcard_info nnci, device_linkage dl where connection_id <> '0' and dl.device_id=nnci.device_id) t group by t.details, t.hardware_class,ip,device_name,ou_id ");
                        strQuery.AppendFormat(" )t1 {0}  group by details,hardware_class order by hardware_class  ", search);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select details,sum(occurance) as occurance,hardware_class from (");
                        strQuery.AppendFormat(" select distinct  t.details ,count( t.device_id)as occurance,t.hardware_class,ip,device_name,ou_id from ");
                        strQuery.AppendFormat(" ( select distinct  nh.Device_id,nh.details,case hardware_class when 'Port/MotherBoard' then 'PortMotherBoard' else hardware_class end as hardware_class,dl.ip,dl.device_name,dl.ou_id ");
                        strQuery.AppendFormat(" from node_hardware_info nh,device_linkage dl where dl.device_id=nh.device_id and dl.status <>-1 and  hardware_class not in ('Account', ");
                        strQuery.AppendFormat(" 'POTSModem','DisplayConfiguration','Desktop') and hw_json <>'' ) t group by t.details,t.hardware_class,ip,device_name,ou_id ");
                        strQuery.AppendFormat(" union select distinct t.details,count(t.device_id) as occurance, t.hardware_class,ip,device_name,ou_id from (select distinct drive_type as details,dl.device_id, 'HardDisk' as hardware_class,dl.ip,dl.device_name,dl.ou_id ");
                        strQuery.AppendFormat(" from node_drive_info ndi , device_linkage dl  where disk_size > 0  and ndi.device_id=dl.device_id) t group by t.details, t.hardware_class,ip,device_name,ou_id union ");
                        strQuery.AppendFormat(" select distinct t.details,count(t.mac) as occurance, t.hardware_class,ip,device_name,ou_id from (select distinct name as details,nnci.mac, 'NicCard' as hardware_class,dl.ip,dl.device_name,dl.ou_id ");
                        strQuery.AppendFormat(" from node_networkcard_info nnci, device_linkage dl where connection_id <> '0' and dl.device_id=nnci.device_id) t group by t.details, t.hardware_class,ip,device_name,ou_id ");
                        strQuery.AppendFormat(" )t1 {0}  group by details,hardware_class order by hardware_class  ", search);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Hardware_detaildata Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Hardware_detaildata Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        public DataTable Show_Hardware_detaildata(string hwclass, string detail, string search)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    //case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    //    strQuery.AppendFormat(" select distinct device_name,ip,ou_longname,hw_json,hardware_class from node_hardware_info nh,device_linkage dl ");
                    //    strQuery.AppendFormat(" where nh.device_id=dl.device_id and dl.status<>-1 ");
                    //    strQuery.AppendFormat(" and nh.Details='{0}' and nh.hardware_class='{1}' {2}  and  hardware_class not in ('Account','MotherBoardDevice', ", detail, hwclass, search);
                    //    strQuery.AppendFormat(" 'ParallelPort','Port/MotherBoard') and hw_json <>'' order by ou_longname ");
                    //    break;
                    //case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                    //    strQuery.AppendFormat(" select distinct device_name,ip,ou_longname,hw_json,hardware_class from node_hardware_info nh,device_linkage dl ");
                    //    strQuery.AppendFormat(" where nh.device_id=dl.device_id and dl.status<>-1 ");
                    //    strQuery.AppendFormat(" and nh.Details='{0}' and nh.hardware_class='{1}' {2}  and  hardware_class not in ('Account','MotherBoardDevice', ", detail, hwclass, search);
                    //    strQuery.AppendFormat(" 'ParallelPort','Port/MotherBoard') and hw_json <>'' order by ou_longname ");
                    //    break;
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        if (hwclass == "HardDisk")
                            strQuery.AppendFormat(" select distinct device_name,ip,ou_longname,drive_type,disk_deviceid,disk_model,disk_serial_number,cast(disk_size/1024/1024/1024 as varchar) + ' GB' as disk_size,'HardDisk' as hardware_class from node_drive_info nd,device_linkage dl where nd.device_id=dl.device_id and disk_size > 0 and drive_type = '{0}' {1}", detail, search);
                        else if (hwclass == "NicCard")
                            strQuery.AppendFormat(" select distinct device_name,ip,ou_longname,name,connection_id,manufacturer,mac,adapter_type,service_name,speed_bps,convert(varchar,last_reset_time,105) + ' ' + convert(varchar,last_reset_time,108) as last_reset_time,'NicCard' as hardware_class from node_networkcard_info nn,device_linkage dl where nn.device_id=dl.device_id and connection_id <> '0' and name = '{0}' {1}", detail, search);
                        else
                            strQuery.AppendFormat(" select distinct device_name,ip,ou_longname,hw_json,hardware_class from node_hardware_info nh,device_linkage dl where nh.device_id=dl.device_id and dl.status<>-1 and nh.Details='{0}' and nh.hardware_class='{1}' {2}  and  hardware_class not in ('Account','POTSModem','DisplayConfiguration','Desktop') and hw_json <>'' order by ou_longname ", detail, hwclass, search);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        if (hwclass == "HardDisk")
                            strQuery.AppendFormat(" select distinct device_name,ip,ou_longname,drive_type,disk_deviceid,disk_model,disk_serial_number,concat(cast(disk_size/1024/1024/1024 as UNSIGNED), ' GB') as disk_size,'HardDisk' as hardware_class from node_drive_info nd,device_linkage dl where nd.device_id=dl.device_id and disk_size > 0 and drive_type = '{0}' {1}", detail, search);
                        else if (hwclass == "NicCard")
                            strQuery.AppendFormat(" select distinct device_name,ip,ou_longname,name,connection_id,manufacturer,mac,adapter_type,service_name,speed_bps, cast(date_format(last_reset_time,'%d-%m-%Y %H:%i:%s') as char) as last_reset_time,'NicCard' as hardware_class from node_networkcard_info nn,device_linkage dl where nn.device_id=dl.device_id and connection_id <> '0' and name = '{0}' {1}", detail, search);
                        else
                            strQuery.AppendFormat(" select distinct device_name,ip,ou_longname,hw_json,hardware_class from node_hardware_info nh,device_linkage dl where nh.device_id=dl.device_id and dl.status<>-1 and nh.Details='{0}' and nh.hardware_class='{1}' {2}  and  hardware_class not in ('Account','POTSModem','DisplayConfiguration','Desktop') and hw_json <>'' order by ou_longname ", detail, hwclass, search);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Show_Hardware_detaildata Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Show_Hardware_detaildata Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        public DataTable Show_HardwareWise_detaildata(string hwclass, string detail, string search)
        {
            StringBuilder strQuery = new StringBuilder();

            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select distinct ou_id,ou_longname,device_name,ip,t.hardware_class,t.details,hw_json,disk_deviceid,disk_model,disk_serial_number,disk_size,connection_id,manufacturer,mac,adapter_type,service_name,speed_bps,last_reset_time ");
                        strQuery.AppendFormat("from (select distinct ou_id,ou_longname,device_name,ip,case hardware_class when 'Port/MotherBoard' then 'PortMotherBoard' else hardware_class end as hardware_class,details,hw_json,'' as disk_deviceid,'' as disk_model,'' as disk_serial_number,'' as disk_size,'' as connection_id,'' as manufacturer,'' as mac,'' as adapter_type,'' as service_name,'' as speed_bps,'' as last_reset_time from node_hardware_info nh,device_linkage dl where nh.device_id=dl.device_id and dl.status<>-1 and ");
                        strQuery.AppendFormat("nh.Details in ({0}) and nh.hardware_class in ({1}) {2} and  hardware_class not in ('Account', ", detail, hwclass, search);
                        strQuery.AppendFormat("'POTSModem','DisplayConfiguration','Desktop') and hw_json <>'' ");
                        strQuery.AppendFormat("union select distinct dl.ou_id,dl.ou_longname,dl.device_name,dl.ip,'HardDisk' as hardware_class,drive_type as details,'' as hw_json,disk_deviceid,disk_model,disk_serial_number,cast(disk_size/1024/1024/1024 as varchar) + ' GB' as disk_size,'' as connection_id,'' as manufacturer,'' as mac,'' as adapter_type,'' as service_name,'' as speed_bps,'' as last_reset_time from node_drive_info ndi, device_linkage dl where disk_size > 0  and ndi.device_id=dl.device_id and drive_type in ({0}) ", detail);
                        strQuery.AppendFormat("union select distinct dl.ou_id,dl.ou_longname,dl.device_name,dl.ip,'NicCard' as hardware_class,name as details,'' as hw_json,'' as disk_deviceid,'' as disk_model,'' as disk_serial_number,'' as disk_size,connection_id,manufacturer,mac,adapter_type,service_name,speed_bps,convert(varchar,last_reset_time,105) + ' ' + convert(varchar,last_reset_time,108) as last_reset_time from node_networkcard_info nn,device_linkage dl where nn.device_id=dl.device_id and connection_id <> '0' and name in ({0}) ", detail);
                        strQuery.AppendFormat(") t order by ou_longname,hardware_class ");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select distinct ou_id,ou_longname,device_name,ip,t.hardware_class,t.details,hw_json,disk_deviceid,disk_model,disk_serial_number,disk_size,connection_id,manufacturer,mac,adapter_type,service_name,speed_bps,last_reset_time ");
                        strQuery.AppendFormat("from (select distinct ou_id,ou_longname,device_name,ip,case hardware_class when 'Port/MotherBoard' then 'PortMotherBoard' else hardware_class end as hardware_class,details,hw_json,'' as disk_deviceid,'' as disk_model,'' as disk_serial_number,'' as disk_size,'' as connection_id,'' as manufacturer,'' as mac,'' as adapter_type,'' as service_name,'' as speed_bps,'' as last_reset_time from node_hardware_info nh,device_linkage dl where nh.device_id=dl.device_id and dl.status<>-1 and ");
                        strQuery.AppendFormat("nh.Details in ({0}) and nh.hardware_class in ({1}) {2} and  hardware_class not in ('Account', ", detail, hwclass, search);
                        strQuery.AppendFormat("'POTSModem','DisplayConfiguration','Desktop') and hw_json <>'' ");
                        strQuery.AppendFormat("union select distinct dl.ou_id,dl.ou_longname,dl.device_name,dl.ip,'HardDisk' as hardware_class,drive_type as details,'' as hw_json,disk_deviceid,disk_model,disk_serial_number,concat(cast(disk_size/1024/1024/1024 as UNSIGNED), ' GB') as disk_size,'' as connection_id,'' as manufacturer,'' as mac,'' as adapter_type,'' as service_name,'' as speed_bps,'' as last_reset_time from node_drive_info ndi, device_linkage dl where disk_size > 0  and ndi.device_id=dl.device_id and drive_type in ({0}) ", detail);
                        strQuery.AppendFormat("union select distinct dl.ou_id,dl.ou_longname,dl.device_name,dl.ip,'NicCard' as hardware_class,name as details,'' as hw_json,'' as disk_deviceid,'' as disk_model,'' as disk_serial_number,'' as disk_size,connection_id,manufacturer,mac,adapter_type,service_name,speed_bps,cast(date_format(last_reset_time,'%d-%m-%Y %H:%i:%s') as char) as last_reset_time from node_networkcard_info nn,device_linkage dl where nn.device_id=dl.device_id and connection_id <> '0' and name in ({0}) ", detail);
                        strQuery.AppendFormat(") t order by ou_longname,hardware_class ");
                        break;

                        //case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        //    strQuery.AppendFormat(" select distinct device_name,ip,ou_longname,hw_json,hardware_class,details from node_hardware_info nh,device_linkage dl ");
                        //    strQuery.AppendFormat(" where nh.device_id=dl.device_id and dl.status<>-1 ");
                        //    strQuery.AppendFormat(" and nh.Details in ({0}) and nh.hardware_class in ({1}) {2} and  hardware_class not in ('Account','MotherBoardDevice', ", detail, hwclass, search);
                        //    strQuery.AppendFormat(" 'ParallelPort','Port/MotherBoard') and hw_json <>'' order by ou_longname ");
                        //    break;
                        //case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        //    strQuery.AppendFormat(" select distinct device_name,ip,ou_longname,hw_json,hardware_class,details from node_hardware_info nh,device_linkage dl ");
                        //    strQuery.AppendFormat(" where nh.device_id=dl.device_id and dl.status<>-1 ");
                        //    strQuery.AppendFormat(" and nh.Details in ({0}) and nh.hardware_class in ({1}) {2} and  hardware_class not in ('Account','MotherBoardDevice', ", detail, hwclass, search);
                        //    strQuery.AppendFormat(" 'ParallelPort','Port/MotherBoard') and hw_json <>'' order by ou_longname ");
                        //    break;
                }
                objcommon.WriteLog("DBQueryHandler", "Show_HardwareWise_detaildata Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Show_HardwareWise_detaildata Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        #endregion

        #region ou_nodelinkage_allchild
        public string get_ou_nodelinkage_allchild(string ouid)
        {
            string ou_nodelinkage_allchild = "";
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select ou_nodelinkage_allchild from ou_nodelinkage where ou_nodelinkage_ouid ='" + ouid + "'");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select ou_nodelinkage_allchild from ou_nodelinkage where ou_nodelinkage_ouid ='" + ouid + "'");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "get_ou_nodelinkage_allchild Query : " + strQuery.ToString());
                ou_nodelinkage_allchild = this.database.getValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "get_ou_nodelinkage_allchild Exception : " + ex.Message.ToString());
            }
            return ou_nodelinkage_allchild;
        }
        #endregion

        #region Get Asset_mgmt_purchase 
        public DataTable Get_assetinfo_purchase(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select distinct cost, order_no, invoice_no, attachment, filename, remark from purchase_master where device_id = '{0}' ", deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_assetinfo_purchase Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_assetinfo_purchase Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        #endregion

        #region Get Asset_mgmt_AMCinfo 
        public DataTable Get_assetinfo_AMCinfo(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select distinct case  convert(varchar,warranty_from_date,105) when '01-01-1900' then '' else convert(varchar,warranty_from_date,105) end as warranty_from_date, ");
                        strQuery.AppendFormat("case convert(varchar, warranty_to_date, 105) when '01-01-1900' then '' else convert(varchar, warranty_to_date, 105) end as warranty_to_date, ");
                        strQuery.AppendFormat("case convert(varchar, amc_from_date, 105) when '01-01-1900' then '' else convert(varchar, amc_from_date, 105) end as amc_from_date, ");
                        strQuery.AppendFormat("case convert(varchar, amc_to_date, 105) when '01-01-1900' then '' else convert(varchar, amc_to_date, 105) end as amc_to_date,amc_vendor_name,amc_cost,vendor_location from amc_master where device_id = '{0}' ", deviceid);
                        //strQuery.AppendFormat("select distinct warranty_from_date,warranty_to_date,amc_from_date,amc_to_date,amc_vendor_name,amc_cost,vendor_location from amc_master where device_id = '{0}' ", deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_assetinfo_AMCinfo Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_assetinfo_AMCinfo Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        #endregion

        #region Get Asset_mgmt_Insuranceinfo 
        public DataTable Get_assetinfo_insurance(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select distinct insurance_party,insurance_party_name, case convert(varchar, insurance_from_date, 105) when '01-01-1900' then '' else convert(varchar, insurance_from_date, 105) end as insurance_from_date, ");
                        strQuery.AppendFormat("case convert(varchar, insurance_to_date, 105) when '01-01-1900' then '' else convert(varchar, insurance_to_date, 105) end as insurance_to_date,insurance_amount from insurance_master where device_id = '{0}' ", deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_assetinfo_insurance Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_assetinfo_insurance Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        #endregion

        #region hardware software vendor insert
        public int insert_hwvendor(string vname)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" insert into vendor_master(vendor_name) values('{0}')", vname);
                        break;
                }

                objcommon.WriteLog("DBQueryHandler", "insert_hwvendor Query : " + strQuery);
                result = this.database.execute(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "insert_hwvendor Exception : " + ex.Message.ToString());
            }
            return result;
        }

        public int insert_swvendor(string vname)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" insert into vendor_master(vendor_name) values('{0}')", vname);
                        break;
                }

                objcommon.WriteLog("DBQueryHandler", "insert_swvendor Query : " + strQuery);
                result = this.database.execute(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "insert_swvendor Exception : " + ex.Message.ToString());
            }
            return result;
        }
        #endregion

        #region Asset mgmt hardware software vendor report 
        public DataTable Get_hrdreport(string search)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select ouname,hardware_name,manufacture,model_no,case allocate_user when '1' then 'Yes' else 'No' end as allocate_user,user_name,vendorname,amc_vendor,po_no,invoice_no,convert(varchar,amc_fromto,105) as amc_fromto,convert(varchar,amc_end,105) as amc_end,convert(varchar,warranty_period_fromto,105) as warranty_period_fromto,convert(varchar,warranty_end,105) as warranty_end,convert(varchar,purchase_date,105) as purchase_date,quantity,amount,asset_id,machine_sr_no,attachment,remark from offline_hardware_master where hardware_name <> '' {0}", search);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select ouname,hardware_name,manufacture,model_no,case allocate_user when '1' then 'Yes' else 'No' end as allocate_user,user_name,vendorname,amc_vendor,po_no,invoice_no,cast(date_format(amc_fromto,'%d-%m-%Y') as char) as amc_fromto,cast(date_format(amc_end,'%d-%m-%Y') as char) as amc_end,cast(date_format(warranty_period_fromto,'%d-%m-%Y') as char) as warranty_period_fromto,cast(date_format(warranty_end,'%d-%m-%Y') as char) as warranty_end,cast(date_format(purchase_date,'%d-%m-%Y') as char) as purchase_date,quantity,amount,asset_id,machine_sr_no,attachment,remark from offline_hardware_master where hardware_name <> '' {0}", search);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_hrdreport Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_hrdreport Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        public DataTable Get_swreport(string search)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select software_name,product_desc,key_number,vendor_code,vendor_name,convert(varchar(10),purchase_date,105) as purchase_date,po_no,licenses_type,no_of_licenses,software_type,convert(varchar(10),expiry_date,105) as expiry_date,invoice_number,invoice_amount from offline_software_master inner join vendor_master on vendor_code = vendor_id where software_name <> '' {0}", search);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select software_name,product_desc,key_number,vendor_code,vendor_name,cast(date_format(purchase_date,'%d-%m-%Y') as char) as purchase_date,po_no,licenses_type,no_of_licenses,software_type,cast(date_format(expiry_date,'%d-%m-%Y') as char) as expiry_date,invoice_number,invoice_amount from offline_software_master inner join vendor_master on vendor_code = vendor_id where software_name <> '' {0}", search);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_swreport Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_swreport Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        public DataTable Get_vendorreport(string search)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select vendor_name,case address when null then '' else address end as address,case city when null then '' else city end as city,case contact_person when null then '' else contact_person end as contact_person,case phone_no1 when null then '' else phone_no1 end as phone_no1,case phone_no2 when null then '' else phone_no2 end as phone_no2,case mobile_no1 when null then '' else mobile_no1 end as mobile_no1,case mobile_no2 when null then '' else mobile_no2 end as mobile_no2,case fax_no when null then '' else fax_no end as fax_no,case email_address when null then '' else email_address end as email_address,case cst when null then '' else cst end as cst,case gst when null then '' else gst end as gst,case vat when null then '' else vat end as vat,case pin_no when null then '' else pin_no end as pin_no,vendor_id,case supplier when null then '' else supplier end as supplier,case timestamp when null then '' else timestamp end as timestamp from vendor_master where vendor_name <> '' {0}", search);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select vendor_name,case address when null then '' else address end as address,case city when null then '' else city end as city,case contact_person when null then '' else contact_person end as contact_person,case phone_no1 when null then '' else phone_no1 end as phone_no1,case phone_no2 when null then '' else phone_no2 end as phone_no2,case mobile_no1 when null then '' else mobile_no1 end as mobile_no1,case mobile_no2 when null then '' else mobile_no2 end as mobile_no2,case fax_no when null then '' else fax_no end as fax_no,case email_address when null then '' else email_address end as email_address,case cst when null then '' else cst end as cst,case gst when null then '' else gst end as gst,case vat when null then '' else vat end as vat,case pin_no when null then '' else pin_no end as pin_no,vendor_id,case supplier when null then '' else supplier end as supplier,case timestamp when null then '' else timestamp end as timestamp from vendor_master where vendor_name <> '' {0}", search);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_vendorreport Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_vendorreport Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        #endregion

        #region User Management Settings
        public DataTable Get_Groupmgmt()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select distinct gm.group_id,gm.group_name,gm.description,gm.group_type,count(ugr.user_id) as Users from group_master gm left outer join user_group_relation ugr on gm.group_id = ugr.group_id group by gm.group_id,gm.group_name,gm.description,gm.group_type");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select distinct gm.group_id,gm.group_name,gm.description,gm.group_type,count(ugr.user_id) as Users from group_master gm left outer join user_group_relation ugr on gm.group_id = ugr.group_id group by gm.group_id,gm.group_name,gm.description,gm.group_type");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Groupmgmt Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Groupmgmt Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable userlinkup(string groupid)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select distinct gm.group_id,gm.group_name, ugr.user_id, um.user_name,um.user_type from group_master gm, user_group_relation ugr, user_master um where gm.group_id = ugr.group_id and ugr.user_id = um.user_id and gm.group_id = {0}", groupid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select distinct gm.group_id,gm.group_name, ugr.user_id, um.user_name,um.user_type from group_master gm, user_group_relation ugr, user_master um where gm.group_id = ugr.group_id and ugr.user_id = um.user_id and gm.group_id = {0}", groupid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "userlinkup Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "userlinkup Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public int deleteuserpopup(string userid, string groupid)
        {
            StringBuilder strQuery = new StringBuilder();
            StringBuilder strQuery1 = new StringBuilder();
            StringBuilder strQuery2 = new StringBuilder();
            int result = 0;
            //string defalt_group_id = "";
            try
            {
                //try
                //{
                //    switch (dbtype)
                //    {
                //        case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                //            strQuery.AppendFormat("select group_id from group_master where group_name = 'Default'");
                //            break;
                //        case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                //            strQuery.AppendFormat("select group_id from group_master where group_name = 'Default'");
                //            break;
                //    }
                //    objcommon.WriteLog("DBQueryHandler", "deleteuserpopup_groupid Query : " + strQuery);
                //    defalt_group_id = this.database.getValue(strQuery.ToString());
                //}
                //catch (Exception ex)
                //{
                //    objcommon.WriteLog("DBQueryHandler", "deleteuserpopup_groupid Exception : " + ex.Message.ToString());
                //}

                //if (groupid == defalt_group_id)
                //{
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery1.AppendFormat(" delete from user_group_relation where group_id = {1} and user_id = {0} ", userid, groupid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery1.AppendFormat(" delete from user_group_relation where group_id = {1} and user_id = {0} ", userid, groupid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "deleteuserpopup_delete_user Query : " + strQuery1);
                result = this.database.execute(strQuery1.ToString());
                //}
                //else
                //{
                //    switch (dbtype)
                //    {
                //        case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                //            strQuery2.AppendFormat(" update user_group_relation set group_id = {1} where user_id = {0} ", userid, defalt_group_id);
                //            break;
                //        case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                //            strQuery2.AppendFormat(" update user_group_relation set group_id = {1} where user_id = {0} ", userid, defalt_group_id);
                //            break;
                //    }
                //    objcommon.WriteLog("DBQueryHandler", "deleteuserpopup_delete_user Query : " + strQuery2);
                //    result = this.database.execute(strQuery2.ToString());
                //}
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "deleteuserpopup Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public DataTable linkuser()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select um.user_id, um.user_name, um.user_type, gm.group_name from user_master um left outer join user_group_relation ugr on um.user_id = ugr.user_id left outer join group_master gm on gm.group_id = ugr.group_id where um.user_name not in ('Admin')");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select um.user_id, um.user_name, um.user_type, gm.group_name from user_master um left outer join user_group_relation ugr on um.user_id = ugr.user_id left outer join group_master gm on gm.group_id = ugr.group_id where um.user_name not in ('Admin')");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "linkuser Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "linkuser Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public string get_groupid(string userid)
        {
            string group_id = "";
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select group_id from user_group_relation where user_id = {0}", userid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select group_id from user_group_relation where user_id = {0}", userid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "get_groupid Query : " + strQuery.ToString());
                group_id = this.database.getValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "get_groupid Exception : " + ex.Message.ToString());
            }
            return group_id;
        }
        public string get_groupname(string groupid)
        {
            string group_name = "";
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select group_name from group_master where group_id = {0}", groupid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select group_name from group_master where group_id = {0}", groupid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "get_groupname Query : " + strQuery.ToString());
                group_name = this.database.getValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "get_groupname Exception : " + ex.Message.ToString());
            }
            return group_name;
        }
        public string get_username(string userid)
        {
            string user_name = "";
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select user_name from user_master where user_id = {0}", userid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select user_name from user_master where user_id = {0}", userid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "get_username Query : " + strQuery.ToString());
                user_name = this.database.getValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "get_username Exception : " + ex.Message.ToString());
            }
            return user_name;
        }
        public string get_password(string userid)
        {
            string user_name = "";
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select user_password from user_master where user_id = {0}", userid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select user_password from user_master where user_id = {0}", userid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "get_password Query : " + strQuery.ToString());
                user_name = this.database.getValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "get_password Exception : " + ex.Message.ToString());
            }
            return user_name;
        }
        public int apply_link_user(string userid, string groupid)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("update user_group_relation set group_id = {1} where user_id = {0} ", userid, groupid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("update user_group_relation set group_id = {1} where user_id = {0} ", userid, groupid);
                        break;
                }
                result = this.database.execute(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "apply_link_user Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "apply_link_user Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int apply_link_user_insert(string userid, string groupid)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("insert into user_group_relation (user_id, group_id) values ({0}, {1}) ", userid, groupid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("insert into user_group_relation (user_id, group_id) values ({0}, {1}) ", userid, groupid);
                        break;
                }
                result = this.database.execute(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "apply_link_user_insert Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "apply_link_user_insert Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public DataTable Get_Unlink_User()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select user_id, user_name from user_master where user_id not in (select user_id from user_group_relation) order by user_name");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select user_id, user_name from user_master where user_id not in (select user_id from user_group_relation) order by user_name");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Unlink_User Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Unlink_User Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public int Get_group_count(string groupname)
        {
            int result = 0;
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select count(*) from group_master where group_name = '{0}'", groupname);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select count(*) from group_master where group_name = '{0}'", groupname);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_group_count Query : " + strQuery.ToString());
                result = this.database.getIntValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_group_count Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public DataTable group_rights_data()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select menu_id,menu_name,menu_parent_id,active, menu_priority from menu_master where active = 1 order by menu_parent_id,menu_priority,menu_id");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select menu_id,menu_name,menu_parent_id,active, menu_priority from menu_master where active = 1 order by menu_parent_id,menu_priority,menu_id");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "group_rights_data Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "group_rights_data Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public int add_group(string groupname, string groupdescription, string grouptype, string chkuser, string menuid)
        {
            int result = 0;
            string user_id = "";
            string group_id = "";
            string menu_id = "";
            StringBuilder strQuery = new StringBuilder();
            StringBuilder strQuery1 = new StringBuilder();

            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" insert into group_master (group_name,group_type,description) values('{0}','{1}','{2}') ", groupname, grouptype, groupdescription);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" insert into group_master (group_name,group_type,description) values('{0}','{1}','{2}') ", groupname, grouptype, groupdescription);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "add_group Query : " + strQuery.ToString());
                result = this.database.execute(strQuery.ToString());

                //group_id get
                try
                {
                    switch (dbtype)
                    {
                        case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                            strQuery1.AppendFormat(" select group_id from group_master where group_name = '{0}'", groupname);
                            break;
                        case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                            strQuery1.AppendFormat(" select group_id from group_master where group_name = '{0}'", groupname);
                            break;
                    }
                    objcommon.WriteLog("DBQueryHandler", "add_group_group_id Query : " + strQuery1.ToString());
                    group_id = this.database.getValue(strQuery1.ToString());
                }
                catch (Exception ex)
                {
                    objcommon.WriteLog("DBQueryHandler", "add_group_group_id Exception : " + ex.Message.ToString());
                }
                if (chkuser != null)
                {
                    //user_id get
                    string[] userid = chkuser.Split(',');
                    for (int i = 0; i < userid.Length; i++)
                    {
                        StringBuilder strQuery2 = new StringBuilder();
                        user_id = userid[i].ToString();
                        //insert_user_group_relation
                        try
                        {
                            switch (dbtype)
                            {
                                case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                                    strQuery2.AppendFormat("insert into user_group_relation (user_id, group_id) values({0}, {1})", user_id, group_id);
                                    break;
                                case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                                    strQuery2.AppendFormat("insert into user_group_relation (user_id, group_id) values({0}, {1})", user_id, group_id);
                                    break;
                            }
                            objcommon.WriteLog("DBQueryHandler", "add_group_insert_user_group_relation Query : " + strQuery2.ToString());
                            this.database.execute(strQuery2.ToString());
                        }
                        catch (Exception ex)
                        {
                            objcommon.WriteLog("DBQueryHandler", "add_group_insert_user_group_relation Exception : " + ex.Message.ToString());
                        }
                    }
                }
                if (menuid != null)
                {
                    //menu_id get
                    string[] menu = menuid.Split(',');
                    for (int i = 0; i < menu.Length; i++)
                    {
                        StringBuilder strQuery3 = new StringBuilder();
                        menu_id = menu[i].ToString();
                        //insert_group_rights_master
                        try
                        {
                            switch (dbtype)
                            {
                                case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                                    strQuery3.AppendFormat("insert into group_rights_master (group_id, menu_id) values({0}, {1})", group_id, menu_id);
                                    break;
                                case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                                    strQuery3.AppendFormat("insert into group_rights_master (group_id, menu_id) values({0}, {1})", group_id, menu_id);
                                    break;
                            }
                            objcommon.WriteLog("DBQueryHandler", "add_group_insert_group_rights_master Query : " + strQuery3.ToString());
                            this.database.execute(strQuery3.ToString());
                            //StringBuilder = null;

                        }
                        catch (Exception ex)
                        {
                            objcommon.WriteLog("DBQueryHandler", "add_group_insert_group_rights_master Exception : " + ex.Message.ToString());
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "add_group Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public DataTable get_group_data(string groupid)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select gm.group_id, gm.group_name,gm.group_type, gm.description from group_master gm where gm.group_id = {0} ", groupid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select gm.group_id, gm.group_name,gm.group_type, gm.description from group_master gm where gm.group_id = {0} ", groupid);
                        //strQuery.AppendFormat("select gm.group_id, gm.group_name,gm.group_type, gm.description, ugr.user_id, t.user_name from group_master gm left outer join user_group_relation ugr on gm.group_id = ugr.group_id ");
                        //strQuery.AppendFormat("left outer join (select distinct ug.user_id, um.user_name from user_group_relation ug left outer join user_master um on ug.user_id = um.user_id) t on ugr.user_id = t.user_id ");
                        //strQuery.AppendFormat("where gm.group_id = {0} ", groupid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "get_group_data Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "get_group_data Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_Link_User(string groupid)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select um.user_id,um.user_name,ISNULL(group_id,0) as group_id from user_master um left outer join user_group_relation ugr on um.user_id = ugr.user_id and group_id = {0} order by um.user_name ", groupid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select um.user_id,um.user_name,IFNULL(group_id,0) as group_id from user_master um left outer join user_group_relation ugr on um.user_id = ugr.user_id and group_id = {0} order by um.user_name ", groupid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Link_User Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Link_User Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public int Get_user_group_relation_count(string userid, string groupid)
        {
            int result = 0;
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select count(*) from user_group_relation where user_id = {0} and group_id = {1} ", userid, groupid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select count(*) from user_group_relation where user_id = {0} and group_id = {1} ", userid, groupid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_user_group_relation_count Query : " + strQuery.ToString());
                result = this.database.getIntValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_user_group_relation_count Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int editgroup(string groupname, string groupdescription, string grouptype, string chkuser, string groupid)
        {
            int result = 0;
            string user_id = "";
            string group_id = "";
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" update group_master set group_name = '{0}',group_type = '{1}',description = '{2}' where group_id = {3}", groupname, grouptype, groupdescription, groupid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" update group_master set group_name = '{0}',group_type = '{1}',description = '{2}' where group_id = {3}", groupname, grouptype, groupdescription, groupid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "editgroup Query : " + strQuery.ToString());
                result = this.database.execute(strQuery.ToString());
                if (chkuser != null)
                {
                    //group_id get
                    group_id = groupid;
                    //user_id get
                    string[] userid = chkuser.Split(',');
                    for (int i = 0; i < userid.Length; i++)
                    {
                        StringBuilder strQuery1 = new StringBuilder();
                        user_id = userid[i].ToString();
                        //update_user_group_relation
                        try
                        {
                            switch (dbtype)
                            {
                                case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                                    strQuery1.AppendFormat("update user_group_relation set group_id = {1} where user_id = {0}", user_id, group_id);
                                    break;
                                case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                                    strQuery1.AppendFormat("update user_group_relation set group_id = {1} where user_id = {0}", user_id, group_id);
                                    break;
                            }
                            objcommon.WriteLog("DBQueryHandler", "editgroup_update_user_group_relation Query : " + strQuery1.ToString());
                            this.database.execute(strQuery1.ToString());
                        }
                        catch (Exception ex)
                        {
                            objcommon.WriteLog("DBQueryHandler", "editgroup_update_user_group_relation Exception : " + ex.Message.ToString());
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "editgroup Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int deletegroupdata(string groupid)
        {
            StringBuilder strQuery = new StringBuilder();
            StringBuilder strQuery1 = new StringBuilder();
            StringBuilder strQuery2 = new StringBuilder();
            StringBuilder strQuery3 = new StringBuilder();
            StringBuilder strQuery4 = new StringBuilder();
            int result = 0;
            string defalt_group_id = "";
            try
            {
                try
                {
                    switch (dbtype)
                    {
                        case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                            strQuery.AppendFormat("select group_id from group_master where group_name = 'Default'");
                            break;
                        case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                            strQuery.AppendFormat("select group_id from group_master where group_name = 'Default'");
                            break;
                    }
                    objcommon.WriteLog("DBQueryHandler", "deletegroupdata_groupid Query : " + strQuery);
                    defalt_group_id = this.database.getValue(strQuery.ToString());
                }
                catch (Exception ex)
                {
                    objcommon.WriteLog("DBQueryHandler", "deletegroupdata_groupid Exception : " + ex.Message.ToString());
                }

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery1.AppendFormat(" update user_group_relation set group_id = {0} where group_id = {1} ", defalt_group_id, groupid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery1.AppendFormat(" update user_group_relation set group_id = {0} where group_id = {1} ", defalt_group_id, groupid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "deletegroupdata_update_user_group_relation Query : " + strQuery1);
                this.database.execute(strQuery1.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "deletegroupdata_update_user_group_relation Exception : " + ex.Message.ToString());
            }
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery2.AppendFormat(" delete from group_rights_master where group_id = {0} ", groupid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery2.AppendFormat(" delete from group_rights_master where group_id = {0} ", groupid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "deletegroupdata_group_rights Query : " + strQuery2);
                this.database.execute(strQuery2.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "deletegroupdata_group_rights Exception : " + ex.Message.ToString());
            }
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery3.AppendFormat(" delete from group_master where group_id = {0} ", groupid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery3.AppendFormat(" delete from group_master where group_id = {0} ", groupid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "deletegroupdata Query : " + strQuery3);
                result = this.database.execute(strQuery3.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "deletegroupdata Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public DataTable show_group_rights_data(string groupid)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select mm.menu_id,mm.menu_name,mm.menu_parent_id,case t.menu_id when ISNULL(t.menu_id, 0) then 1 else 0 end as checked ");
                        strQuery.AppendFormat("from menu_master mm left outer join (select mms.menu_id from menu_master mms,group_rights_master grm where mms.menu_id = grm.menu_id and grm.group_id = {0}) t ", groupid);
                        strQuery.AppendFormat("on mm.menu_id = t.menu_id where mm.active=1 order by mm.menu_id ");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select mm.menu_id,mm.menu_name,mm.menu_parent_id,case t.menu_id when IFNULL(t.menu_id, 0) then 1 else 0 end as checked ");
                        strQuery.AppendFormat("from menu_master mm left outer join (select mms.menu_id from menu_master mms,group_rights_master grm where mms.menu_id = grm.menu_id and grm.group_id = {0}) t ", groupid);
                        strQuery.AppendFormat("on mm.menu_id = t.menu_id where mm.active=1 order by mm.menu_id ");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "show_group_rights_data Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "show_group_rights_data Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable child_data(int menus)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select menu_id,menu_name,menu_parent_id from menu_master where menu_parent_id=" + menus + "");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select menu_id,menu_name,menu_parent_id from menu_master where menu_parent_id=" + menus + "");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "child_data Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "child_data Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable sub_child_data(int menus1)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select menu_id,menu_name,menu_parent_id from menu_master where menu_parent_id=" + menus1 + "");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select menu_id,menu_name,menu_parent_id from menu_master where menu_parent_id=" + menus1 + "");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "sub_child_data Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "sub_child_data Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable sub_sub_child_data(int menus2)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select menu_id,menu_name,menu_parent_id from menu_master where menu_parent_id=" + menus2 + "");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select menu_id,menu_name,menu_parent_id from menu_master where menu_parent_id=" + menus2 + "");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "sub_sub_child_data Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "sub_sub_child_data Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        public DataTable sub_sub_sub_child_data(int menus3)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select menu_id,menu_name,menu_parent_id from menu_master where menu_parent_id=" + menus3 + "");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select menu_id,menu_name,menu_parent_id from menu_master where menu_parent_id=" + menus3 + "");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "sub_sub_sub_child_data Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "sub_sub_sub_child_data Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable sub_sub_sub_sub_child_data(int menus4)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select menu_id,menu_name,menu_parent_id from menu_master where menu_parent_id=" + menus4 + "");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select menu_id,menu_name,menu_parent_id from menu_master where menu_parent_id=" + menus4 + "");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "sub_sub_sub_sub_child_data Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "sub_sub_sub_sub_child_data Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public int apply_user_rights(string groupid, string menuid)
        {
            int result = 0;
            //string user_id = "";
            //string group_id = "";
            StringBuilder strQuery = new StringBuilder();
            StringBuilder strQuery1 = new StringBuilder();
            try
            {
                if (menuid != null)
                {

                }
                //switch (dbtype)
                //{
                //    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                //        strQuery.AppendFormat(" update group_master set group_name = '{0}',group_type = '{1}',description = '{2}' where group_id = {3}", groupname, grouptype, groupdescription, groupid);
                //        break;
                //    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                //        strQuery.AppendFormat(" update group_master set group_name = '{0}',group_type = '{1}',description = '{2}' where group_id = {3}", groupname, grouptype, groupdescription, groupid);
                //        break;
                //}
                //objcommon.WriteLog("DBQueryHandler", "editgroup Query : " + strQuery.ToString());
                //result = this.database.execute(strQuery.ToString());
                //if (chkuser != null)
                //{
                //    //group_id get
                //    group_id = groupid;
                //    //user_id get
                //    string[] userid = chkuser.Split(',');
                //    for (int i = 0; i < userid.Length; i++)
                //    {
                //        user_id = userid[i].ToString();
                //        //update_user_group_relation
                //        try
                //        {
                //            switch (dbtype)
                //            {
                //                case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                //                    strQuery1.AppendFormat("update user_group_relation set group_id = {1} where user_id = {0}", user_id, group_id);
                //                    break;
                //                case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                //                    strQuery1.AppendFormat("update user_group_relation set group_id = {1} where user_id = {0}", user_id, group_id);
                //                    break;
                //            }
                //            objcommon.WriteLog("DBQueryHandler", "editgroup_update_user_group_relation Query : " + strQuery1.ToString());
                //            this.database.execute(strQuery1.ToString());
                //        }
                //        catch (Exception ex)
                //        {
                //            objcommon.WriteLog("DBQueryHandler", "editgroup_update_user_group_relation Exception : " + ex.Message.ToString());
                //        }
                //    }
                //}
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "apply_user_rights Exception : " + ex.Message.ToString());
            }
            return result;
        }











        public DataTable Get_Usermgmt()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select distinct um.user_id,um.user_name,um.user_type,um.emailid,um.contact_no, ugr.group_id, t.group_name from user_master um left outer join user_group_relation ugr on um.user_id = ugr.user_id ");
                        strQuery.AppendFormat("left outer join (select distinct ug.group_id, gm.group_name from user_group_relation ug left outer join group_master gm on ug.group_id = gm.group_id) t on ugr.group_id = t.group_id ");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select distinct um.user_id,um.user_name,um.user_type,um.emailid,um.contact_no, ugr.group_id, t.group_name from user_master um left outer join user_group_relation ugr on um.user_id = ugr.user_id ");
                        strQuery.AppendFormat("left outer join (select distinct ug.group_id, gm.group_name from user_group_relation ug left outer join group_master gm on ug.group_id = gm.group_id) t on ugr.group_id = t.group_id ");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Usermgmt Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Usermgmt Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_Group()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select group_id,group_name from group_master order by group_name");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select group_id,group_name from group_master order by group_name");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Group Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Group Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        public int adduser(string username, string usertype, string groupname, string emailid, string encryptpasswoed, string contactno, string securityquestion, string encryptsequrityanswer)
        {
            int result = 0;
            string user_id = "";
            string group_id = "";
            StringBuilder strQuery = new StringBuilder();
            StringBuilder strQuery1 = new StringBuilder();
            StringBuilder strQuery2 = new StringBuilder();
            StringBuilder strQuery3 = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" insert into user_master (user_name,user_password,user_type,emailid,contact_no,secret_question,secret_answer) values('{0}','{1}','{2}','{3}','{4}','{5}','{6}') ", username, encryptpasswoed, usertype, emailid, contactno, securityquestion, encryptsequrityanswer);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" insert into user_master (user_name,user_password,user_type,emailid,contact_no,secret_question,secret_answer) values('{0}','{1}','{2}','{3}','{4}','{5}','{6}') ", username, encryptpasswoed, usertype, emailid, contactno, securityquestion, encryptsequrityanswer);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "adduser Query : " + strQuery.ToString());
                result = this.database.execute(strQuery.ToString());
                //user_id get
                try
                {
                    switch (dbtype)
                    {
                        case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                            strQuery1.AppendFormat(" select user_id from user_master where user_name = '{0}'", username);
                            break;
                        case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                            strQuery1.AppendFormat(" select user_id from user_master where user_name = '{0}'", username);
                            break;
                    }
                    objcommon.WriteLog("DBQueryHandler", "adduser_user_id Query : " + strQuery1.ToString());
                    user_id = this.database.getValue(strQuery1.ToString());
                }
                catch (Exception ex)
                {
                    objcommon.WriteLog("DBQueryHandler", "adduser_user_id Exception : " + ex.Message.ToString());
                }
                //group_id get
                try
                {
                    switch (dbtype)
                    {
                        case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                            strQuery2.AppendFormat(" select group_id from group_master where group_name = '{0}'", groupname);
                            break;
                        case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                            strQuery2.AppendFormat(" select group_id from group_master where group_name = '{0}'", groupname);
                            break;
                    }
                    objcommon.WriteLog("DBQueryHandler", "adduser_group_id Query : " + strQuery2.ToString());
                    group_id = this.database.getValue(strQuery2.ToString());
                }
                catch (Exception ex)
                {
                    objcommon.WriteLog("DBQueryHandler", "adduser_group_id Exception : " + ex.Message.ToString());
                }
                //insert_user_group_relation
                try
                {
                    switch (dbtype)
                    {
                        case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                            strQuery3.AppendFormat("insert into user_group_relation (user_id, group_id) values({0}, {1})", user_id, group_id);
                            break;
                        case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                            strQuery3.AppendFormat("insert into user_group_relation (user_id, group_id) values({0}, {1})", user_id, group_id);
                            break;
                    }
                    objcommon.WriteLog("DBQueryHandler", "adduser_insert_user_group_relation Query : " + strQuery3.ToString());
                    this.database.execute(strQuery3.ToString());
                }
                catch (Exception ex)
                {
                    objcommon.WriteLog("DBQueryHandler", "adduser_insert_user_group_relation Exception : " + ex.Message.ToString());
                }
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "adduser Exception : " + ex.Message.ToString());
            }
            return result;
        }

        public int forgot_password(string username, string securityquestion, string securityanswer)
        {
            int result = 0;
            StringBuilder strQuery = new StringBuilder();
            //user_id get
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select count(*) from  user_master where user_name='{0}' and secret_question='{1}' and secret_answer='{2}'", username, securityquestion, securityanswer);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select count(*) from  user_master where user_name='{0}' and secret_question='{1}' and secret_answer='{2}'", username, securityquestion, securityanswer);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "forgot_password Query : " + strQuery.ToString());
                result = this.database.getIntValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "forgot_password Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int Get_user_group_count(string username, string groupname)
        {
            int result = 0;
            string user_id = "";
            string group_id = "";
            StringBuilder strQuery = new StringBuilder();
            StringBuilder strQuery1 = new StringBuilder();
            StringBuilder strQuery2 = new StringBuilder();
            try
            {
                //user_id get
                try
                {
                    switch (dbtype)
                    {
                        case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                            strQuery1.AppendFormat(" select user_id from user_master where user_name = '{0}'", username);
                            break;
                        case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                            strQuery1.AppendFormat(" select user_id from user_master where user_name = '{0}'", username);
                            break;
                    }
                    objcommon.WriteLog("DBQueryHandler", "Get_user_group_count_user_id Query : " + strQuery1.ToString());
                    user_id = this.database.getValue(strQuery1.ToString());
                }
                catch (Exception ex)
                {
                    objcommon.WriteLog("DBQueryHandler", "Get_user_group_count_user_id Exception : " + ex.Message.ToString());
                }
                //group_id get
                try
                {
                    switch (dbtype)
                    {
                        case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                            strQuery2.AppendFormat(" select group_id from group_master where group_name = '{0}'", groupname);
                            break;
                        case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                            strQuery2.AppendFormat(" select group_id from group_master where group_name = '{0}'", groupname);
                            break;
                    }
                    objcommon.WriteLog("DBQueryHandler", "Get_user_group_count_group_id Query : " + strQuery2.ToString());
                    group_id = this.database.getValue(strQuery2.ToString());
                }
                catch (Exception ex)
                {
                    objcommon.WriteLog("DBQueryHandler", "Get_user_group_count_group_id Exception : " + ex.Message.ToString());
                }

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select count(*) from user_group_relation where user_id = {0} and group_id = {1}", user_id, group_id);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select count(*) from user_group_relation where user_id = {0} and group_id = {1}", user_id, group_id);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_user_group_count Query : " + strQuery.ToString());
                result = this.database.getIntValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_user_group_count Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public string get_userpassword(string userid)
        {
            string userpassword = "";
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select user_password from user_master where user_id = {0} ", userid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select user_password from user_master where user_id = {0} ", userid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "get_userpassword Query : " + strQuery.ToString());
                userpassword = this.database.getValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "get_userpassword Exception : " + ex.Message.ToString());
            }
            return userpassword;
        }
        public string get_secretanswer(string userid)
        {
            string secretanswer = "";
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select secret_answer from user_master where user_id = {0} ", userid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select secret_answer from user_master where user_id = {0} ", userid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "get_secretanswer Query : " + strQuery.ToString());
                secretanswer = this.database.getValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "get_secretanswer Exception : " + ex.Message.ToString());
            }
            return secretanswer;
        }
        public DataTable get_user_data(string userid)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select um.user_id,um.user_name,um.user_password,um.user_type,um.emailid,um.contact_no,um.secret_question,um.secret_answer, ugr.group_id, t.group_name from user_master um left outer join user_group_relation ugr on um.user_id = ugr.user_id ");
                        strQuery.AppendFormat("left outer join (select distinct ug.group_id, gm.group_name from user_group_relation ug left outer join group_master gm on ug.group_id = gm.group_id) t on ugr.group_id = t.group_id ");
                        strQuery.AppendFormat("where um.user_id = {0} ", userid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select um.user_id,um.user_name,um.user_password,um.user_type,um.emailid,um.contact_no, um.secret_question,um.secret_answer,ugr.group_id, t.group_name from user_master um left outer join user_group_relation ugr on um.user_id = ugr.user_id ");
                        strQuery.AppendFormat("left outer join (select distinct ug.group_id, gm.group_name from user_group_relation ug left outer join group_master gm on ug.group_id = gm.group_id) t on ugr.group_id = t.group_id ");
                        strQuery.AppendFormat("where um.user_id = {0} ", userid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "get_user_data Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "get_user_data Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        public int edituser(string username, string usertype, string groupname, string emailid, string encryptpassword, string contactno, string userid, string securityquestion, string encryptsequrityanswer)
        {
            int result = 0;
            int cnt = 0;
            string user_id = "";
            string group_id = "";
            StringBuilder strQuery = new StringBuilder();
            StringBuilder strQuery1 = new StringBuilder();
            StringBuilder strQuery2 = new StringBuilder();
            StringBuilder strQuery3 = new StringBuilder();
            StringBuilder strQuery4 = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" update user_master set user_name = '{0}',user_password = '{1}',user_type = '{2}',emailid = '{3}',contact_no = '{4}',secret_question='{6}',secret_answer='{7}' where user_id = {5}", username, encryptpassword, usertype, emailid, contactno, userid, securityquestion, encryptsequrityanswer);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" update user_master set user_name = '{0}',user_password = '{1}',user_type = '{2}',emailid = '{3}',contact_no = '{4}',secret_question='{6}',secret_answer='{7}' where user_id = {5}", username, encryptpassword, usertype, emailid, contactno, userid, securityquestion, encryptsequrityanswer);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "edituser Query : " + strQuery.ToString());
                result = this.database.execute(strQuery.ToString());
                //user_id get
                user_id = userid;
                //group_id get
                try
                {
                    switch (dbtype)
                    {
                        case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                            strQuery1.AppendFormat(" select group_id from group_master where group_name = '{0}'", groupname);
                            break;
                        case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                            strQuery1.AppendFormat(" select group_id from group_master where group_name = '{0}'", groupname);
                            break;
                    }
                    objcommon.WriteLog("DBQueryHandler", "edituser_group_id Query : " + strQuery1.ToString());
                    group_id = this.database.getValue(strQuery1.ToString());
                }
                catch (Exception ex)
                {
                    objcommon.WriteLog("DBQueryHandler", "edituser_group_id Exception : " + ex.Message.ToString());
                }
                //update_user_group_relation
                try
                {
                    try
                    {
                        switch (dbtype)
                        {
                            case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                                strQuery3.AppendFormat("select count(*) from user_group_relation where user_id = {0}", userid);
                                break;
                            case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                                strQuery3.AppendFormat("select count(*) from user_group_relation where user_id = {0}", userid);
                                break;
                        }
                        cnt = this.database.getIntValue(strQuery3.ToString());
                        objcommon.WriteLog("DBQueryHandler", "edituser_count_user_group_relation Query : " + strQuery3.ToString());
                    }
                    catch (Exception ex)
                    {
                        objcommon.WriteLog("DBQueryHandler", "edituser_count_user_group_relation Exception : " + ex.Message.ToString());
                    }
                    if (cnt == 0)
                    {
                        try
                        {
                            switch (dbtype)
                            {
                                case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                                    strQuery4.AppendFormat("insert into user_group_relation (user_id, group_id) values({0}, {1})", user_id, group_id);
                                    break;
                                case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                                    strQuery4.AppendFormat("insert into user_group_relation (user_id, group_id) values({0}, {1})", user_id, group_id);
                                    break;
                            }
                            objcommon.WriteLog("DBQueryHandler", "edituser_insert_user_group_relation Query : " + strQuery4.ToString());
                            this.database.execute(strQuery4.ToString());
                        }
                        catch (Exception ex)
                        {
                            objcommon.WriteLog("DBQueryHandler", "edituser_insert_user_group_relation Exception : " + ex.Message.ToString());
                        }
                    }
                    else
                    {
                        try
                        {
                            switch (dbtype)
                            {
                                case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                                    strQuery2.AppendFormat("update user_group_relation set group_id = {1} where user_id = {0}", user_id, group_id);
                                    break;
                                case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                                    strQuery2.AppendFormat("update user_group_relation set group_id = {1} where user_id = {0}", user_id, group_id);
                                    break;
                            }
                            objcommon.WriteLog("DBQueryHandler", "edituser_update_user_group_relation Query : " + strQuery2.ToString());
                            this.database.execute(strQuery2.ToString());
                        }
                        catch (Exception ex)
                        {
                            objcommon.WriteLog("DBQueryHandler", "edituser_update_user_group_relation Exception : " + ex.Message.ToString());
                        }
                    }
                }
                catch (Exception ex)
                {
                    objcommon.WriteLog("DBQueryHandler", "edituser_insert_update_user_group_relation Exception : " + ex.Message.ToString());
                }
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "edituser Exception : " + ex.Message.ToString());
            }
            return result;
        }

        public int set_reset_password(string oldpassword, string encryptpasswoed, string userid)
        {
            int cnt = 0;
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("update user_master set user_password='{0}' where user_id = {1}", encryptpasswoed, userid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("update user_master set user_password='{0}' where user_id = {1}", encryptpasswoed, userid);
                        break;
                }
                cnt = this.database.execute(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "set_reset_password Query : " + strQuery.ToString());

            }
            catch (Exception ex)
            {
                cnt = -2;
                objcommon.WriteLog("DBQueryHandler", "set_reset_password Exception : " + ex.Message.ToString());
            }
            return cnt;
        }
        public int change_password(string encryptpassword, string username)
        {
            int cnt = 0;
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("update user_master set user_password='{0}' where user_name = '{1}'", encryptpassword, username);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("update user_master set user_password='{0}' where user_name = '{1}'", encryptpassword, username);
                        break;
                }
                cnt = this.database.execute(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "change_password Query : " + strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "change_password Exception : " + ex.Message.ToString());
            }
            return cnt;
        }
        public int set_reset_check_old_password(string oldpassword, string userid)
        {
            int cnt = 0;
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select count(*) from user_master where user_password='{0}' and user_id = {1}", oldpassword, userid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select count(*) from user_master where user_password='{0}' and user_id = {1}", oldpassword, userid);
                        break;
                }
                cnt = this.database.getIntValue(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "set_reset_check_old_password Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "set_reset_check_old_password Exception : " + ex.Message.ToString());
            }
            return cnt;
        }

        public int deleteuserdata(string userid)
        {
            StringBuilder strQuery = new StringBuilder();
            StringBuilder strQuery1 = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery1.AppendFormat(" delete from user_group_relation where user_id = {0} ", userid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery1.AppendFormat(" delete from user_group_relation where user_id = {0} ", userid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "deleteuserdata_user_group_relation Query : " + strQuery1);
                this.database.execute(strQuery1.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "deleteuserdata_user_group_relation Exception : " + ex.Message.ToString());
            }
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" delete from user_master where user_id = {0} ", userid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" delete from user_master where user_id = {0} ", userid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "deleteuserdata Query : " + strQuery);
                result = this.database.execute(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "deleteuserdata Exception : " + ex.Message.ToString());
            }
            return result;
        }

        #endregion

        #region login
        public string get_user_id(string username)
        {
            string user_id = "";
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select user_id from user_master where user_name = '{0}'", username);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select user_id from user_master where user_name = '{0}'", username);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "get_user_id Query : " + strQuery.ToString());
                user_id = this.database.getValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "get_user_id Exception : " + ex.Message.ToString());
            }
            return user_id;
        }
        public DataTable get_menu_data(string groupid)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select menu_id from group_rights_master where group_id = {0} ", groupid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select menu_id from group_rights_master where group_id = {0} ", groupid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "get_menu_data Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "get_menu_data Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public string Get_master_user()
        {
            string user_name = "";
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select user_name from user_master where user_id = '1'");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select user_name from user_master where user_id = '1'");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_master_user Query : " + strQuery.ToString());
                user_name = this.database.getValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_master_user Exception : " + ex.Message.ToString());
            }
            return user_name;
        }

        public string masterpassword(string masteruser)
        {
            string password = "";
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select master_password from user_master where user_name = '{0}'", masteruser);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select master_password from user_master where user_name = '{0}'", masteruser);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "masterpassword Query : " + strQuery.ToString());
                password = this.database.getValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "masterpassword Exception : " + ex.Message.ToString());
            }
            return password;
        }
        public string userpassword(string username)
        {
            string userpassword = "";
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select user_password from user_master where user_name = '{0}' ", username);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select user_password from user_master where user_name = '{0}' ", username);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "userpassword Query : " + strQuery.ToString());
                userpassword = this.database.getValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "userpassword Exception : " + ex.Message.ToString());
            }
            return userpassword;
        }

        #endregion

        #region Alert Messages
        public DataTable Get_alert(string user_id)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select convert(varchar,dpa.device_timestamp,105)+ ' ' + convert(varchar,dpa.device_timestamp,108) as device_timestamp,dpa.device_name,dpa.ip,isnull(case nui.login_user when 'NA' then '' when 'NULL' then '' when null then '' else nui.login_user end,'') as login_user, ");
                        strQuery.AppendFormat("dpa.category_type, dpa.category_subtype, dpa.message, dpa.category_status from device_popup_alert dpa, node_user_info nui, c014dtlnodepupaltrel c104 where dpa.device_id = nui.device_id and dpa.alert_id = c104.c014alertid and c014userid = {0} and dpa.message not like '%pnp entity%' order by category_type,category_status asc", user_id);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select cast(date_format(dpa.device_timestamp,'%d-%m-%Y %H:%i:%s') as char) as device_timestamp,dpa.device_name,dpa.ip,ifnull(case nui.login_user when 'NA' then '' when 'NULL' then '' when null then '' else nui.login_user end,'') as login_user, ");
                        strQuery.AppendFormat("dpa.category_type, dpa.category_subtype, dpa.message, dpa.category_status from device_popup_alert dpa, node_user_info nui, c014dtlnodepupaltrel c104 where dpa.device_id = nui.device_id and dpa.alert_id = c104.c014alertid and c014userid = {0} and dpa.message not like '%pnp entity%' order by category_type,category_status asc ", user_id);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_alert Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_alert Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public int Get_AlertCount(string user_id)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select count(*) as 'AlertCount' from device_popup_alert dpa, c014dtlnodepupaltrel c104 where dpa.alert_id = c104.c014alertid and c014userid = {0} and message not like '%pnp entity%'", user_id);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select count(*) as 'AlertCount' from device_popup_alert dpa, c014dtlnodepupaltrel c104 where dpa.alert_id = c104.c014alertid and c014userid = {0} and message not like '%pnp entity%'", user_id);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_AlertCount Query : " + strQuery.ToString());
                result = this.database.getIntValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_AlertCount Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int deletealert()
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" delete from device_popup_alert");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" delete from device_popup_alert");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "deletealert Query : " + strQuery);
                result = this.database.execute(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "deletealert Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int delete_alert()
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" delete from c014dtlnodepupaltrel");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" delete from c014dtlnodepupaltrel");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "delete_alert Query : " + strQuery);
                result = this.database.execute(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "delete_alert Exception : " + ex.Message.ToString());
            }
            return result;
        }
        #endregion

        public string read_guisetting(string strKey)
        {
            string load_url = "";
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select top 1 propertyvalue from configuration_setting where sectionname='GUISetting' and propertyname='{0}' ", strKey);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select propertyvalue from configuration_setting where sectionname='GUISetting' and propertyname='{0}' limit 1;", strKey);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "read_guisetting Query : " + strQuery.ToString());
                load_url = this.database.getValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "read_guisetting Exception : " + ex.Message.ToString());
            }
            return load_url;
        }

        #region Event Monitoring Report
        public DataTable report_event_monitoring_data(string search)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select nem.device_id,nem.event_id,nem.event_type,nem.username,nem.message,count(*) as counts from node_event_monitoring nem, device_linkage dl where nem.device_id = dl.device_id {0} group by nem.device_id,nem.event_id,nem.event_type,nem.username,nem.message", search);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select nem.device_id,nem.event_id,nem.event_type,nem.username,nem.message,count(*) as counts from node_event_monitoring nem, device_linkage dl where nem.device_id = dl.device_id {0} group by nem.device_id,nem.event_id,nem.event_type,nem.username,nem.message", search);
                        break;
                }
                data_table = this.database.getDataTable(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "report_event_monitoring_data Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "report_event_monitoring_data Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable apply_event_count_data()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select event_id,event_type,username,message from node_event_monitoring ");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select event_id,event_type,username,message from node_event_monitoring ");
                        break;
                }
                data_table = this.database.getDataTable(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "apply_event_count_data Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "apply_event_count_data Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        public DataTable event_apply_show(string search)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select distinct nem.device_id,convert(varchar,dl.datetime,105) + ' ' + convert(varchar,dl.datetime,108) as date_time,dl.ou_longname,dl.device_name,dl.ip from node_event_monitoring nem, device_linkage dl where dl.device_id = nem.device_id {0} ", search);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select distinct nem.device_id,cast(date_format(dl.datetime,'%d-%m-%Y %H:%i:%s') as char) as date_time,dl.ou_longname,dl.device_name,dl.ip from node_event_monitoring nem, device_linkage dl where dl.device_id = nem.device_id {0} ", search);
                        break;
                }
                data_table = this.database.getDataTable(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "apply_event_count_data Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "apply_event_count_data Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        #endregion
        #region License
        public int get_Entity_Entry_Count(string EntityID, string EntityName, string EntityType)
        {
            int intReturn = 0;
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select count(*) from EntityMaster where EntityID='{0}' and EntityName='{1}' and EntityType=(select EntityTypeID from EntityTypeMaster where entityTypeName='{2}')", EntityID, EntityName, EntityType);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select count(*) from EntityMaster where EntityID='{0}' and EntityName='{1}' and EntityType=(select EntityTypeID from EntityTypeMaster where entityTypeName='{2}')", EntityID, EntityName, EntityType);
                        break;
                }
                intReturn = this.database.getIntValue(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "get_Entity_Entry_Count Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "get_Entity_Entry_Count Exception : " + ex.Message.ToString());
            }
            return intReturn;
        }
        public int insert_Entity_Data(string EntityID, string EntityName, string EntityType)
        {
            int intReturn = 0;
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("insert into EntityMaster(EntityType,EntityID,EntityName,StartDate,Valid) values((select EntityTypeID from EntityTypeMaster where entityTypeName='{0}'),{1},'{2}',getdate(),1)", EntityType, EntityID, EntityName);
                        //strQuery.AppendFormat("insert into EntityMaster(EntityType,EntityID,EntityName,StartDate,Valid) values((select EntityTypeID from EntityTypeMaster where entityTypeName='{0}'),{1},'{2}',getdate(),1)", EntityType, EntityID, EntityName);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("insert into EntityMaster(EntityType,EntityID,EntityName,StartDate,Valid) values((select EntityTypeID from EntityTypeMaster where entityTypeName='{0}'),{1},'{2}',now(),1)", EntityType, EntityID, EntityName);
                        //strQuery.AppendFormat("insert into EntityMaster(EntityType,EntityID,EntityName,StartDate,Valid) values((select EntityTypeID from EntityTypeMaster where entityTypeName='{0}'),{1},'{2}',now(),1)", EntityType, EntityID, EntityName);
                        break;
                }
                intReturn = this.database.execute(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "insert_Entity_Data Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "insert_Entity_Data Exception : " + ex.Message.ToString());
            }
            return intReturn;
        }
        public int insert_license_product(string ProductID, string Quantity, string ComponentID, string StartDate, string EndDate, string Valid)
        {
            int intReturn = 0;
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("insert into LicIssue(ProductID,Quantity,componentID,StartDate,EndDate,Valid) values({0},{1},{2},'{3}','{4}',{5})", ProductID, Quantity, ComponentID, StartDate, EndDate, Valid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("insert into LicIssue(ProductID,Quantity,componentID,StartDate,EndDate,Valid) values({0},{1},{2},'{3}','{4}',{5})", ProductID, Quantity, ComponentID, StartDate, EndDate, Valid);
                        break;
                }
                intReturn = this.database.execute(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "insert_license_product Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "insert_license_product Exception : " + ex.Message.ToString());
            }
            return intReturn;
        }
        public int Get_component_count(string productid, string componentid)
        {
            int result = 0;
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select count(*) from LicIssue where ProductID={0} and componentID={1}", productid, componentid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select count(*) from LicIssue where and ProductID={0} and componentID={1}", productid, componentid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_component_count Query : " + strQuery.ToString());
                result = this.database.getIntValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_component_count Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int update_License_date(string productid, string componentid, string quantity, string startdate, string enddate, string valid)
        {

            StringBuilder strQuery = new StringBuilder();
            int cnt = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("update LicIssue set Quantity={0} ,StartDate='{1}', EndDate='{2}' , Valid={3} where ProductID={4} and componentID={5}", quantity, startdate, enddate, valid, productid, componentid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("update LicIssue set Quantity={0} ,StartDate='{1}', EndDate='{2}' , Valid={3} where ProductID={4} and componentID={5}", quantity, startdate, enddate, valid, productid, componentid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "update_License_date datatable Query : " + strQuery);
                cnt = this.database.getIntValue(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "update_License_date datatable Exception : " + ex.Message.ToString());
            }
            return cnt;
        }
        public int Get_entity_typeid(string typename)
        {
            int result = 0;
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select EntityTypeID from EntityTypeMaster where EntityTypeName='{0}'", typename);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select EntityTypeID from EntityTypeMaster where EntityTypeName='{0}'", typename);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_entity_typeid Query : " + strQuery.ToString());
                result = this.database.getIntValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_entity_typeid Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int Getinfo_type_id(string typename)
        {
            int result = 0;
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select InfoTypeID from InfoTypeMaster where InfoTypeName ='{0}'", typename);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select InfoTypeID from InfoTypeMaster where InfoTypeName ='{0}'", typename);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Getinfo_type_id Query : " + strQuery.ToString());
                result = this.database.getIntValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Getinfo_type_id Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int GetEntity_count_withID(string EntityType)
        {
            int result = 0;
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select count(*) from EntityMaster where entitytype={0} ", EntityType);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select count(*) from EntityMaster where entitytype={0} ", EntityType);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "GetEntity_count_withID Query : " + strQuery.ToString());
                result = this.database.getIntValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "GetEntity_count_withID Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int get_count_adhoc_info(string EntityID, string InfoTypeID)
        {
            int result = 0;
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select count(*) from EntityAdhocInfo where EntityID = {0} and InfoTypeID = {1} ", EntityID, InfoTypeID);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select count(*) from EntityAdhocInfo where EntityID = {0} and InfoTypeID = {1} ;", EntityID, InfoTypeID);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "get_count_adhoc_info Query : " + strQuery.ToString());
                result = this.database.getIntValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "get_count_adhoc_info Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int insert_adhoc_info(string EntityID, string EntityTypeID, string InfoTypeID, string Param, string ParamValue)
        {
            int result = 0;
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("insert into EntityAdhocInfo(EntityType,EntityID,InfoTypeID,Param,ParamValue,StartDate,Valid) values({0},{1},{2},'{3}','{4}',GETDATE(),1)", EntityTypeID, EntityID, InfoTypeID, Param, ParamValue);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("insert into EntityAdhocInfo(EntityType,EntityID,InfoTypeID,Param,ParamValue,StartDate,Valid) values({0},{1},{2},'{3}','{4}',now(),1)", EntityTypeID, EntityID, InfoTypeID, Param, ParamValue);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "insert_adhoc_info Query : " + strQuery.ToString());
                result = this.database.execute(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "insert_adhoc_info Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int update_adhoc_info(string EntityID, string EntityTypeID, string InfoTypeID, string ParamValue)
        {
            int result = 0;
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("update EntityAdhocInfo set ParamValue='{0}' where EntityType={1} and EntityID={2} and InfoTypeID={3}", ParamValue, EntityTypeID, EntityID, InfoTypeID);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("update EntityAdhocInfo set ParamValue='{0}' where EntityType={1} and EntityID={2} and InfoTypeID={3};", ParamValue, EntityTypeID, EntityID, InfoTypeID);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "update_adhoc_info Query : " + strQuery.ToString());
                result = this.database.getIntValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "update_adhoc_info Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int check_lecense_set()
        {
            int result = 0;
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select count(*) from EntityMaster where EntityType in (1,2)");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select count(*) from EntityMaster where EntityType in (1,2)");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "check_lecense_set Query : " + strQuery.ToString());
                result = this.database.getIntValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "check_lecense_set Exception : " + ex.Message.ToString());
            }
            return result;
        }
        #endregion
        public DataTable reportlogo()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select propertyname,propertyvalue from configuration_setting where sectionname = 'GUISetting' and propertyname in ('ProductLogo','ProductName')");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select propertyname,propertyvalue from configuration_setting where sectionname = 'GUISetting' and propertyname in ('ProductLogo','ProductName')");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "reportlogo Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "reportlogo Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Bindfilenamelist()
        {
            StringBuilder strQuery = new StringBuilder();

            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select distinct filename from flag_master");
                        break;

                }
                objcommon.WriteLog("DBQueryHandler", "Bindfilenamelist Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Bindfilenamelist Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable GetAuthIPAddress()
        {
            StringBuilder strQuery = new StringBuilder();

            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select distinct ipaddress from UserAccessGUI");
                        break;

                }
                objcommon.WriteLog("DBQueryHandler", "GetAuthIPAddress Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "GetAuthIPAddress Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Bindflagconfiguration(string strCondition)
        {
            StringBuilder strQuery = new StringBuilder();

            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select distinct device_id,ou_longname,device_name,ip,filename,section,propertyname,type,action,propertyvalue,response from device_linkage dl,flag_configuration fc where dl.device_id=fc.deviceID {0}", strCondition);
                        break;

                }
                objcommon.WriteLog("DBQueryHandler", "Bindflagconfiguration Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Bindflagconfiguration Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Bindsectionlist(string filename)
        {
            StringBuilder strQuery = new StringBuilder();

            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select distinct section from flag_master where filename='{0}'", filename);
                        break;

                }
                objcommon.WriteLog("DBQueryHandler", "Bindsectionlist Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Bindsectionlist Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Bindpropertynamelist(string filename, string sectionname)
        {
            StringBuilder strQuery = new StringBuilder();

            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select distinct propertyname from flag_master where filename='{0}' and section='{1}'", filename, sectionname);
                        break;

                }
                objcommon.WriteLog("DBQueryHandler", "Bindpropertynamelist Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Bindpropertynamelist Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public int SetFlag(string filename, string sectionname, string flagname, string flagvalue, string deviceidall, string type, string action)
        {
            int result = 0;
            StringBuilder strQueryBuilder = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQueryBuilder.AppendFormat(" insert into flag_configuration(filename,section,propertyname,propertyvalue,deviceID,type,action)values('{0}','{1}','{2}','{3}',{4},'{5}','{6}') ", filename, sectionname, flagname, flagvalue, deviceidall, type, action);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" insert into flag_configuration(filename,section,propertyname,propertyvalue,deviceID,type,action)values('{0}','{1}','{2}','{3}',{4},'{5}','{6}') ", filename, sectionname, flagname, flagvalue, deviceidall, type, action);
                        break;
                }
                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "SetFlag Query : " + strQuery);
                result = this.database.execute(strQuery);
                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "SetFlag Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int updateFlag(string filename, string sectionname, string flagname, string flagvalue, string deviceidall, string type, string flag_action)
        {
            int result = 0;
            StringBuilder strQueryBuilder = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQueryBuilder.AppendFormat(" update flag_configuration set filename='{0}',section='{1}',propertyname='{2}',propertyvalue='{3}', type = '{5}', action = '{6}' where deviceID={4}", filename, sectionname, flagname, flagvalue, deviceidall, type, flag_action);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" update flag_configuration set filename='{0}',section='{1}',propertyname='{2}',propertyvalue='{3}', type = '{5}', action = '{6}' where deviceID={4}", filename, sectionname, flagname, flagvalue, deviceidall, type, flag_action);
                        break;
                }
                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "updateFlag Query : " + strQuery);
                result = this.database.execute(strQuery);
                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "updateFlag Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int deleteFlag(string filename, string section, string propertyname, string propertyvalue, string deviceid)
        {
            int result = 0;
            StringBuilder strQueryBuilder = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQueryBuilder.AppendFormat(" delete from flag_configuration where  filename='{0}'and section='{1}'and propertyname='{2}' and propertyvalue='{3}' and deviceID={4}", filename, section, propertyname, propertyvalue, deviceid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQueryBuilder.AppendFormat(" delete from flag_configuration where  filename='{0}'and section='{1}'and propertyname='{2}' and propertyvalue='{3}' and deviceID={4}", filename, section, propertyname, propertyvalue, deviceid);
                        break;
                }
                String strQuery = strQueryBuilder.ToString();
                objcommon.WriteLog("DBQueryHandler", "updateFlag Query : " + strQuery);
                result = this.database.execute(strQuery);
                strQuery = null;
                strQueryBuilder = null;
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "updateFlag Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public DataTable getdevicelist(string search)
        {
            StringBuilder strQuery = new StringBuilder();

            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select distinct dl.device_id,isnull(dl.device_name,dl.device_name) as systemname ,dl.ip,dl.ou_longname from device_linkage dl inner join node_user_info nu on dl.device_id=nu.device_id where dl.status<>-1 {0}", search);
                        break;

                }
                objcommon.WriteLog("DBQueryHandler", "getdevicelist Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "getdevicelist Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public int Get_flag_count(string deviceid)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select count(*) from flag_configuration where  deviceID={0} ", deviceid);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select count(*) from flag_configuration where  deviceID={0} ", deviceid);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_flag_count Query : " + strQuery.ToString());
                result = this.database.getIntValue(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_flag_count Exception : " + ex.Message.ToString());
            }
            return result;
        }

        public DataTable USBHistoryReport(string search, string strFieldSearch)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        //strQuery.AppendFormat("select distinct dl.ou_id,dl.ou_longname,uh.device_id,dl.device_name,dl.ip,uh.description as usb_device_name,uh.device_type,uh.created_date,uh.connected,uh.safe_to_unplug,uh.disabled,uh.usb_hub,uh.drive_letter,uh.serial_number,uh.vendorid,uh.productid,uh.computer_name,");
                        //strQuery.AppendFormat("uh.service_name,uh.device_mfg,uh.friendly_name,uh.usb_version,uh.driver_description,uh.driver_version,uh.instance_id,uh.device_name as description ");
                        //strQuery.AppendFormat("from usb_history uh left outer join device_linkage dl on uh.device_id = dl.device_id where dl.status <> -1 {0} {1} order by uh.created_date desc", search, strFieldSearch);
                        strQuery.AppendFormat("select distinct dl.ou_id,dl.ou_longname,uh.device_id,dl.device_name,dl.ip,uh.start_time,uh.end_time,uh.address,uh.Capabilities,uh.ClassGUID,uh.CompatibleIDs,");
                        strQuery.AppendFormat("uh.ContainerID,uh.Driver, uh.FriendlyName,uh.DeviceDesc,uh.deviceName,uh.HardwareID ");
                        strQuery.AppendFormat("from usb_history_new uh left outer join device_linkage dl on uh.device_id = dl.device_id where dl.status <> -1  {0} {1} order by uh.start_time desc", search, strFieldSearch);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select distinct dl.ou_id,dl.ou_longname,uh.device_id,dl.device_name,dl.ip,uh.description as usb_device_name,uh.device_type,uh.created_date,uh.connected,uh.safe_to_unplug,uh.disabled,uh.usb_hub,uh.drive_letter,uh.serial_number,uh.vendorid,uh.productid,uh.computer_name,");
                        strQuery.AppendFormat("uh.service_name,uh.device_mfg,uh.friendly_name,uh.usb_version,uh.driver_description,uh.driver_version,uh.instance_id,uh.device_name as description ");
                        strQuery.AppendFormat("from usb_history uh left outer join device_linkage dl on uh.device_id = dl.device_id where dl.status <> -1 {0} {1} order by uh.created_date desc", search, strFieldSearch);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "USBHistoryReport Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "USBHistoryReport Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable Get_Gui_log(string search, string searchdate, string strFieldSearch)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select dl.ou_id,dl.ou_longname,gl.device_id,dl.device_name,dl.ip,gl.pc_name,gl.action_name,convert(varchar,gl.action_date,105) + ' ' + convert(varchar,gl.action_date,108) as action_date,gl.action_performby,gl.gui_ip,gl.action_desc from gui_log gl left outer join device_linkage dl on gl.device_id = dl.device_id where dl.status <> -1 {0} {1} {2} order by action_date desc", search, searchdate, strFieldSearch);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select dl.ou_id,dl.ou_longname,gl.device_id,dl.device_name,dl.ip,gl.pc_name,gl.action_name,cast(date_format(gl.action_date,'%d-%m-%Y %H:%i:%s') as char) as action_date,gl.action_performby,gl.gui_ip,gl.action_desc from gui_log gl left outer join device_linkage dl on gl.device_id = dl.device_id where dl.status <> -1 {0} {1} {2} order by action_date desc", search, searchdate, strFieldSearch);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Get_Gui_log Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Get_Gui_log Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public int AddAuthIPAddress(string ipaddress)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("insert into UserAccessGUI(ipaddress)values('{0}')", ipaddress);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("insert into UserAccessGUI(ipaddress)values('{0}')", ipaddress);
                        break;
                }
                result = this.database.execute(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "AddAuthIPAddress Query : " + strQuery.ToString());
                strQuery.Clear();
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "AddAuthIPAddress Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int Delete_Authipgui(string ipaddress)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("delete from UserAccessGUI where ipaddress='{0}'", ipaddress);
                        break;
                }

                objcommon.WriteLog("DBQueryHandler", "Delete_Authipgui Query : " + strQuery);
                result = this.database.execute(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Delete_Authipgui Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int AddAntivirus(string antivirus_name, string service_name)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("insert into antivirus_configuration(antivirus_name,antivirus_service_name)values('{0}','{1}')", antivirus_name, service_name);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("insert into antivirus_configuration(antivirus_name,antivirus_service_name)values('{0}','{1}')", antivirus_name, service_name);
                        break;
                }
                result = this.database.execute(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "AddAntivirus Query : " + strQuery.ToString());
                strQuery.Clear();
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "AddAntivirus Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public DataTable Getaddantivirus()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select distinct * from antivirus_configuration");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select distinct * from antivirus_configuration");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "Getaddantivirus Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());

            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Getaddantivirus Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public int DeleteAntivirus(string servicename)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {

                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("delete from antivirus_configuration where antivirus_service_name = '{0}'", servicename);
                        break;
                }

                objcommon.WriteLog("DBQueryHandler", "DeleteAntivirus Query : " + strQuery);
                result = this.database.execute(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "DeleteAntivirus Exception : " + ex.Message.ToString());
            }
            return result;
        }

        #region Employee Details Report
        public DataTable GetEmployee()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select card_no, employee_no, employee_name, dhcpd_ip, mac_address from employee_details ");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select card_no, employee_no, employee_name, dhcpd_ip, mac_address from employee_details ");
                        break;
                }
                data_table = this.database.getDataTable(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "GetEmployee Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "GetEmployee Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable GetEmployeeDetailsReport(string search)
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        //strQuery.AppendFormat("select mac_address, device_status, device_type, card_no, employee_no, employee_name, gender, convert(varchar, birth_date, 105) as birth_date, convert(varchar, join_date, 105) as join_date, designation, department_section, department, location, emailid, dhcpd_ip, internal_phone, mobile, blood_group, convert(varchar, marriage_date, 105) as marriage_date, aadhar_no, aadhar_name, address1, address2, address3, city, pincode, state from employee_details {0} order by card_no ", search);
                        strQuery.AppendFormat("select ds.mac_address,device_status, device_type, card_no, employee_no, employee_name, gender, convert(varchar, birth_date, 105) as birth_date, convert(varchar, join_date, 105) as join_date, designation, department_section, department, location, emailid, dhcpd_ip, internal_phone, mobile, blood_group, convert(varchar, marriage_date, 105) as marriage_date, aadhar_no, aadhar_name, address1, address2, address3, city, pincode, state from employee_details, node_user_info ds order by card_no ", search);

                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select ds.mac_address,device_status, device_type, card_no, employee_no, employee_name, gender, convert(varchar, birth_date, 105) as birth_date, convert(varchar, join_date, 105) as join_date, designation, department_section, department, location, emailid, dhcpd_ip, internal_phone, mobile, blood_group, convert(varchar, marriage_date, 105) as marriage_date, aadhar_no, aadhar_name, address1, address2, address3, city, pincode, state from employee_details, node_user_info ds order by card_no ", search);
                        break;
                }
                data_table = this.database.getDataTable(strQuery.ToString());
                objcommon.WriteLog("DBQueryHandler", "GetEmployeeDetailsReport Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "GetEmployeeDetailsReport Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public int DeleteEmployee(string mac_address)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("delete from employee_details where mac_address in ('" + mac_address + "') ");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("delete from employee_details where mac_address in ('" + mac_address + "') ");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "DeleteEmployee Query : " + strQuery);
                result = this.database.execute(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "DeleteEmployee Exception : " + ex.Message.ToString());
            }
            return result;
        }
        public int get_Employee_details_count(string mac_address)
        {
            int intReturn = 0;
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("select count(*) from employee_details where mac_address = '{0}' ", mac_address);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("select count(*) from employee_details where mac_address = '{0}' ", mac_address);
                        break;
                }
                intReturn = this.database.getIntValue(strQuery.ToString());
                //objcommon.WriteLog("DBQueryHandler", "get_Employee_details_count Query : " + strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "get_Employee_details_count Exception : " + ex.Message.ToString());
            }
            return intReturn;
        }
        public int Add_Employee_details(string mac_address, string device_status, string device_type, string card_no, string employee_no, string employee_name, string gender, string birth_date, string join_date, string designation, string department_section, string department, string location, string emailid, string dhcpd_ip, string internal_phone, string mobile, string blood_group, string marriage_date, string aadhar_no, string aadhar_name, string address1, string address2, string address3, string city, string pincode, string state)
        {
            StringBuilder strQuery = new StringBuilder();
            int result = 0;
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat("insert into employee_details(mac_address, device_status, device_type, card_no, employee_no, employee_name, gender, birth_date, join_date, designation, department_section, department, location, emailid, dhcpd_ip, internal_phone, mobile, blood_group, marriage_date, aadhar_no, aadhar_name, address1, address2, address3, city, pincode, state) values ('{0}','{1}','{2}','{3}','{4}','{5}','{6}','{7}','{8}','{9}','{10}','{11}','{12}','{13}','{14}','{15}','{16}','{17}','{18}','{19}','{20}','{21}','{22}','{23}','{24}','{25}','{26}')", mac_address, device_status, device_type, card_no, employee_no, employee_name, gender, birth_date, join_date, designation, department_section, department, location, emailid, dhcpd_ip, internal_phone, mobile, blood_group, marriage_date, aadhar_no, aadhar_name, address1, address2, address3, city, pincode, state);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat("insert into employee_details(mac_address, device_status, device_type, card_no, employee_no, employee_name, gender, birth_date, join_date, designation, department_section, department, location, emailid, dhcpd_ip, internal_phone, mobile, blood_group, marriage_date, aadhar_no, aadhar_name, address1, address2, address3, city, pincode, state) values ('{0}','{1}','{2}','{3}','{4}','{5}','{6}','{7}','{8}','{9}','{10}','{11}','{12}','{13}','{14}','{15}','{16}','{17}','{18}','{19}','{20}','{21}','{22}','{23}','{24}','{25}','{26}')", mac_address, device_status, device_type, card_no, employee_no, employee_name, gender, birth_date, join_date, designation, department_section, department, location, emailid, dhcpd_ip, internal_phone, mobile, blood_group, marriage_date, aadhar_no, aadhar_name, address1, address2, address3, city, pincode, state);
                        break;
                }
                result = this.database.execute(strQuery.ToString());
                //objcommon.WriteLog("DBQueryHandler", "Add_Employee_details Query : " + strQuery.ToString());
                strQuery.Clear();
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "Add_Employee_details Exception : " + ex.Message.ToString());
            }
            return result;
        }
        #endregion
        public DataTable GetCompliance_Management_Summary_report(string search)
        {
            StringBuilder strQuery = new StringBuilder();

            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select device_id,ou_id,ou_longname,device_name,ip_address, mac_address,role_of_pc,machine_serial_no,pc_model,user_name,convert(varchar,getdate() ,105)+' '+ convert(varchar,getdate() ,108) as report_date,audited_by,bios_password,card_reader_disabled, wireless_nw_adapter_disabled, multiple_nw_card_disabled,multiple_booting_disabled,wake_on_lan_disabled,chassis_intrusion_enabled,bios_updated,win_password,screen_saver_psw,welcome_screen_available,no_lan_cards,ipv6_disabled,os_installed_on_date,os_with_services_pack,no_of_patches,os_last_updated_on,pirated_unactivated_os,av_installed,av_last_updated_on,malwarev_found,non_ip_address_connection_established,unwanted_sw_installed,actine_directory_domain_controller_impl,sccm_installed,firewall_installed_enabled,firewall_configured,encryption_tool_installed_sdesk,encryption_tool_sdesk_name,encryption_tool_installed_vcrypt,encryption_tool_vcrypt_name,encryption_tool_used,folder_sharing_exists,default_sharing_exists,password_policy_implemented,account_lockout_policy_implemented,audit_policy_implemented,no_of_user_account_present,guest_account_enabled,administrator_renamed,ctrl_alt_del_disabled,display_last_username_enabled,clear_virtual_memory_enabled,usage_of_admin_acct_for_daily_week,bluetooth_support_services,computer_browser,distributed_link_tracking_client,fax,ftp_publishing,ip_helper,iis_admin,net_metting_remote_desktop_sharing,remote_auto_connection_mgr,remote_desktop,remote_registry,routing_remote_access,ssdp,snmp_service,snmp_trap,telnet,wireless,remote_assistance,usb_port_enabled,wireless_enabled,usb_based_mass_storage_device_used_name,usb_based_mass_storage_device_used_date,internet_donagle_broadband_used_name,internet_donagle_broadband_used_date,mobile_phone_installed_name,mobile_phone_installed_date,air_gap_violation,adn_lan_standalone_pc_used_over_internet,cl_data_exist_on_pc,two_factor_authentication_impl_pc_handling_cl_data ,attempt_todelete_log_reg,unwanted_data_exists,unwanted_data_exists_videos,unwanted_data_exists_photos,unwanted_data_exists_songs,official_data_internet_pc,cmptr_name_appt_rank_based,unwanted_sites_accessed,making_labeling_pc_nw_cable,system_date_time_wrong,pc_logged_off_user_info_login_again,evidence_collected_pages,evidence_collected, ");
                        strQuery.AppendFormat(" formated_permission,virtualization_on_terminals,cmptrs_not_produced_audit,non_activated_sw,unpatched_os,obsolete_os,usb_storage_enabled,unwanted_service_running,pers_fw_configured,privacy_feature_enabled,bios_not_hardenad,auto_patch_mgt_not_config,unauthorized_sw from compliance_management_summary {0} ", search);
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select device_id,ou_id,ou_longname,device_name,ip_address, mac_address,role_of_pc,machine_serial_no,pc_model,user_name,cast(date_format(now(),'%d-%m-%Y %H:%i:%s') as char) as report_date,audited_by,bios_password,card_reader_disabled, wireless_nw_adapter_disabled, multiple_nw_card_disabled,multiple_booting_disabled,wake_on_lan_disabled,chassis_intrusion_enabled,bios_updated,win_password,screen_saver_psw,welcome_screen_available,no_lan_cards,ipv6_disabled,os_installed_on_date,os_with_services_pack,no_of_patches,os_last_updated_on,pirated_unactivated_os,av_installed,av_last_updated_on,malwarev_found,non_ip_address_connection_established,unwanted_sw_installed,actine_directory_domain_controller_impl,sccm_installed,firewall_installed_enabled,firewall_configured,encryption_tool_installed_sdesk,encryption_tool_sdesk_name,encryption_tool_installed_vcrypt,encryption_tool_vcrypt_name,encryption_tool_used,folder_sharing_exists,default_sharing_exists,password_policy_implemented,account_lockout_policy_implemented,audit_policy_implemented,no_of_user_account_present,guest_account_enabled,administrator_renamed,ctrl_alt_del_disabled,display_last_username_enabled,clear_virtual_memory_enabled,usage_of_admin_acct_for_daily_week,bluetooth_support_services,computer_browser,distributed_link_tracking_client,fax,ftp_publishing,ip_helper,iis_admin,net_metting_remote_desktop_sharing,remote_auto_connection_mgr,remote_desktop,remote_registry,routing_remote_access,ssdp,snmp_service,snmp_trap,telnet,wireless,remote_assistance,usb_port_enabled,wireless_enabled,usb_based_mass_storage_device_used_name,usb_based_mass_storage_device_used_date,internet_donagle_broadband_used_name,internet_donagle_broadband_used_date,mobile_phone_installed_name,mobile_phone_installed_date,air_gap_violation,adn_lan_standalone_pc_used_over_internet,cl_data_exist_on_pc,two_factor_authentication_impl_pc_handling_cl_data ,attempt_todelete_log_reg,unwanted_data_exists,unwanted_data_exists_videos,unwanted_data_exists_photos,unwanted_data_exists_songs,official_data_internet_pc,cmptr_name_appt_rank_based,unwanted_sites_accessed,making_labeling_pc_nw_cable,system_date_time_wrong,pc_logged_off_user_info_login_again,evidence_collected_pages,evidence_collected, ");
                        strQuery.AppendFormat(" formated_permission,virtualization_on_terminals,cmptrs_not_produced_audit,non_activated_sw,unpatched_os,obsolete_os,usb_storage_enabled,unwanted_service_running,pers_fw_configured,privacy_feature_enabled,bios_not_hardenad,auto_patch_mgt_not_config,unauthorized_sw from compliance_management_summary {0} ", search);
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "GetCompliance_Management_Summary_report Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "GetCompliance_Management_Summary_report Exception : " + ex.Message.ToString());
            }
            return data_table;
        }

        #region AD Data
        public DataTable getaddata_ou()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select data_name as OUName,data_long_name as LongName from ad_data where data_type=1 ");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select data_name as OUName,data_long_name as LongName from ad_data where data_type=1 ");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "getaddata_ou Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "getaddata_ou Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable getaddata_user()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select isnull(AD.data_long_name , '') as OUName, UserName,LongName from (select data_name as UserName, data_long_name as LongName,data_id1 ");
                        strQuery.AppendFormat(" from ad_data ad left outer join data_linkage dl on ad.data_id = dl.data_id2 and linkage_type=2 where data_type=2) T left outer join ad_data AD on T.data_id1=AD.data_id ");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select isnull(AD.data_long_name , '') as OUName, UserName,LongName from (select data_name as UserName, data_long_name as LongName,data_id1 ");
                        strQuery.AppendFormat(" from ad_data ad left outer join data_linkage dl on ad.data_id = dl.data_id2 and linkage_type=2 where data_type=2) T left outer join ad_data AD on T.data_id1=AD.data_id ");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "getaddata_user Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "getaddata_user Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        public DataTable getaddata_device()
        {
            StringBuilder strQuery = new StringBuilder();
            try
            {
                switch (dbtype)
                {
                    case OwnYITConstant.DatabaseTypes.MSSQL_SERVER:
                        strQuery.AppendFormat(" select isnull(AD.data_long_name , '') as OUName, DeviceName from (select data_name as DeviceName, data_id1 ");
                        strQuery.AppendFormat(" from ad_data ad left outer join data_linkage dl on ad.data_id = dl.data_id2 and linkage_type=3 where data_type=3) T left outer join ad_data AD on T.data_id1=AD.data_id ");
                        break;
                    case OwnYITConstant.DatabaseTypes.MYSQL_SERVER:
                        strQuery.AppendFormat(" select isnull(AD.data_long_name , '') as OUName, DeviceName from (select data_name as DeviceName, data_id1 ");
                        strQuery.AppendFormat(" from ad_data ad left outer join data_linkage dl on ad.data_id = dl.data_id2 and linkage_type=3 where data_type=3) T left outer join ad_data AD on T.data_id1=AD.data_id ");
                        break;
                }
                objcommon.WriteLog("DBQueryHandler", "getaddata_device Query : " + strQuery.ToString());
                data_table = this.database.getDataTable(strQuery.ToString());
            }
            catch (Exception ex)
            {
                objcommon.WriteLog("DBQueryHandler", "getaddata_device Exception : " + ex.Message.ToString());
            }
            return data_table;
        }
        #endregion
    }
}
